/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Voucherify);
  }
}(this, function(expect, Voucherify) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Voucherify.ManagementApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ManagementApi', function() {
    describe('assignUser', function() {
      it('should call assignUser successfully', function(done) {
        //uncomment below and update the code to test assignUser
        //instance.assignUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBrand', function() {
      it('should call createBrand successfully', function(done) {
        //uncomment below and update the code to test createBrand
        //instance.createBrand(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCustomEventSchema', function() {
      it('should call createCustomEventSchema successfully', function(done) {
        //uncomment below and update the code to test createCustomEventSchema
        //instance.createCustomEventSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMetadataSchema', function() {
      it('should call createMetadataSchema successfully', function(done) {
        //uncomment below and update the code to test createMetadataSchema
        //instance.createMetadataSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProject', function() {
      it('should call createProject successfully', function(done) {
        //uncomment below and update the code to test createProject
        //instance.createProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStackingRules', function() {
      it('should call createStackingRules successfully', function(done) {
        //uncomment below and update the code to test createStackingRules
        //instance.createStackingRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWebhook', function() {
      it('should call createWebhook successfully', function(done) {
        //uncomment below and update the code to test createWebhook
        //instance.createWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBrand', function() {
      it('should call deleteBrand successfully', function(done) {
        //uncomment below and update the code to test deleteBrand
        //instance.deleteBrand(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCustomEventSchema', function() {
      it('should call deleteCustomEventSchema successfully', function(done) {
        //uncomment below and update the code to test deleteCustomEventSchema
        //instance.deleteCustomEventSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMetadataSchema', function() {
      it('should call deleteMetadataSchema successfully', function(done) {
        //uncomment below and update the code to test deleteMetadataSchema
        //instance.deleteMetadataSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProject', function() {
      it('should call deleteProject successfully', function(done) {
        //uncomment below and update the code to test deleteProject
        //instance.deleteProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStackingRules', function() {
      it('should call deleteStackingRules successfully', function(done) {
        //uncomment below and update the code to test deleteStackingRules
        //instance.deleteStackingRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWebhook', function() {
      it('should call deleteWebhook successfully', function(done) {
        //uncomment below and update the code to test deleteWebhook
        //instance.deleteWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBrand', function() {
      it('should call getBrand successfully', function(done) {
        //uncomment below and update the code to test getBrand
        //instance.getBrand(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCustomEventSchema', function() {
      it('should call getCustomEventSchema successfully', function(done) {
        //uncomment below and update the code to test getCustomEventSchema
        //instance.getCustomEventSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMetadataSchema1', function() {
      it('should call getMetadataSchema1 successfully', function(done) {
        //uncomment below and update the code to test getMetadataSchema1
        //instance.getMetadataSchema1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProject', function() {
      it('should call getProject successfully', function(done) {
        //uncomment below and update the code to test getProject
        //instance.getProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStackingRules', function() {
      it('should call getStackingRules successfully', function(done) {
        //uncomment below and update the code to test getStackingRules
        //instance.getStackingRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUser', function() {
      it('should call getUser successfully', function(done) {
        //uncomment below and update the code to test getUser
        //instance.getUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWebhook', function() {
      it('should call getWebhook successfully', function(done) {
        //uncomment below and update the code to test getWebhook
        //instance.getWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inviteUser', function() {
      it('should call inviteUser successfully', function(done) {
        //uncomment below and update the code to test inviteUser
        //instance.inviteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBrands', function() {
      it('should call listBrands successfully', function(done) {
        //uncomment below and update the code to test listBrands
        //instance.listBrands(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCustomEventSchemas', function() {
      it('should call listCustomEventSchemas successfully', function(done) {
        //uncomment below and update the code to test listCustomEventSchemas
        //instance.listCustomEventSchemas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMetadataSchemas1', function() {
      it('should call listMetadataSchemas1 successfully', function(done) {
        //uncomment below and update the code to test listMetadataSchemas1
        //instance.listMetadataSchemas1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProjects', function() {
      it('should call listProjects successfully', function(done) {
        //uncomment below and update the code to test listProjects
        //instance.listProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStackingRules', function() {
      it('should call listStackingRules successfully', function(done) {
        //uncomment below and update the code to test listStackingRules
        //instance.listStackingRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsers', function() {
      it('should call listUsers successfully', function(done) {
        //uncomment below and update the code to test listUsers
        //instance.listUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWebhooks', function() {
      it('should call listWebhooks successfully', function(done) {
        //uncomment below and update the code to test listWebhooks
        //instance.listWebhooks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementCopyCampaignTemplate', function() {
      it('should call managementCopyCampaignTemplate successfully', function(done) {
        //uncomment below and update the code to test managementCopyCampaignTemplate
        //instance.managementCopyCampaignTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementListCampaignTemplates', function() {
      it('should call managementListCampaignTemplates successfully', function(done) {
        //uncomment below and update the code to test managementListCampaignTemplates
        //instance.managementListCampaignTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unassignUser', function() {
      it('should call unassignUser successfully', function(done) {
        //uncomment below and update the code to test unassignUser
        //instance.unassignUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBrand', function() {
      it('should call updateBrand successfully', function(done) {
        //uncomment below and update the code to test updateBrand
        //instance.updateBrand(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomEventSchema', function() {
      it('should call updateCustomEventSchema successfully', function(done) {
        //uncomment below and update the code to test updateCustomEventSchema
        //instance.updateCustomEventSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMetadataSchema', function() {
      it('should call updateMetadataSchema successfully', function(done) {
        //uncomment below and update the code to test updateMetadataSchema
        //instance.updateMetadataSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProject', function() {
      it('should call updateProject successfully', function(done) {
        //uncomment below and update the code to test updateProject
        //instance.updateProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStackingRules', function() {
      it('should call updateStackingRules successfully', function(done) {
        //uncomment below and update the code to test updateStackingRules
        //instance.updateStackingRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUser', function() {
      it('should call updateUser successfully', function(done) {
        //uncomment below and update the code to test updateUser
        //instance.updateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWebhook', function() {
      it('should call updateWebhook successfully', function(done) {
        //uncomment below and update the code to test updateWebhook
        //instance.updateWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
