/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * OpenAPI spec version: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { OrderItemProduct } from '../models/OrderItemProduct';
import { OrderItemSku } from '../models/OrderItemSku';
import { HttpFile } from '../http/http';

export class OrderItem {
    /**
    * Unique identifier of the SKU. It is assigned by Voucherify.
    */
    'skuId'?: string | null;
    /**
    * Unique identifier of the product. It is assigned by Voucherify.
    */
    'productId'?: string | null;
    /**
    * Used along with the source_id property, can be set to either sku or product.
    */
    'relatedObject'?: OrderItemRelatedObjectEnum | null;
    /**
    * The merchant\'s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service.
    */
    'sourceId'?: string | null;
    /**
    * The quantity of the particular item in the cart.
    */
    'quantity'?: number | null;
    /**
    * Number of dicounted items.
    */
    'discountQuantity'?: number | null;
    /**
    * A positive integer in the smallest unit quantity representing the total amount of the order; this is the sum of the order items\' quantity.
    */
    'initialQuantity'?: number | null;
    /**
    * The total amount of the order item (price * quantity).
    */
    'amount'?: number | null;
    /**
    * Sum of all order-item-level discounts applied to the order.
    */
    'discountAmount'?: number | null;
    /**
    * A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items\' amounts.
    */
    'initialAmount'?: number | null;
    /**
    * Unit price of an item. The value is multiplied by 100 to represent 2 decimal places. For example `10000 cents` for `$100.00`.
    */
    'price'?: number | null;
    'product'?: OrderItemProduct | null;
    'sku'?: OrderItemSku | null;
    /**
    * A set of custom key/value pairs that you can attach to an order item. It can be useful for storing additional information about the order item in a structured format. It can be used to define business validation rules.
    */
    'metadata'?: any | null;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "skuId",
            "baseName": "sku_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "productId",
            "baseName": "product_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "relatedObject",
            "baseName": "related_object",
            "type": "OrderItemRelatedObjectEnum",
            "format": ""
        },
        {
            "name": "sourceId",
            "baseName": "source_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number",
            "format": ""
        },
        {
            "name": "discountQuantity",
            "baseName": "discount_quantity",
            "type": "number",
            "format": ""
        },
        {
            "name": "initialQuantity",
            "baseName": "initial_quantity",
            "type": "number",
            "format": ""
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number",
            "format": ""
        },
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number",
            "format": ""
        },
        {
            "name": "initialAmount",
            "baseName": "initial_amount",
            "type": "number",
            "format": ""
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "number",
            "format": ""
        },
        {
            "name": "product",
            "baseName": "product",
            "type": "OrderItemProduct",
            "format": ""
        },
        {
            "name": "sku",
            "baseName": "sku",
            "type": "OrderItemSku",
            "format": ""
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "any",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return OrderItem.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum OrderItemRelatedObjectEnum {
    Product = 'product',
    Sku = 'sku'
}

