/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * OpenAPI spec version: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { BundleIdentifiedItem } from '../models/BundleIdentifiedItem';
import { BundleMissingItem } from '../models/BundleMissingItem';
import { HttpFile } from '../http/http';

/**
* Determines how the bundle conditions are met by the customer\'s order items. The items in the order meet the bundle condition in the following way: SKU, then product, then collection.
*/
export class Bundle {
    /**
    * Determines how many bundles are qualified. If there are missing bundle products, the value is `0`. If the bundle is qualified, the value is `1`. The maximum number of identified bundles can equal the number set in `limit`. Also defines the multiplier of the discount for `AMOUNT`, `PERCENT`, and `UNIT` discount types. To inform end-customers that more products can be added to meet additional bundles, compare this parameter with `limit`.
    */
    'quantity'?: number | null;
    /**
    * Determines the maximum number of identified bundles. This also defines the maximum multiplier of the bundle discount.
    */
    'limit'?: number | null;
    /**
    * Determines products from the customer\'s order items that meet bundle conditions. SKUs meet the conditions for their product that is used in the bundle. Returns only the products and their quantity that meet the bundle.
    */
    'identified'?: Array<BundleIdentifiedItem> | null;
    /**
    * Determines products, SKUs, or collections from the bundle that are missing in the customer\'s order items. Determines also the missing quantity. For collections, this means that order items do not include a sufficient number of items that belong to the collection. Not returned when all required bundle items are in the order.
    */
    'missing'?: Array<BundleMissingItem> | null;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number",
            "format": ""
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number",
            "format": ""
        },
        {
            "name": "identified",
            "baseName": "identified",
            "type": "Array<BundleIdentifiedItem>",
            "format": ""
        },
        {
            "name": "missing",
            "baseName": "missing",
            "type": "Array<BundleMissingItem>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Bundle.attributeTypeMap;
    }

    public constructor() {
    }
}
