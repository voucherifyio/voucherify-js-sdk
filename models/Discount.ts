/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * OpenAPI spec version: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { DiscountProduct } from '../models/DiscountProduct';
import { DiscountUnitMultipleOneUnit } from '../models/DiscountUnitMultipleOneUnit';
import { SimpleSkuDiscountUnit } from '../models/SimpleSkuDiscountUnit';
import { HttpFile } from '../http/http';

export class Discount {
    'type'?: DiscountTypeEnum | null;
    /**
    * Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000.
    */
    'amountOff'?: number | null;
    /**
    * Formula used to dynamically calculate the discount.
    */
    'amountOffFormula'?: string | null;
    /**
    * Maximum discount amount per order.
    */
    'aggregatedAmountLimit'?: number | null;
    'effect'?: DiscountEffectEnum | null;
    /**
    * Flag indicating whether the discount was calculated using a formula.
    */
    'isDynamic'?: boolean | null;
    /**
    * Number of units to be granted a full value discount.
    */
    'unitOff'?: number | null;
    /**
    * Formula used to dynamically calculate the number of units.
    */
    'unitOffFormula'?: string | null;
    /**
    * The product deemed as free, chosen from product inventory (e.g. time, items).
    */
    'unitType'?: string | null;
    'product'?: DiscountProduct | null;
    'sku'?: SimpleSkuDiscountUnit;
    'units'?: Array<DiscountUnitMultipleOneUnit> | null;
    /**
    * The percent discount that the customer will receive.
    */
    'percentOff'?: number | null;
    /**
    * Formula used to dynamically calculate the discount.
    */
    'percentOffFormula'?: string | null;
    /**
    * Upper limit allowed to be applied as a discount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600.
    */
    'amountLimit'?: number | null;
    /**
    * Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the `fixed_amount_formula` parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value.
    */
    'fixedAmount'?: number | null;
    /**
    * Formula used to dynamically calculate the discount.
    */
    'fixedAmountFormula'?: string | null;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "DiscountTypeEnum",
            "format": ""
        },
        {
            "name": "amountOff",
            "baseName": "amount_off",
            "type": "number",
            "format": ""
        },
        {
            "name": "amountOffFormula",
            "baseName": "amount_off_formula",
            "type": "string",
            "format": ""
        },
        {
            "name": "aggregatedAmountLimit",
            "baseName": "aggregated_amount_limit",
            "type": "number",
            "format": ""
        },
        {
            "name": "effect",
            "baseName": "effect",
            "type": "DiscountEffectEnum",
            "format": ""
        },
        {
            "name": "isDynamic",
            "baseName": "is_dynamic",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "unitOff",
            "baseName": "unit_off",
            "type": "number",
            "format": ""
        },
        {
            "name": "unitOffFormula",
            "baseName": "unit_off_formula",
            "type": "string",
            "format": ""
        },
        {
            "name": "unitType",
            "baseName": "unit_type",
            "type": "string",
            "format": ""
        },
        {
            "name": "product",
            "baseName": "product",
            "type": "DiscountProduct",
            "format": ""
        },
        {
            "name": "sku",
            "baseName": "sku",
            "type": "SimpleSkuDiscountUnit",
            "format": ""
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "Array<DiscountUnitMultipleOneUnit>",
            "format": ""
        },
        {
            "name": "percentOff",
            "baseName": "percent_off",
            "type": "number",
            "format": ""
        },
        {
            "name": "percentOffFormula",
            "baseName": "percent_off_formula",
            "type": "string",
            "format": ""
        },
        {
            "name": "amountLimit",
            "baseName": "amount_limit",
            "type": "number",
            "format": ""
        },
        {
            "name": "fixedAmount",
            "baseName": "fixed_amount",
            "type": "number",
            "format": ""
        },
        {
            "name": "fixedAmountFormula",
            "baseName": "fixed_amount_formula",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Discount.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum DiscountTypeEnum {
    Amount = 'AMOUNT',
    Unit = 'UNIT',
    Percent = 'PERCENT',
    Fixed = 'FIXED'
}
export enum DiscountEffectEnum {
    ApplyToOrder = 'APPLY_TO_ORDER',
    ApplyToItems = 'APPLY_TO_ITEMS',
    ApplyToItemsProportionally = 'APPLY_TO_ITEMS_PROPORTIONALLY',
    ApplyToItemsProportionallyByQuantity = 'APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY',
    ApplyToItemsByQuantity = 'APPLY_TO_ITEMS_BY_QUANTITY',
    AddMissingItems = 'ADD_MISSING_ITEMS',
    AddNewItems = 'ADD_NEW_ITEMS',
    AddManyItems = 'ADD_MANY_ITEMS'
}

