/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CampaignsCreateRequestBody from '../model/CampaignsCreateRequestBody';
import CampaignsCreateResponseBody from '../model/CampaignsCreateResponseBody';
import CampaignsDeleteResponseBody from '../model/CampaignsDeleteResponseBody';
import CampaignsGetResponseBody from '../model/CampaignsGetResponseBody';
import CampaignsImportCreateResponseBody from '../model/CampaignsImportCreateResponseBody';
import CampaignsImportCsvCreateResponseBody from '../model/CampaignsImportCsvCreateResponseBody';
import CampaignsImportVoucherItem from '../model/CampaignsImportVoucherItem';
import CampaignsListResponseBody from '../model/CampaignsListResponseBody';
import CampaignsSummaryGetResponseBody from '../model/CampaignsSummaryGetResponseBody';
import CampaignsTransactionsExportCreateRequestBody from '../model/CampaignsTransactionsExportCreateRequestBody';
import CampaignsTransactionsExportCreateResponseBody from '../model/CampaignsTransactionsExportCreateResponseBody';
import CampaignsTransactionsListResponseBody from '../model/CampaignsTransactionsListResponseBody';
import CampaignsUpdateRequestBody from '../model/CampaignsUpdateRequestBody';
import CampaignsUpdateResponseBody from '../model/CampaignsUpdateResponseBody';
import CampaignsVouchersCreateCombinedResponseBody from '../model/CampaignsVouchersCreateCombinedResponseBody';
import CampaignsVouchersCreateInBulkRequestBody from '../model/CampaignsVouchersCreateInBulkRequestBody';
import CampaignsVouchersCreateRequestBody from '../model/CampaignsVouchersCreateRequestBody';
import CampaignsVouchersCreateResponseBody from '../model/CampaignsVouchersCreateResponseBody';
import ParameterCampaignStatusListCampaigns from '../model/ParameterCampaignStatusListCampaigns';
import ParameterCampaignType from '../model/ParameterCampaignType';
import ParameterCampaignsAccessSetttings from '../model/ParameterCampaignsAccessSetttings';
import ParameterExpandListCampaigns from '../model/ParameterExpandListCampaigns';
import ParameterFiltersListCampaigns from '../model/ParameterFiltersListCampaigns';
import ParameterOrderListCampaigns from '../model/ParameterOrderListCampaigns';
import ParameterOrderListTransactions from '../model/ParameterOrderListTransactions';
import ParametersFiltersListCampaignTransactions from '../model/ParametersFiltersListCampaignTransactions';

/**
* Campaigns service.
* @module api/CampaignsApi
* @version v2018-08-01
*/
export default class CampaignsApi {

    /**
    * Constructs a new CampaignsApi. 
    * @alias module:api/CampaignsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVoucherWithSpecificCodeToCampaign operation.
     * @callback module:api/CampaignsApi~addVoucherWithSpecificCodeToCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsVouchersCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Voucher with Specific Code to Campaign
     * This method gives a possibility to add a new voucher to an existing campaign. The voucher definition will be inherited from the definition kept in the campaign profile. However, you are able to overwrite a few properties inherited from the campaign.
     * @param {String} campaignId The campaign ID or name of the campaign to which voucher will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.
     * @param {String} code A custom **code** that identifies the voucher.
     * @param {Object} opts Optional parameters
     * @param {module:model/CampaignsVouchersCreateRequestBody} [campaignsVouchersCreateRequestBody] Specify the voucher parameters that you would like to overwrite.
     * @param {module:api/CampaignsApi~addVoucherWithSpecificCodeToCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsVouchersCreateResponseBody}
     */
    addVoucherWithSpecificCodeToCampaign(campaignId, code, opts, callback) {
      opts = opts || {};
      let postBody = opts['campaignsVouchersCreateRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling addVoucherWithSpecificCodeToCampaign");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling addVoucherWithSpecificCodeToCampaign");
      }

      let pathParams = {
        'campaignId': campaignId,
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignsVouchersCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/campaigns/{campaignId}/vouchers/{code}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVouchersToCampaign operation.
     * @callback module:api/CampaignsApi~addVouchersToCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsVouchersCreateCombinedResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Vouchers to Campaign
     * This method gives the possibility to push new vouchers to an existing campaign. New vouchers will inherit properties from the campaign profile. However, it is possible to overwrite some of them in the request body. If you provide an optional code_config parameter with a voucher code configuration, then it will be used to generate new voucher codes. Otherwise, the voucher code configuration from the campaign will be used. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this [API request](/api-reference/async-actions/get-async-action).
     * @param {String} campaignId The campaign ID or name of the campaign to which voucher(s) will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.
     * @param {Object} opts Optional parameters
     * @param {Number} [vouchersCount] Number of vouchers that should be added.
     * @param {module:model/CampaignsVouchersCreateInBulkRequestBody} [campaignsVouchersCreateInBulkRequestBody] Specify the voucher parameters that you would like to overwrite.
     * @param {module:api/CampaignsApi~addVouchersToCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsVouchersCreateCombinedResponseBody}
     */
    addVouchersToCampaign(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['campaignsVouchersCreateInBulkRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling addVouchersToCampaign");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'vouchers_count': opts['vouchersCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignsVouchersCreateCombinedResponseBody;
      return this.apiClient.callApi(
        '/v1/campaigns/{campaignId}/vouchers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCampaign operation.
     * @callback module:api/CampaignsApi~createCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Campaign
     * Method to create a batch of vouchers aggregated in one campaign. You can choose a variety of voucher types and define a unique pattern for generating codes.    📘 Global uniqueness  All campaign codes are unique across the whole project. Voucherify will not allow you to generate 2 campaigns with the same coupon code.    🚧 Code generation status  This is an asynchronous action; you cant read or modify a newly created campaign until the code generation is completed. See the creation_status field in the [campaign object](/api-reference/campaigns/campaign-object) description. 🚧 Standalone Vouchers and Campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), generic (standalone) vouchers created through the Voucherify dashboard create a campaign for that voucher. However, you cannot create a standalone discount or gift voucher campaign with the type: STANDALONE through the API. Voucherify developers work on adding that feature. Follow the [Voucherify Release Notes](https://support.voucherify.io/article/23-whats-new-in-voucherify) for more details about released features.
     * @param {Object} opts Optional parameters
     * @param {module:model/CampaignsCreateRequestBody} [campaignsCreateRequestBody] Specify the details of the campaign that you would like to create.
     * @param {module:api/CampaignsApi~createCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsCreateResponseBody}
     */
    createCampaign(opts, callback) {
      opts = opts || {};
      let postBody = opts['campaignsCreateRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignsCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/campaigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCampaign operation.
     * @callback module:api/CampaignsApi~deleteCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsDeleteResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Campaign
     * Deletes a campaign and all related vouchers. This action cannot be undone. Also, this method immediately removes any redemptions on the voucher. If the force parameter is set to false or not set at all, the campaign and all related vouchers will be moved to [the bin](/api-reference/bin/list-bin-entries). This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this [API request](/api-reference/async-actions/get-async-action).
     * @param {String} campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the campaign and related vouchers will be moved to the bin. Going forward, the user will be able to create the next campaign with exactly the same name.
     * @param {module:api/CampaignsApi~deleteCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsDeleteResponseBody}
     */
    deleteCampaign(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteCampaign");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CampaignsDeleteResponseBody;
      return this.apiClient.callApi(
        '/v1/campaigns/{campaignId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableCampaign operation.
     * @callback module:api/CampaignsApi~disableCampaignCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable Campaign
     * There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **inactive**. The vouchers in this campaign can no longer be redeemed.
     * @param {String} campaignId The campaign ID or name of the campaign being disabled. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.
     * @param {module:api/CampaignsApi~disableCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disableCampaign(campaignId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling disableCampaign");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/campaigns/{campaignId}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableCampaign operation.
     * @callback module:api/CampaignsApi~enableCampaignCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable Campaign
     * There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **active**. The vouchers in this campaign can be redeemed - only if the redemption occurs after the start date of the campaign and voucher and the voucher and campaign are not expired.
     * @param {String} campaignId The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.
     * @param {module:api/CampaignsApi~enableCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    enableCampaign(campaignId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling enableCampaign");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/campaigns/{campaignId}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportCampaignTransactions operation.
     * @callback module:api/CampaignsApi~exportCampaignTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsTransactionsExportCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Campaign Transactions
     * Export transactions is an asynchronous process that generates a CSV file with the data about credit movements on all gift cards or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the [GET Export](/api-reference/exports/get-export) method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    👍 Export Loyalty Campaign Transactions  For loyalty campaigns, this method works in the same way the [POST Export Loyalty Campaign Transactions](/api-reference/loyalties/export-loyalty-campaign-transactions) does.
     * @param {String} campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.
     * @param {Object} opts Optional parameters
     * @param {module:model/CampaignsTransactionsExportCreateRequestBody} [campaignsTransactionsExportCreateRequestBody] Specify the parameters for the transaction export.
     * @param {module:api/CampaignsApi~exportCampaignTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsTransactionsExportCreateResponseBody}
     */
    exportCampaignTransactions(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['campaignsTransactionsExportCreateRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling exportCampaignTransactions");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignsTransactionsExportCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/campaigns/{campaignId}/transactions/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaign operation.
     * @callback module:api/CampaignsApi~getCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Campaign
     * Retrieves the campaign with the given campaign ID or campaign name.
     * @param {String} campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.
     * @param {module:api/CampaignsApi~getCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsGetResponseBody}
     */
    getCampaign(campaignId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaign");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CampaignsGetResponseBody;
      return this.apiClient.callApi(
        '/v1/campaigns/{campaignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignSummary operation.
     * @callback module:api/CampaignsApi~getCampaignSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsSummaryGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Campaign Summary
     * Returns data for campaign analytics, covering validations, redemptions, publications, and other details specific to a given campaign type. Use start_date and end_date to narrow down the data to specific periods. 🚧 Campaigns created before v20250602 version This endpoint returns analytics data for campaigns that were created after the [v20250602 version](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20250602) was released on 17 June 2025. Older campaigns return empty data.
     * @param {String} campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Timestamp representing the date which results must begin on. Represented in ISO 8601 format.
     * @param {Date} [endDate] Timestamp representing the date which results must end on. Represented in ISO 8601 format.
     * @param {module:api/CampaignsApi~getCampaignSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsSummaryGetResponseBody}
     */
    getCampaignSummary(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaignSummary");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CampaignsSummaryGetResponseBody;
      return this.apiClient.callApi(
        '/v1/campaigns/{campaignId}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importVouchersToCampaign operation.
     * @callback module:api/CampaignsApi~importVouchersToCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsImportCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Vouchers to Campaign
     * Imports vouchers to an **existing** campaign. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this [API request](/api-reference/async-actions/get-async-action).
     * @param {String} campaignId The ID of an existing campaign to which youre importing the codes. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/CampaignsImportVoucherItem>} [campaignsImportVoucherItem] Discount type, expiration date and the remaining attributes will be taken from the [Campaign](/api-reference/campaigns/get-campaign) settings.
     * @param {module:api/CampaignsApi~importVouchersToCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsImportCreateResponseBody}
     */
    importVouchersToCampaign(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['campaignsImportVoucherItem'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling importVouchersToCampaign");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignsImportCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/campaigns/{campaignId}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importVouchersToCampaignUsingCsv operation.
     * @callback module:api/CampaignsApi~importVouchersToCampaignUsingCsvCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsImportCsvCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Vouchers to Campaign by CSV
     * Imports vouchers to an **existing** campaign.   The CSV file has to include headers in the first line.  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this [API request](/api-reference/async-actions/get-async-action).
     * @param {String} campaignId The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.
     * @param {Object} opts Optional parameters
     * @param {File} [file] File path.
     * @param {module:api/CampaignsApi~importVouchersToCampaignUsingCsvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsImportCsvCreateResponseBody}
     */
    importVouchersToCampaignUsingCsv(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling importVouchersToCampaignUsingCsv");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CampaignsImportCsvCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/campaigns/{campaignId}/importCSV', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCampaignTransactions operation.
     * @callback module:api/CampaignsApi~listCampaignTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsTransactionsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Campaign Transactions
     * Retrieves all transactions for the campaign with the given campaign ID or campaign name. The id filter denotes the unique transaction identifier.  🚧  The endpoint works only for gift card and loyalty campaigns.
     * @param {String} campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items.
     * @param {module:model/ParameterOrderListTransactions} [order] Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order.
     * @param {String} [startingAfterId] A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID.
     * @param {module:model/ParametersFiltersListCampaignTransactions} [filters] Filters for listing responses.
     * @param {module:api/CampaignsApi~listCampaignTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsTransactionsListResponseBody}
     */
    listCampaignTransactions(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listCampaignTransactions");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'starting_after_id': opts['startingAfterId'],
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CampaignsTransactionsListResponseBody;
      return this.apiClient.callApi(
        '/v1/campaigns/{campaignId}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCampaigns operation.
     * @callback module:api/CampaignsApi~listCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Campaigns
     * Retrieve a list of campaigns in a project.  The campaigns are returned sorted by creation date, with the most recent campaigns appearing first.   When you get a list of campaigns, you can optionally specify query parameters to customize the amount of campaigns returned per call using limit, which page of campaigns to return using page, sort the campaigns using the order query parameter and filter the results by the campaign_type. This method will return an error when trying to return a limit of more than 100 campaigns.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items.
     * @param {Number} [page] Which page of results to return. The lowest value is 1.
     * @param {module:model/ParameterCampaignType} [campaignType] This attribute allows filtering by campaign type.
     * @param {module:model/ParameterExpandListCampaigns} [expand] Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores.
     * @param {module:model/ParameterCampaignStatusListCampaigns} [campaignStatus] Sorts the results by the status of the campaign.
     * @param {Boolean} [isReferralCode] Sorts the results that are or are not referral campaigns.
     * @param {module:model/ParameterOrderListCampaigns} [order] Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order.
     * @param {module:model/ParameterFiltersListCampaigns} [filters] Filters the results by various campaign properties.
     * @param {module:model/ParameterCampaignsAccessSetttings} [accessSettings] Filter by areas and stores IDs to return campaigns that are assigned to areas, stores, and all stores in an area.
     * @param {module:api/CampaignsApi~listCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsListResponseBody}
     */
    listCampaigns(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'campaign_type': opts['campaignType'],
        'expand': opts['expand'],
        'campaign_status': opts['campaignStatus'],
        'is_referral_code': opts['isReferralCode'],
        'order': opts['order'],
        'filters': opts['filters'],
        'access_settings': opts['accessSettings']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CampaignsListResponseBody;
      return this.apiClient.callApi(
        '/v1/campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaign operation.
     * @callback module:api/CampaignsApi~updateCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Campaign
     * Updates the specified campaign by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.  Fields other than the ones listed in the request body wont be modified. Even if provided, they will be silently skipped.     🚧 Vouchers will be affected  This method will update vouchers aggregated in the campaign. It will affect all vouchers that are not published or redeemed yet.
     * @param {String} campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.
     * @param {Object} opts Optional parameters
     * @param {module:model/CampaignsUpdateRequestBody} [campaignsUpdateRequestBody] Specify the campaign parameters to be updated.
     * @param {module:api/CampaignsApi~updateCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsUpdateResponseBody}
     */
    updateCampaign(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['campaignsUpdateRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateCampaign");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignsUpdateResponseBody;
      return this.apiClient.callApi(
        '/v1/campaigns/{campaignId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
