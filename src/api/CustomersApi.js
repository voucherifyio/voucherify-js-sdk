/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomersActivityListResponseBody from '../model/CustomersActivityListResponseBody';
import CustomersCreateRequestBody from '../model/CustomersCreateRequestBody';
import CustomersCreateResponseBody from '../model/CustomersCreateResponseBody';
import CustomersGetResponseBody from '../model/CustomersGetResponseBody';
import CustomersImportCsvCreateResponseBody from '../model/CustomersImportCsvCreateResponseBody';
import CustomersListResponseBody from '../model/CustomersListResponseBody';
import CustomersMetadataUpdateInBulkRequestBody from '../model/CustomersMetadataUpdateInBulkRequestBody';
import CustomersMetadataUpdateInBulkResponseBody from '../model/CustomersMetadataUpdateInBulkResponseBody';
import CustomersPermanentDeletionCreateResponseBody from '../model/CustomersPermanentDeletionCreateResponseBody';
import CustomersRedeemablesListResponseBody from '../model/CustomersRedeemablesListResponseBody';
import CustomersSegmentsListResponseBody from '../model/CustomersSegmentsListResponseBody';
import CustomersUpdateInBulkRequestBody from '../model/CustomersUpdateInBulkRequestBody';
import CustomersUpdateInBulkResponseBody from '../model/CustomersUpdateInBulkResponseBody';
import CustomersUpdateRequestBody from '../model/CustomersUpdateRequestBody';
import CustomersUpdateResponseBody from '../model/CustomersUpdateResponseBody';
import ParameterActivityCategory from '../model/ParameterActivityCategory';
import ParameterCampaignType from '../model/ParameterCampaignType';
import ParameterCustomerEvent from '../model/ParameterCustomerEvent';
import ParameterFiltersListCustomerRedeemables from '../model/ParameterFiltersListCustomerRedeemables';
import ParameterOrderCreatedAt from '../model/ParameterOrderCreatedAt';
import ParameterOrderListCustomers from '../model/ParameterOrderListCustomers';
import ParameterOrderListRedeemables from '../model/ParameterOrderListRedeemables';

/**
* Customers service.
* @module api/CustomersApi
* @version v2018-08-01
*/
export default class CustomersApi {

    /**
    * Constructs a new CustomersApi. 
    * @alias module:api/CustomersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCustomer operation.
     * @callback module:api/CustomersApi~createCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomersCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Customer
     * Creates a customer object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the customer database, Voucherify will return a related customer object with updated fields.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomersCreateRequestBody} [customersCreateRequestBody] Create a customer with specified parameters.
     * @param {module:api/CustomersApi~createCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomersCreateResponseBody}
     */
    createCustomer(opts, callback) {
      opts = opts || {};
      let postBody = opts['customersCreateRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomersCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/customers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerPermanentlyDeletion operation.
     * @callback module:api/CustomersApi~customerPermanentlyDeletionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomersPermanentDeletionCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Customer Permanently
     * The organization user can remove consumer data permanently from the Voucherify system by using this API method. It deletes all customer data and connected resources. It makes the customer profile forgotten by Voucherify.
     * @param {String} customerId A Voucherify customers id or source_id.
     * @param {module:api/CustomersApi~customerPermanentlyDeletionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomersPermanentDeletionCreateResponseBody}
     */
    customerPermanentlyDeletion(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customerPermanentlyDeletion");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomersPermanentDeletionCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/customers/{customerId}/permanent-deletion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomer operation.
     * @callback module:api/CustomersApi~deleteCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Customer
     * This method deletes a customer.
     * @param {String} customerId A Voucherify customers id or source_id.
     * @param {module:api/CustomersApi~deleteCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomer(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/customers/{customerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomer operation.
     * @callback module:api/CustomersApi~getCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomersGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Customer
     * Retrieves details of a given customer by customers id or source_id.
     * @param {String} customerId A Voucherify customers id or source_id.
     * @param {module:api/CustomersApi~getCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomersGetResponseBody}
     */
    getCustomer(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomersGetResponseBody;
      return this.apiClient.callApi(
        '/v1/customers/{customerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importCustomersUsingCsv operation.
     * @callback module:api/CustomersApi~importCustomersUsingCsvCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomersImportCsvCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import and Update Customers using CSV
     * This API method lets you import or update customer data. To get a proper and valid response, please send a CSV file with data separated by commas.   # Request Example # CSV File Format The CSV file has to include headers in the first line. All properties which cannot be mapped to standard customer fields will be added to the metadata object.  ðŸ“˜ Standard customer fields mapping  **No spaces allowed in field names**    Id, Name, Email, Phone, Birthdate, Source_id, Address_line_1, Address_line_2, Address_Postal_Code, Address_City, Address_State, Address_Country, Description, Metadata_name_1, Metadata_name_2 # Update Customers using CSV If you would like to update customers data, you can do it using the CSV file with new data. However, remember to include a source_id in your CSV file to manage the update successfully. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this [API request](/api-reference/async-actions/get-async-action).
     * @param {Object} opts Optional parameters
     * @param {File} [file] File path.
     * @param {module:api/CustomersApi~importCustomersUsingCsvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomersImportCsvCreateResponseBody}
     */
    importCustomersUsingCsv(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CustomersImportCsvCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/customers/importCSV', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCustomerActivity operation.
     * @callback module:api/CustomersApi~listCustomerActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomersActivityListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Customer Activity
     * Retrieves activity details of a given customer by customers id or source_id.
     * @param {String} customerId A Voucherify customers id or source ID of the customer who performed the activities.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items.
     * @param {module:model/ParameterOrderCreatedAt} [order] Apply this filter to order the events according the date and time when it was created. 
     * @param {String} [startingAfterId] A cursor for pagination. It retrieves the events starting after an event with the given ID.
     * @param {Date} [startDate] Timestamp representing the date and time which results must begin on. Represented in ISO 8601 format.
     * @param {Date} [endDate] Timestamp representing the date and time which results must end on. Represented in ISO 8601 format.
     * @param {String} [campaignId] Requests only events related to specific campaign identified by its ID.
     * @param {module:model/ParameterCampaignType} [campaignType] Filters related customers activity for the selected campaign types. Allowed values:  DISCOUNT_COUPONS, REFERRAL_PROGRAM, GIFT_VOUCHERS, PROMOTION, LOYALTY_PROGRAM.
     * @param {module:model/ParameterActivityCategory} [category] Filters activities for actions or effects. Allowed values:  ACTION, EFFECT.
     * @param {module:model/ParameterCustomerEvent} [type] Event name of the customer event.
     * @param {module:api/CustomersApi~listCustomerActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomersActivityListResponseBody}
     */
    listCustomerActivity(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling listCustomerActivity");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'starting_after_id': opts['startingAfterId'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'campaign_id': opts['campaignId'],
        'campaign_type': opts['campaignType'],
        'category': opts['category'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomersActivityListResponseBody;
      return this.apiClient.callApi(
        '/v1/customers/{customerId}/activity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCustomerRedeemables operation.
     * @callback module:api/CustomersApi~listCustomerRedeemablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomersRedeemablesListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Customer's Redeemables
     * Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
     * @param {String} customerId Unique identifier of a customer represented by an internal customer ID or customer source ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items.
     * @param {module:model/ParameterOrderListRedeemables} [order] Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order.
     * @param {String} [startingAfterId] A cursor for pagination. It retrieves the events starting after an event with the given ID.
     * @param {module:model/ParameterFiltersListCustomerRedeemables} [filters] Filters for listing customer redeemables.
     * @param {module:api/CustomersApi~listCustomerRedeemablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomersRedeemablesListResponseBody}
     */
    listCustomerRedeemables(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling listCustomerRedeemables");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'starting_after_id': opts['startingAfterId'],
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomersRedeemablesListResponseBody;
      return this.apiClient.callApi(
        '/v1/customers/{customerId}/redeemables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCustomerSegments operation.
     * @callback module:api/CustomersApi~listCustomerSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomersSegmentsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Customer's Segments
     * Returns the list of segments IDs to which the customer belongs to.   If you pass a customerId which is not stored and recognized by Voucherify as an existing customer in the system, the response will generate a list of segments that the customer would potentialy qualify for if they were to become a customer tracked in the system.
     * @param {String} customerId Unique identifier of a customer represented by an internal customer ID or customer source ID.
     * @param {module:api/CustomersApi~listCustomerSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomersSegmentsListResponseBody}
     */
    listCustomerSegments(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling listCustomerSegments");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomersSegmentsListResponseBody;
      return this.apiClient.callApi(
        '/v1/customers/{customerId}/segments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCustomers operation.
     * @callback module:api/CustomersApi~listCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomersListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Customers
     * Returns a list of customers.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items.
     * @param {Number} [page] Which page of results to return. The lowest value is 1, the highest value is 99.
     * @param {String} [email] Limit the customers to the ones that have this specific email address.
     * @param {String} [city] Limit the customers to the ones that are located in the specified city.
     * @param {String} [name] Filter customers by the name property.
     * @param {String} [segmentId] Filter customers by the segment id.
     * @param {Date} [createdAtBefore] Filter customers by date customer was created.
     * @param {Date} [createdAtAfter] Filter customers by date customer was created.
     * @param {Date} [updatedAtBefore] Filter customers by date customer was updated last time.
     * @param {Date} [updatedAtAfter] Filter customers by date customer was updated last time.
     * @param {module:model/ParameterOrderListCustomers} [order] This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order.
     * @param {Date} [startingAfter] A cursor for pagination. This is a date-time value that defines your place in the list based on created_at property from the customer object. For instance, if you make a list request and receive 100 objects, ending with an object created at 2020-05-24T13:43:09.024Z, your subsequent call can include starting_after 2020-05-24T13:43:09.024Z in order to fetch the next page of the list.  
     * @param {module:api/CustomersApi~listCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomersListResponseBody}
     */
    listCustomers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'email': opts['email'],
        'city': opts['city'],
        'name': opts['name'],
        'segment_id': opts['segmentId'],
        'created_at[before]': opts['createdAtBefore'],
        'created_at[after]': opts['createdAtAfter'],
        'updated_at[before]': opts['updatedAtBefore'],
        'updated_at[after]': opts['updatedAtAfter'],
        'order': opts['order'],
        'starting_after': opts['startingAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomersListResponseBody;
      return this.apiClient.callApi(
        '/v1/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomer operation.
     * @callback module:api/CustomersApi~updateCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomersUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Customer
     * Updates the specified customer by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
     * @param {String} customerId A Voucherify customers id or source_id.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomersUpdateRequestBody} [customersUpdateRequestBody] Specify the parameters to be updated.
     * @param {module:api/CustomersApi~updateCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomersUpdateResponseBody}
     */
    updateCustomer(customerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['customersUpdateRequestBody'];
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomersUpdateResponseBody;
      return this.apiClient.callApi(
        '/v1/customers/{customerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomersInBulk operation.
     * @callback module:api/CustomersApi~updateCustomersInBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomersUpdateInBulkResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Customers in Bulk
     * Updates customers in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the [GET Async Action](/api-reference/async-actions/get-async-action) endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a customer object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/CustomersUpdateInBulkRequestBody>} [customersUpdateInBulkRequestBody] List the customer fields to be updated in each customer object.
     * @param {module:api/CustomersApi~updateCustomersInBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomersUpdateInBulkResponseBody}
     */
    updateCustomersInBulk(opts, callback) {
      opts = opts || {};
      let postBody = opts['customersUpdateInBulkRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomersUpdateInBulkResponseBody;
      return this.apiClient.callApi(
        '/v1/customers/bulk/async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomersMetadataInBulk operation.
     * @callback module:api/CustomersApi~updateCustomersMetadataInBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomersMetadataUpdateInBulkResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Customers' Metadata in Bulk
     * Updates metadata parameters for a list of customers. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the [GET Async Action](/api-reference/async-actions/get-async-action) endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomersMetadataUpdateInBulkRequestBody} [customersMetadataUpdateInBulkRequestBody] List the source_ids of the customers you would like to update with the metadata key/value pairs.
     * @param {module:api/CustomersApi~updateCustomersMetadataInBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomersMetadataUpdateInBulkResponseBody}
     */
    updateCustomersMetadataInBulk(opts, callback) {
      opts = opts || {};
      let postBody = opts['customersMetadataUpdateInBulkRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomersMetadataUpdateInBulkResponseBody;
      return this.apiClient.callApi(
        '/v1/customers/metadata/async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
