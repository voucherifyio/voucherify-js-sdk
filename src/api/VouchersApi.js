/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ParameterCreatedBeforeAfter from '../model/ParameterCreatedBeforeAfter';
import ParameterOrderListTransactions from '../model/ParameterOrderListTransactions';
import ParameterOrderVouchers from '../model/ParameterOrderVouchers';
import ParameterUpdatedBeforeAfter from '../model/ParameterUpdatedBeforeAfter';
import VouchersBalanceUpdateRequestBody from '../model/VouchersBalanceUpdateRequestBody';
import VouchersBalanceUpdateResponseBody from '../model/VouchersBalanceUpdateResponseBody';
import VouchersCreateRequestBody from '../model/VouchersCreateRequestBody';
import VouchersCreateResponseBody from '../model/VouchersCreateResponseBody';
import VouchersCreateWithSpecificCodeRequestBody from '../model/VouchersCreateWithSpecificCodeRequestBody';
import VouchersDisableResponseBody from '../model/VouchersDisableResponseBody';
import VouchersEnableResponseBody from '../model/VouchersEnableResponseBody';
import VouchersGetResponseBody from '../model/VouchersGetResponseBody';
import VouchersImportCreateItemRequestBody from '../model/VouchersImportCreateItemRequestBody';
import VouchersImportCreateResponseBody from '../model/VouchersImportCreateResponseBody';
import VouchersImportCsvCreateResponseBody from '../model/VouchersImportCsvCreateResponseBody';
import VouchersListResponseBody from '../model/VouchersListResponseBody';
import VouchersMetadataUpdateInBulkRequestBody from '../model/VouchersMetadataUpdateInBulkRequestBody';
import VouchersMetadataUpdateInBulkResponseBody from '../model/VouchersMetadataUpdateInBulkResponseBody';
import VouchersTransactionsExportCreateRequestBody from '../model/VouchersTransactionsExportCreateRequestBody';
import VouchersTransactionsExportCreateResponseBody from '../model/VouchersTransactionsExportCreateResponseBody';
import VouchersTransactionsListResponseBody from '../model/VouchersTransactionsListResponseBody';
import VouchersUpdateInBulkItemRequestBody from '../model/VouchersUpdateInBulkItemRequestBody';
import VouchersUpdateInBulkResponseBody from '../model/VouchersUpdateInBulkResponseBody';
import VouchersUpdateRequestBody from '../model/VouchersUpdateRequestBody';
import VouchersUpdateResponseBody from '../model/VouchersUpdateResponseBody';

/**
* Vouchers service.
* @module api/VouchersApi
* @version v2018-08-01
*/
export default class VouchersApi {

    /**
    * Constructs a new VouchersApi. 
    * @alias module:api/VouchersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createVoucher operation.
     * @callback module:api/VouchersApi~createVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Voucher
     * Create a generic (standalone) vouchers. You can choose to create a GIFT_VOUCHER, a DISCOUNT_VOUCHER, or a LOYALTY_CARD. The code path parameter can use all letters of the English alphabet, Arabic numerals and special characters. When you create a new voucher, you can specify a type to create it. Creating a new voucher will create a new generic (standalone) vouchers if no campaign name or campaign_id is provided. However, if an ID or name of a campaign with the type set to STANDALONE is provided, the voucher will be added to such campaign. In the case of the loyalty card, a campaign name or ID is required. ðŸš§ Standalone Vouchers and Campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), generic (standalone) vouchers created through the Voucherify dashboard create a campaign for that voucher. However, vouchers created through the API do not have a campaign attached, so the values for campaign and campaign_id are null. Voucherify developers work on adding an optional feature to create a generic (standalone) vouchers campaign through the API. Follow the [Voucherify Release Notes](https://support.voucherify.io/article/23-whats-new-in-voucherify) for more details about released features.
     * @param {String} code A unique **code** that identifies the voucher.
     * @param {{
        code: String
     
        vouchersCreateWithSpecificCodeRequestBody?: module:model/VouchersCreateWithSpecificCodeRequestBody
     }} opts Parameters
     * @param {module:api/VouchersApi~createVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersCreateResponseBody}
     */
    createVoucher(code, opts, callback) {
      opts = opts || {};
      let postBody = opts['vouchersCreateWithSpecificCodeRequestBody'];
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling createVoucher");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VouchersCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers/{code}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVoucher operation.
     * @callback module:api/VouchersApi~deleteVoucherCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Voucher
     * Deletes a voucher. This operation cannot be undone. Additionally, this operation removes any redemptions on the voucher. If the force parameter is set to false or not set at all, the voucher will be moved to [the bin](/api-reference/bin/list-bin-entries).
     * @param {String} code A unique **code** that identifies the voucher.
     * @param {{
        code: String
     
        force?: Boolean
     }} opts Parameters
     * @param {module:api/VouchersApi~deleteVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVoucher(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling deleteVoucher");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/vouchers/{code}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableVoucher operation.
     * @callback module:api/VouchersApi~disableVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersDisableResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable Voucher
     * There are various times when youll want to manage a vouchers accessibility. This can be done by two API methods for managing the voucher state - *enable* and *disable*.   ___ This method sets the voucher state to **inactive**. The voucher cannot be redeemed.
     * @param {String} code A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u.
     * @param {module:api/VouchersApi~disableVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersDisableResponseBody}
     */
    disableVoucher(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling disableVoucher");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VouchersDisableResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers/{code}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableVoucher operation.
     * @callback module:api/VouchersApi~enableVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersEnableResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable Voucher
     * There are various times when youll want to manage a vouchers accessibility. This can be done by two API methods for managing the voucher state - *enable* and *disable*.   ___ The method sets the voucher state to **active**. The voucher can be redeemed - only if the redemption occurs after the start date and the voucher is not expired.
     * @param {String} code A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u.
     * @param {module:api/VouchersApi~enableVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersEnableResponseBody}
     */
    enableVoucher(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling enableVoucher");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VouchersEnableResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers/{code}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportVoucherTransactions operation.
     * @callback module:api/VouchersApi~exportVoucherTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersTransactionsExportCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Voucher Transactions
     * Export transactions that are associated with credit movements on a gift card or loyalty card.   
     * @param {String} code A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u.
     * @param {{
        code: String
     
        vouchersTransactionsExportCreateRequestBody?: module:model/VouchersTransactionsExportCreateRequestBody
     }} opts Parameters
     * @param {module:api/VouchersApi~exportVoucherTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersTransactionsExportCreateResponseBody}
     */
    exportVoucherTransactions(code, opts, callback) {
      opts = opts || {};
      let postBody = opts['vouchersTransactionsExportCreateRequestBody'];
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling exportVoucherTransactions");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VouchersTransactionsExportCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers/{code}/transactions/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateRandomCode operation.
     * @callback module:api/VouchersApi~generateRandomCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Random Code
     * Create a generic (standalone) vouchers. You can choose to create a GIFT_VOUCHER, a DISCOUNT_VOUCHER, or a LOYALTY_CARD.  When you create a new voucher, you can specify a type to create it. Creating a new voucher will create a new generic (standalone) vouchers if no campaign name or campaign_id is provided. However, if an ID or name of a campaign with the type set to STANDALONE is provided, the voucher will be added to such campaign. In case of the loyalty card, a campaign name is required. You can optionally use the code parameter to define a specific code or the code_config parameter to design rules for Voucherify API to create a random code. If neither of the two parameters are passed, then a random code is generated by the Voucherify API. This method will return an error when trying to create a voucher that already exists. ðŸš§ Standalone Vouchers and Campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), generic (standalone) vouchers created through the Voucherify dashboard create a campaign for that voucher. However, vouchers created through the API do not have a campaign attached, so the values for campaign and campaign_id are null. Voucherify developers work on adding an optional feature to create a generic (standalone) vouchers campaign through the API. Follow the [Voucherify Release Notes](https://support.voucherify.io/article/23-whats-new-in-voucherify) for more details about released features.
     * @param {{
        vouchersCreateRequestBody?: module:model/VouchersCreateRequestBody
     }} opts Parameters
     * @param {module:api/VouchersApi~generateRandomCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersCreateResponseBody}
     */
    generateRandomCode(opts, callback) {
      opts = opts || {};
      let postBody = opts['vouchersCreateRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VouchersCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucher operation.
     * @callback module:api/VouchersApi~getVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Voucher
     * Retrieves the voucher with the given code or unique Voucherify ID. You can either pass the voucher ID which was assigned by Voucherify, e.g., v_7HxHkf4VAkMuc8u4lZs78lyRwhRze5UE, or the code of the voucher as the path parameter value, e.g., 7fjWdr.
     * @param {String} code A unique **code** that identifies the voucher.
     * @param {module:api/VouchersApi~getVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersGetResponseBody}
     */
    getVoucher(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getVoucher");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VouchersGetResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importVouchers operation.
     * @callback module:api/VouchersApi~importVouchersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersImportCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Vouchers
     * Import generic (standalone) vouchers and gift cards into the repository.  ðŸ“˜ Important notes  - **Start and expiration dates** need to be provided in compliance with the ISO 8601 norms. For example, 2020-03-11T09:00:00.000Z.  - Custom code attributes (not supported by-default) need to be added as code **metadata**.  - You **cannot import the same codes** to a single Voucherify Project. Any parameters not provided in the payload will be left blank or null. For both **standalone discount vouchers and gift cards**, you can import the following fields:   - code - category - active - type - start_date - expiration_date - redemption.quantity - additional_info - metadata For **gift cards**, you can also import the following field: - gift.amount For **discount vouchers**, you can import the discount object. The object will slightly vary depending on the type of discount. Each discount type **requires** the type to be defined in the import.   Fields other than the ones listed above wont be imported. Even if provided, they will be silently skipped. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this [API request](/api-reference/async-actions/get-async-action). ðŸš§ Standalone Vouchers and Campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), generic (standalone) vouchers created through the Voucherify dashboard create a campaign for that voucher. However, vouchers imported through the dashboard in the Vouchers section or through the API do not have a campaign attached, so the values for campaign and campaign_id are null.
     * @param {Array.<module:model/VouchersImportCreateItemRequestBody>} vouchersImportCreateItemRequestBody The request body is an array of objects. Each object contains details about a specific voucher. 
     * @param {module:api/VouchersApi~importVouchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersImportCreateResponseBody}
     */
    importVouchers(vouchersImportCreateItemRequestBody, callback) {
      let postBody = vouchersImportCreateItemRequestBody;
      // verify the required parameter 'vouchersImportCreateItemRequestBody' is set
      if (vouchersImportCreateItemRequestBody === undefined || vouchersImportCreateItemRequestBody === null) {
        throw new Error("Missing the required parameter 'vouchersImportCreateItemRequestBody' when calling importVouchers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VouchersImportCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importVouchersUsingCsv operation.
     * @callback module:api/VouchersApi~importVouchersUsingCsvCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersImportCsvCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Vouchers using CSV
     * Import generic (standalone) vouchers into the repository using a CSV file. The CSV file has to include headers in the first line. All properties listed in the file headers that cannot be mapped to standard voucher fields will be added to the metadata object.   You can find an example CSV file [here](https://support.voucherify.io/article/45-import-codes-and-share-them-digitally#coupons). ___  ðŸ“˜ Standard voucher fields mapping  - Go to the [import vouchers](/api-reference/vouchers/import-vouchers) endpoint to see all standard CSV fields description (body params section).  - Supported CSV file headers: Code,Voucher Type,Value,Discount Type,Category,Start Date,Expiration Date,Redemption Limit,Redeemed Quantity, Redeemed Amount,Active,Additional Info,Custom Metadata Property Name - **Start and expiration dates** need to be provided in compliance with the ISO 8601 standard. For example, 2020-03-11T09:00:00.000Z.       - YYYY-MM-DD     - YYYY-MM-DDTHH     - YYYY-MM-DDTHH:mm     - YYYY-MM-DDTHH:mm:ss     - YYYY-MM-DDTHH:mm:ssZ     - YYYY-MM-DDTHH:mm:ssZ     - YYYY-MM-DDTHH:mm:ss.SSSZ  - Custom code attributes (not supported by-default) need to be added as code **metadata**.  - You **cannot import the same codes** to a single Voucherify project.  - You can, however, upload the same codes to update them.  ðŸ“˜ Categories  In the structure representing your data, you can define a category that the voucher belongs to. You can later use the category of a voucher to group and search by specific criteria in the Dashboard and using the [List Vouchers](/api-reference/vouchers/list-vouchers) endpoint. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this [API request](/api-reference/async-actions/get-async-action). You can pass the webhooks_enable true parameter to trigger a webhook sendout for created or updated vouchers. Configure the [respective webhooks](/api-reference/introduction-to-webhooks) in Project settings. For updated webhooks, a webhook is sent even if the voucher hasnt been changed in the CSV file. ðŸš§ Generic (standalone) vouchers and campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), generic (standalone) vouchers created through the Voucherify dashboard create a campaign for that voucher. However, vouchers imported through the dashboard in the Vouchers section or through the API do not have a campaign attached, so the values for campaign and campaign_id are null.
     * @param {{
        file?: File
     
        webhooksEnable?: Boolean
     }} opts Parameters
     * @param {module:api/VouchersApi~importVouchersUsingCsvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersImportCsvCreateResponseBody}
     */
    importVouchersUsingCsv(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'webhooks_enable': opts['webhooksEnable']
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VouchersImportCsvCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers/importCSV', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVoucherTransactions operation.
     * @callback module:api/VouchersApi~listVoucherTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersTransactionsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Voucher Transactions
     * List transactions that are associated with credit movements on a gift card or loyalty card.
     * @param {String} code A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u.
     * @param {{
        code: String
     
        limit?: Number
     
        order?: module:model/ParameterOrderListTransactions
     
        startingAfterId?: String
     }} opts Parameters
     * @param {module:api/VouchersApi~listVoucherTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersTransactionsListResponseBody}
     */
    listVoucherTransactions(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling listVoucherTransactions");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'starting_after_id': opts['startingAfterId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VouchersTransactionsListResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers/{code}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVouchers operation.
     * @callback module:api/VouchersApi~listVouchersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Vouchers
     * Returns a list of vouchers. By default, the vouchers are returned sorted by creation date, with the most recent vouchers appearing first. A maximum of 100 vouchers are returned in the response. When you get a list of vouchers, you can optionally specify query parameters to customize the number of vouchers returned per call using limit, which page of vouchers to return using page, sort the vouchers using the order query parameter and more. This method will return an error when trying to return a limit of more than 100 vouchers. 
     * @param {{
        limit?: Number
     
        page?: Number
     
        category?: String
     
        campaignId?: String
     
        customer?: String
     
        campaign?: String
     
        createdAt?: module:model/ParameterCreatedBeforeAfter
     
        updatedAt?: module:model/ParameterUpdatedBeforeAfter
     
        order?: module:model/ParameterOrderVouchers
     
        code?: String
     
        ids?: Array.<String>
     }} opts Parameters
     * @param {module:api/VouchersApi~listVouchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersListResponseBody}
     */
    listVouchers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'category': opts['category'],
        'campaign_id': opts['campaignId'],
        'customer': opts['customer'],
        'campaign': opts['campaign'],
        'created_at': opts['createdAt'],
        'updated_at': opts['updatedAt'],
        'order': opts['order'],
        'code': opts['code'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VouchersListResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releaseValidationSession operation.
     * @callback module:api/VouchersApi~releaseValidationSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Release Validation Session
     * Manually release a validation session that has been set up for the voucher. This method undoes the actions that are explained in the [Locking validation session](/guides/locking-validation-session) guide.   ðŸ“˜ Release session in the Dashboard  You can also use the [Validations Manager](https://support.voucherify.io/article/16-dashboard-sections#sessions) in the Dashboard to unlock sessions.
     * @param {String} code A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify.
     * @param {String} sessionKey A unique session identifier.
     * @param {module:api/VouchersApi~releaseValidationSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releaseValidationSession(code, sessionKey, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling releaseValidationSession");
      }
      // verify the required parameter 'sessionKey' is set
      if (sessionKey === undefined || sessionKey === null) {
        throw new Error("Missing the required parameter 'sessionKey' when calling releaseValidationSession");
      }

      let pathParams = {
        'code': code,
        'sessionKey': sessionKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/vouchers/{code}/sessions/{sessionKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVoucher operation.
     * @callback module:api/VouchersApi~updateVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Voucher
     * Updates the specified voucher by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. Fields other than the ones listed in the request body wont be modified. Even if provided, they will be silently skipped. If you want to change the amount on a gift card or the number of points on a loyalty card, use the [Adjust voucher balance](/api-reference/vouchers/adjust-voucher-balance) endpoint.
     * @param {String} code A unique **code** that identifies the voucher.
     * @param {module:model/VouchersUpdateRequestBody} vouchersUpdateRequestBody Specify the parameters to be updated.
     * @param {module:api/VouchersApi~updateVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersUpdateResponseBody}
     */
    updateVoucher(code, vouchersUpdateRequestBody, callback) {
      let postBody = vouchersUpdateRequestBody;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling updateVoucher");
      }
      // verify the required parameter 'vouchersUpdateRequestBody' is set
      if (vouchersUpdateRequestBody === undefined || vouchersUpdateRequestBody === null) {
        throw new Error("Missing the required parameter 'vouchersUpdateRequestBody' when calling updateVoucher");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VouchersUpdateResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers/{code}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVoucherBalance operation.
     * @callback module:api/VouchersApi~updateVoucherBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersBalanceUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adjust Voucher Balance
     * Add balance to an existing gift card or loyalty card. For loyalty cards, it must be assigned to a holder.
     * @param {String} code A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u.
     * @param {module:model/VouchersBalanceUpdateRequestBody} vouchersBalanceUpdateRequestBody Provide the amount to be added to/subtracted from the voucher.
     * @param {module:api/VouchersApi~updateVoucherBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersBalanceUpdateResponseBody}
     */
    updateVoucherBalance(code, vouchersBalanceUpdateRequestBody, callback) {
      let postBody = vouchersBalanceUpdateRequestBody;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling updateVoucherBalance");
      }
      // verify the required parameter 'vouchersBalanceUpdateRequestBody' is set
      if (vouchersBalanceUpdateRequestBody === undefined || vouchersBalanceUpdateRequestBody === null) {
        throw new Error("Missing the required parameter 'vouchersBalanceUpdateRequestBody' when calling updateVoucherBalance");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VouchersBalanceUpdateResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers/{code}/balance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVouchersInBulk operation.
     * @callback module:api/VouchersApi~updateVouchersInBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersUpdateInBulkResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Vouchers in Bulk
     * Updates specific metadata parameters for each code, respectively, in one asynchronous operation. The request can include up to **10 MB** of data. Upserts are not supported.  ðŸš§ Currently, only **metadata** updates are supported. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the [GET Async Action](/api-reference/async-actions/get-async-action) endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
     * @param {Array.<module:model/VouchersUpdateInBulkItemRequestBody>} vouchersUpdateInBulkItemRequestBody List the codes to be updated with the metadata key/value pairs for that code.
     * @param {module:api/VouchersApi~updateVouchersInBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersUpdateInBulkResponseBody}
     */
    updateVouchersInBulk(vouchersUpdateInBulkItemRequestBody, callback) {
      let postBody = vouchersUpdateInBulkItemRequestBody;
      // verify the required parameter 'vouchersUpdateInBulkItemRequestBody' is set
      if (vouchersUpdateInBulkItemRequestBody === undefined || vouchersUpdateInBulkItemRequestBody === null) {
        throw new Error("Missing the required parameter 'vouchersUpdateInBulkItemRequestBody' when calling updateVouchersInBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VouchersUpdateInBulkResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers/bulk/async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVouchersMetadataInBulk operation.
     * @callback module:api/VouchersApi~updateVouchersMetadataInBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VouchersMetadataUpdateInBulkResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Vouchers' Metadata in Bulk
     * Updates metadata parameters for a list of codes. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. Upserts are not supported. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the [GET Async Action](/api-reference/async-actions/get-async-action) endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
     * @param {module:model/VouchersMetadataUpdateInBulkRequestBody} vouchersMetadataUpdateInBulkRequestBody List the codes of the vouchers you would like to update with the metadata key/value pairs.
     * @param {module:api/VouchersApi~updateVouchersMetadataInBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VouchersMetadataUpdateInBulkResponseBody}
     */
    updateVouchersMetadataInBulk(vouchersMetadataUpdateInBulkRequestBody, callback) {
      let postBody = vouchersMetadataUpdateInBulkRequestBody;
      // verify the required parameter 'vouchersMetadataUpdateInBulkRequestBody' is set
      if (vouchersMetadataUpdateInBulkRequestBody === undefined || vouchersMetadataUpdateInBulkRequestBody === null) {
        throw new Error("Missing the required parameter 'vouchersMetadataUpdateInBulkRequestBody' when calling updateVouchersMetadataInBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VouchersMetadataUpdateInBulkResponseBody;
      return this.apiClient.callApi(
        '/v1/vouchers/metadata/async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
