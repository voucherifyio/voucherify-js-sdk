/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ParameterFiltersListReferralsRedeemableHolders from '../model/ParameterFiltersListReferralsRedeemableHolders';
import ParameterOrderListRedeemables from '../model/ParameterOrderListRedeemables';
import ReferralsMembersHoldersCreateInBulkRequestBody from '../model/ReferralsMembersHoldersCreateInBulkRequestBody';
import ReferralsMembersHoldersCreateInBulkResponseBody from '../model/ReferralsMembersHoldersCreateInBulkResponseBody';
import ReferralsMembersHoldersListResponseBody from '../model/ReferralsMembersHoldersListResponseBody';

/**
* Referrals service.
* @module api/ReferralsApi
* @version v2018-08-01
*/
export default class ReferralsApi {

    /**
    * Constructs a new ReferralsApi. 
    * @alias module:api/ReferralsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the referralsAddHolders operation.
     * @callback module:api/ReferralsApi~referralsAddHoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReferralsMembersHoldersCreateInBulkResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Referral Code Holders
     * Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referrer, use the [Create Publication](/api-reference/publications/create-publication) endpoint.  üìò Alternative endpoint This endpoint is an alternative to the [Add Referral Code Holders endpoint](/api-reference/referrals/add-referral-code-holders-with-campaign-id). The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
     * @param {String} memberId Unique referral code or its identifier.
     * @param {{
        referralsMembersHoldersCreateInBulkRequestBody?: module:model/ReferralsMembersHoldersCreateInBulkRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/ReferralsApi~referralsAddHoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReferralsMembersHoldersCreateInBulkResponseBody}
     */
    referralsAddHolders(memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['referralsMembersHoldersCreateInBulkRequestBody'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling referralsAddHolders");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReferralsMembersHoldersCreateInBulkResponseBody;
      return this.apiClient.callApi(
        '/v1/referrals/members/{memberId}/holders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the referralsAddHolders1 operation.
     * @callback module:api/ReferralsApi~referralsAddHolders1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReferralsMembersHoldersCreateInBulkResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Referral Code Holders with Campaign ID
     * Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referrer, use the [Create Publication](/api-reference/publications/create-publication) endpoint.
     * @param {String} campaignId Unique identifier of a referral program campaign.
     * @param {String} memberId Unique referral code or its identifier.
     * @param {{
        referralsMembersHoldersCreateInBulkRequestBody?: module:model/ReferralsMembersHoldersCreateInBulkRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/ReferralsApi~referralsAddHolders1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReferralsMembersHoldersCreateInBulkResponseBody}
     */
    referralsAddHolders1(campaignId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['referralsMembersHoldersCreateInBulkRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling referralsAddHolders1");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling referralsAddHolders1");
      }

      let pathParams = {
        'campaignId': campaignId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReferralsMembersHoldersCreateInBulkResponseBody;
      return this.apiClient.callApi(
        '/v1/referrals/{campaignId}/members/{memberId}/holders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the referralsCodeHolders operation.
     * @callback module:api/ReferralsApi~referralsCodeHoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReferralsMembersHoldersListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Referral Code Holders with campaign ID
     * Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
     * @param {String} campaignId Unique identifier of a referral program campaign.
     * @param {String} memberId Unique referral code or its identifier.
     * @param {{
        limit?: Number,
        order?: module:model/ParameterOrderListRedeemables,
        startingAfterId?: String,
        filters?: module:model/ParameterFiltersListReferralsRedeemableHolders,
     }} [opts] Optional parameters
     * @param {module:api/ReferralsApi~referralsCodeHoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReferralsMembersHoldersListResponseBody}
     */
    referralsCodeHolders(campaignId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling referralsCodeHolders");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling referralsCodeHolders");
      }

      let pathParams = {
        'campaignId': campaignId,
        'memberId': memberId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'starting_after_id': opts['startingAfterId'],
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReferralsMembersHoldersListResponseBody;
      return this.apiClient.callApi(
        '/v1/referrals/{campaignId}/members/{memberId}/holders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the referralsCodeHolders1 operation.
     * @callback module:api/ReferralsApi~referralsCodeHolders1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReferralsMembersHoldersListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Referral Code Holders
     * Retrieves the holders of the referral code from a referral campaign. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)  üìò Alternative endpoint This endpoint is an alternative to the [List Member Holders endpoint](/api-reference/referrals/list-referral-code-holders-with-campaign-id). The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
     * @param {String} memberId Unique referral code or its identifier.
     * @param {{
        limit?: Number,
        order?: module:model/ParameterOrderListRedeemables,
        startingAfterId?: String,
        filters?: module:model/ParameterFiltersListReferralsRedeemableHolders,
     }} [opts] Optional parameters
     * @param {module:api/ReferralsApi~referralsCodeHolders1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReferralsMembersHoldersListResponseBody}
     */
    referralsCodeHolders1(memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling referralsCodeHolders1");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'starting_after_id': opts['startingAfterId'],
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReferralsMembersHoldersListResponseBody;
      return this.apiClient.callApi(
        '/v1/referrals/members/{memberId}/holders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the referralsRemoveHolder operation.
     * @callback module:api/ReferralsApi~referralsRemoveHolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Referral Card Holder
     * Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üìò Alternative endpoint This endpoint is an alternative to the [Remove Referral Card Holder endpoint](/api-reference/referrals/remove-referral-card-holder-with-campaign-id). The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
     * @param {String} memberId Unique referral code or its identifier.
     * @param {String} holderId Unique identifier of a redeemable holder.
     * @param {module:api/ReferralsApi~referralsRemoveHolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    referralsRemoveHolder(memberId, holderId, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling referralsRemoveHolder");
      }
      // verify the required parameter 'holderId' is set
      if (holderId === undefined || holderId === null) {
        throw new Error("Missing the required parameter 'holderId' when calling referralsRemoveHolder");
      }

      let pathParams = {
        'memberId': memberId,
        'holderId': holderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/referrals/members/{memberId}/holders/{holderId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the referralsRemoveHolder1 operation.
     * @callback module:api/ReferralsApi~referralsRemoveHolder1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Referral Card Holder with campaign ID
     * Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)
     * @param {String} campaignId Unique identifier of a referral program campaign.
     * @param {String} memberId Unique referral code or its identifier.
     * @param {String} holderId Unique identifier of a redeemable holder.
     * @param {module:api/ReferralsApi~referralsRemoveHolder1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    referralsRemoveHolder1(campaignId, memberId, holderId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling referralsRemoveHolder1");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling referralsRemoveHolder1");
      }
      // verify the required parameter 'holderId' is set
      if (holderId === undefined || holderId === null) {
        throw new Error("Missing the required parameter 'holderId' when calling referralsRemoveHolder1");
      }

      let pathParams = {
        'campaignId': campaignId,
        'memberId': memberId,
        'holderId': holderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/referrals/{campaignId}/members/{memberId}/holders/{holderId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
