/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ManagementProjectsBrandingCreateRequestBody from '../model/ManagementProjectsBrandingCreateRequestBody';
import ManagementProjectsBrandingCreateResponseBody from '../model/ManagementProjectsBrandingCreateResponseBody';
import ManagementProjectsBrandingGetResponseBody from '../model/ManagementProjectsBrandingGetResponseBody';
import ManagementProjectsBrandingListResponseBody from '../model/ManagementProjectsBrandingListResponseBody';
import ManagementProjectsBrandingUpdateRequestBody from '../model/ManagementProjectsBrandingUpdateRequestBody';
import ManagementProjectsBrandingUpdateResponseBody from '../model/ManagementProjectsBrandingUpdateResponseBody';
import ManagementProjectsCreateRequestBody from '../model/ManagementProjectsCreateRequestBody';
import ManagementProjectsCreateResponseBody from '../model/ManagementProjectsCreateResponseBody';
import ManagementProjectsCustomEventSchemasCreateRequestBody from '../model/ManagementProjectsCustomEventSchemasCreateRequestBody';
import ManagementProjectsCustomEventSchemasCreateResponseBody from '../model/ManagementProjectsCustomEventSchemasCreateResponseBody';
import ManagementProjectsCustomEventSchemasGetResponseBody from '../model/ManagementProjectsCustomEventSchemasGetResponseBody';
import ManagementProjectsCustomEventSchemasListResponseBody from '../model/ManagementProjectsCustomEventSchemasListResponseBody';
import ManagementProjectsCustomEventSchemasUpdateRequestBody from '../model/ManagementProjectsCustomEventSchemasUpdateRequestBody';
import ManagementProjectsCustomEventSchemasUpdateResponseBody from '../model/ManagementProjectsCustomEventSchemasUpdateResponseBody';
import ManagementProjectsGetResponseBody from '../model/ManagementProjectsGetResponseBody';
import ManagementProjectsListResponseBody from '../model/ManagementProjectsListResponseBody';
import ManagementProjectsMetadataSchemasCreateRequestBody from '../model/ManagementProjectsMetadataSchemasCreateRequestBody';
import ManagementProjectsMetadataSchemasCreateResponseBody from '../model/ManagementProjectsMetadataSchemasCreateResponseBody';
import ManagementProjectsMetadataSchemasGetResponseBody from '../model/ManagementProjectsMetadataSchemasGetResponseBody';
import ManagementProjectsMetadataSchemasListResponseBody from '../model/ManagementProjectsMetadataSchemasListResponseBody';
import ManagementProjectsMetadataSchemasUpdateRequestBody from '../model/ManagementProjectsMetadataSchemasUpdateRequestBody';
import ManagementProjectsMetadataSchemasUpdateResponseBody from '../model/ManagementProjectsMetadataSchemasUpdateResponseBody';
import ManagementProjectsStackingRulesCreateRequestBody from '../model/ManagementProjectsStackingRulesCreateRequestBody';
import ManagementProjectsStackingRulesCreateResponseBody from '../model/ManagementProjectsStackingRulesCreateResponseBody';
import ManagementProjectsStackingRulesGetResponseBody from '../model/ManagementProjectsStackingRulesGetResponseBody';
import ManagementProjectsStackingRulesListResponseBody from '../model/ManagementProjectsStackingRulesListResponseBody';
import ManagementProjectsStackingRulesUpdateRequestBody from '../model/ManagementProjectsStackingRulesUpdateRequestBody';
import ManagementProjectsStackingRulesUpdateResponseBody from '../model/ManagementProjectsStackingRulesUpdateResponseBody';
import ManagementProjectsTemplatesCampaignsCopyCreateRequestBody from '../model/ManagementProjectsTemplatesCampaignsCopyCreateRequestBody';
import ManagementProjectsTemplatesCampaignsCopyCreateResponseBody from '../model/ManagementProjectsTemplatesCampaignsCopyCreateResponseBody';
import ManagementProjectsTemplatesCampaignsListResponseBody from '../model/ManagementProjectsTemplatesCampaignsListResponseBody';
import ManagementProjectsUpdateRequestBody from '../model/ManagementProjectsUpdateRequestBody';
import ManagementProjectsUpdateResponseBody from '../model/ManagementProjectsUpdateResponseBody';
import ManagementProjectsUsersAssignRequestBody from '../model/ManagementProjectsUsersAssignRequestBody';
import ManagementProjectsUsersAssignResponseBody from '../model/ManagementProjectsUsersAssignResponseBody';
import ManagementProjectsUsersGetUserResponseBody from '../model/ManagementProjectsUsersGetUserResponseBody';
import ManagementProjectsUsersInviteCreateRequestBody from '../model/ManagementProjectsUsersInviteCreateRequestBody';
import ManagementProjectsUsersListResponseBody from '../model/ManagementProjectsUsersListResponseBody';
import ManagementProjectsUsersUpdateRoleRequestBody from '../model/ManagementProjectsUsersUpdateRoleRequestBody';
import ManagementProjectsUsersUpdateRoleResponseBody from '../model/ManagementProjectsUsersUpdateRoleResponseBody';
import ManagementProjectsWebhooksCreateRequestBody from '../model/ManagementProjectsWebhooksCreateRequestBody';
import ManagementProjectsWebhooksCreateResponseBody from '../model/ManagementProjectsWebhooksCreateResponseBody';
import ManagementProjectsWebhooksGetResponseBody from '../model/ManagementProjectsWebhooksGetResponseBody';
import ManagementProjectsWebhooksListResponseBody from '../model/ManagementProjectsWebhooksListResponseBody';
import ManagementProjectsWebhooksUpdateRequestBody from '../model/ManagementProjectsWebhooksUpdateRequestBody';
import ManagementProjectsWebhooksUpdateResponseBody from '../model/ManagementProjectsWebhooksUpdateResponseBody';
import ParameterFiltersListTemplates from '../model/ParameterFiltersListTemplates';
import ParameterTemplatesList from '../model/ParameterTemplatesList';

/**
* Management service.
* @module api/ManagementApi
* @version v2018-08-01
*/
export default class ManagementApi {

    /**
    * Constructs a new ManagementApi. 
    * @alias module:api/ManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignUser operation.
     * @callback module:api/ManagementApi~assignUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsUsersAssignResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign User
     * Assigns a user to a given project. The user must be an existing user in Voucherify.  🚧 Correct Use of Data To avoid errors, use the role key with either id or login keys.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {{
        projectId: String
     
        managementProjectsUsersAssignRequestBody?: module:model/ManagementProjectsUsersAssignRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~assignUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsUsersAssignResponseBody}
     */
    assignUser(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsUsersAssignRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling assignUser");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsUsersAssignResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBrand operation.
     * @callback module:api/ManagementApi~createBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsBrandingCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Brand
     * Creates a new brand configuration. You can have only one brand configured for a project.  📘 White Labelling  The white labelling settings which can be found in Project Settings > Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {{
        projectId: String
     
        managementProjectsBrandingCreateRequestBody?: module:model/ManagementProjectsBrandingCreateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~createBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsBrandingCreateResponseBody}
     */
    createBrand(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsBrandingCreateRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createBrand");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsBrandingCreateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/branding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCustomEventSchema operation.
     * @callback module:api/ManagementApi~createCustomEventSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsCustomEventSchemasCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Custom Event Schema
     * Creates a custom event schema. The properties object is required, but it can be empty, however. This object is for optional custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the [Track Custom Event](/api-reference/events/track-custom-event) endpoint and the [Custom Event Object](/api-reference/events/event-object).
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {{
        projectId: String
     
        managementProjectsCustomEventSchemasCreateRequestBody?: module:model/ManagementProjectsCustomEventSchemasCreateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~createCustomEventSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsCustomEventSchemasCreateResponseBody}
     */
    createCustomEventSchema(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsCustomEventSchemasCreateRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createCustomEventSchema");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsCustomEventSchemasCreateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/custom-event-schemas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMetadataSchema operation.
     * @callback module:api/ManagementApi~createMetadataSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsMetadataSchemasCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Metadata Schema
     * Creates a new metadata (custom attribute) schema for a given resource. The schema consists of a set of key-value pairs to customize Voucherify resources.  You can nest your object within a standard metadata schema, e.g. within a campaign or customer schema. However, your nested object cant include another nested object. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward Use this endpoint to define a metadata schema of a given resource for the first time. Once you configure a metadata schema for a given related_object, use the PUT [Update metadata schema](/api-reference/management/update-metadata-schema) endpoint to either update or add new metadata key-value pairs. For example, use this endpoint to define a metadata schema for related_object: campaign for the first time. If you want define a new metadata property for campaign, use the [PUT Update metadata schema](/api-reference/management/update-metadata-schema) endpoint.  📘 Metadata Documentation  Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](/guides/metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {{
        projectId: String
     
        managementProjectsMetadataSchemasCreateRequestBody?: module:model/ManagementProjectsMetadataSchemasCreateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~createMetadataSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsMetadataSchemasCreateResponseBody}
     */
    createMetadataSchema(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsMetadataSchemasCreateRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createMetadataSchema");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsMetadataSchemasCreateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/metadata-schemas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/ManagementApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Project
     * Creates a new project. You can add users, specify the cluster, timezone, currency, and other details. All owners are added to the project by default.
     * @param {{
        managementProjectsCreateRequestBody?: module:model/ManagementProjectsCreateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsCreateResponseBody}
     */
    createProject(opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsCreateRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsCreateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStackingRules operation.
     * @callback module:api/ManagementApi~createStackingRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsStackingRulesCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Stacking Rules
     * Overwrites the default stacking rules. If new stacking rules have been created for the project earlier (e.g. in the user interface), it returns an error. Use [Update stacking rules](/api-reference/management/update-stacking-rules) endpoint to change the rules.  📘 Stacking rules documentation  Read [the Stacking rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {{
        projectId: String
     
        managementProjectsStackingRulesCreateRequestBody?: module:model/ManagementProjectsStackingRulesCreateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~createStackingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsStackingRulesCreateResponseBody}
     */
    createStackingRules(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsStackingRulesCreateRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createStackingRules");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsStackingRulesCreateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/stacking-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWebhook operation.
     * @callback module:api/ManagementApi~createWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsWebhooksCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Webhook
     * Creates a new webhook configuration.  📘 Webhook Documentation  Read [Webhooks v2024-01-01](/api-reference/introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {{
        projectId: String
     
        managementProjectsWebhooksCreateRequestBody?: module:model/ManagementProjectsWebhooksCreateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~createWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsWebhooksCreateResponseBody}
     */
    createWebhook(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsWebhooksCreateRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createWebhook");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsWebhooksCreateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBrand operation.
     * @callback module:api/ManagementApi~deleteBrandCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Brand
     * Deletes permanently a brand configuration.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} brandingId Provide the unique identifier of the brand configuration.
     * @param {module:api/ManagementApi~deleteBrandCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBrand(projectId, brandingId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteBrand");
      }
      // verify the required parameter 'brandingId' is set
      if (brandingId === undefined || brandingId === null) {
        throw new Error("Missing the required parameter 'brandingId' when calling deleteBrand");
      }

      let pathParams = {
        'projectId': projectId,
        'brandingId': brandingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/branding/{brandingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomEventSchema operation.
     * @callback module:api/ManagementApi~deleteCustomEventSchemaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Custom Event Schema
     * Deletes permanently the custom event schema with its custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the [Track Custom Event](/api-reference/events/track-custom-event) endpoint and the [Custom Event Object](/api-reference/events/event-object).
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} customEventSchemaId Provide the unique identifier of the custom event schema.
     * @param {module:api/ManagementApi~deleteCustomEventSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomEventSchema(projectId, customEventSchemaId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteCustomEventSchema");
      }
      // verify the required parameter 'customEventSchemaId' is set
      if (customEventSchemaId === undefined || customEventSchemaId === null) {
        throw new Error("Missing the required parameter 'customEventSchemaId' when calling deleteCustomEventSchema");
      }

      let pathParams = {
        'projectId': projectId,
        'customEventSchemaId': customEventSchemaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMetadataSchema operation.
     * @callback module:api/ManagementApi~deleteMetadataSchemaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Metadata Schema
     * Deletes permanently the metadata schema. In standard metadata schemas, this endpoint removes permanently all definitions. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward If you want to delete only one definition, use the [Update Metadata Schema](/api-reference/management/update-metadata-schema) endpoint. In the request, provide the deleted: true pair in the definition object. This definition will be moved to Removed definitions. If you want to create a new standard metadata schema, use the [Create Metadata Schema](/api-reference/management/create-metadata-schema) endpoint.  🚧 Metadata Purging This endpoint deletes permanently the metadata schemas only. However, it does not purge the metadata from associated entities, so the metadata added to those entities will remain. If you want to purge metadata from the entities: 1. Remove all the definitions you want to purge. You can do this either in Voucherify Project Settings > Metadata Schema tab or with the [Update Metadata Schema](/api-reference/management/update-metadata-schema) endpoint. 2. In Voucherify Project Settings > Metadata Schema tab, go to the relevant metadata schema. 3. In Removed definitions, click the bin button next to the definitions whose metadata you want to purge from entities. Note: - This is an asynchronous action. You will be notified when it has been completed. - You cannot purge metadata for the Redemption and Publication schemas. 4. Use the Delete Metadata Schema request to delete the metadata schema from Voucherify.  📘 Metadata Documentation  Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](/guides/metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} metadataSchemaId Provide the unique identifier of the metadata schema.
     * @param {module:api/ManagementApi~deleteMetadataSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMetadataSchema(projectId, metadataSchemaId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteMetadataSchema");
      }
      // verify the required parameter 'metadataSchemaId' is set
      if (metadataSchemaId === undefined || metadataSchemaId === null) {
        throw new Error("Missing the required parameter 'metadataSchemaId' when calling deleteMetadataSchema");
      }

      let pathParams = {
        'projectId': projectId,
        'metadataSchemaId': metadataSchemaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ManagementApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Project
     * Deletes an existing project. The users currently using the deleted project will be automatically logged out.  🚧 Sandbox Project The sandbox project cannot be deleted.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {module:api/ManagementApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProject(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStackingRules operation.
     * @callback module:api/ManagementApi~deleteStackingRulesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Stacking Rules
     * Deletes permanently the current settings for the stacking rules. The stacking rules are restored to default values.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} stackingRulesId Provide the unique identifier of the stacking rules.
     * @param {module:api/ManagementApi~deleteStackingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStackingRules(projectId, stackingRulesId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteStackingRules");
      }
      // verify the required parameter 'stackingRulesId' is set
      if (stackingRulesId === undefined || stackingRulesId === null) {
        throw new Error("Missing the required parameter 'stackingRulesId' when calling deleteStackingRules");
      }

      let pathParams = {
        'projectId': projectId,
        'stackingRulesId': stackingRulesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebhook operation.
     * @callback module:api/ManagementApi~deleteWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Webhook
     * Deletes a webhook configuration.  📘 Webhook Documentation  Read [Introduction to webhooks](/api-reference/introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} webhookId Provide the unique identifier of the webhook configuration.
     * @param {module:api/ManagementApi~deleteWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebhook(projectId, webhookId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteWebhook");
      }
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling deleteWebhook");
      }

      let pathParams = {
        'projectId': projectId,
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/webhooks/{webhookId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrand operation.
     * @callback module:api/ManagementApi~getBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsBrandingGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Brand
     * Retrieves a brand configuration.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} brandingId Provide the unique identifier of the brand configuration.
     * @param {module:api/ManagementApi~getBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsBrandingGetResponseBody}
     */
    getBrand(projectId, brandingId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getBrand");
      }
      // verify the required parameter 'brandingId' is set
      if (brandingId === undefined || brandingId === null) {
        throw new Error("Missing the required parameter 'brandingId' when calling getBrand");
      }

      let pathParams = {
        'projectId': projectId,
        'brandingId': brandingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsBrandingGetResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/branding/{brandingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomEventSchema operation.
     * @callback module:api/ManagementApi~getCustomEventSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsCustomEventSchemasGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Custom Event Schema
     * Retrieves a custom event schema.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the [Track Custom Event](/api-reference/events/track-custom-event) endpoint and the [Custom Event Object](/api-reference/events/event-object).
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} customEventSchemaId Provide the unique identifier of the custom event schema.
     * @param {module:api/ManagementApi~getCustomEventSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsCustomEventSchemasGetResponseBody}
     */
    getCustomEventSchema(projectId, customEventSchemaId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getCustomEventSchema");
      }
      // verify the required parameter 'customEventSchemaId' is set
      if (customEventSchemaId === undefined || customEventSchemaId === null) {
        throw new Error("Missing the required parameter 'customEventSchemaId' when calling getCustomEventSchema");
      }

      let pathParams = {
        'projectId': projectId,
        'customEventSchemaId': customEventSchemaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsCustomEventSchemasGetResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetadataSchema1 operation.
     * @callback module:api/ManagementApi~getMetadataSchema1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsMetadataSchemasGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Metadata Schema
     * Retrieves a metadata schema.  📘 Metadata Documentation  Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](/guides/metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} metadataSchemaId Provide the unique identifier of the metadata schema.
     * @param {module:api/ManagementApi~getMetadataSchema1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsMetadataSchemasGetResponseBody}
     */
    getMetadataSchema1(projectId, metadataSchemaId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getMetadataSchema1");
      }
      // verify the required parameter 'metadataSchemaId' is set
      if (metadataSchemaId === undefined || metadataSchemaId === null) {
        throw new Error("Missing the required parameter 'metadataSchemaId' when calling getMetadataSchema1");
      }

      let pathParams = {
        'projectId': projectId,
        'metadataSchemaId': metadataSchemaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsMetadataSchemasGetResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/ManagementApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project
     * Retrieves an existing project.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {module:api/ManagementApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsGetResponseBody}
     */
    getProject(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsGetResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStackingRules operation.
     * @callback module:api/ManagementApi~getStackingRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsStackingRulesGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Stacking Rules
     * Retrieves the stacking rules for the project.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} stackingRulesId Provide the unique identifier of the stacking rules.
     * @param {module:api/ManagementApi~getStackingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsStackingRulesGetResponseBody}
     */
    getStackingRules(projectId, stackingRulesId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getStackingRules");
      }
      // verify the required parameter 'stackingRulesId' is set
      if (stackingRulesId === undefined || stackingRulesId === null) {
        throw new Error("Missing the required parameter 'stackingRulesId' when calling getStackingRules");
      }

      let pathParams = {
        'projectId': projectId,
        'stackingRulesId': stackingRulesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsStackingRulesGetResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/ManagementApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsUsersGetUserResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User
     * Retrieves the project users details.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} userId Provide the unique identifier of the user. Alternatively, provide the users login.
     * @param {module:api/ManagementApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsUsersGetUserResponseBody}
     */
    getUser(projectId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUser");
      }

      let pathParams = {
        'projectId': projectId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsUsersGetUserResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebhook operation.
     * @callback module:api/ManagementApi~getWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsWebhooksGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Webhook
     * Retrieves a webhook configuration.  📘 Webhook Documentation  Read [Introduction to webhooks](/api-reference/introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} webhookId Provide the unique identifier of the webhook configuration.
     * @param {module:api/ManagementApi~getWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsWebhooksGetResponseBody}
     */
    getWebhook(projectId, webhookId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getWebhook");
      }
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling getWebhook");
      }

      let pathParams = {
        'projectId': projectId,
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsWebhooksGetResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/webhooks/{webhookId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inviteUser operation.
     * @callback module:api/ManagementApi~inviteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite a New User
     * Sends an invitation to an email address that has not been used yet as a Voucherify user login. You can specify the projects to which the invited user will be assigned and define their roles.
     * @param {{
        managementProjectsUsersInviteCreateRequestBody?: module:model/ManagementProjectsUsersInviteCreateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~inviteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    inviteUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsUsersInviteCreateRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/management/v1/projects/users/invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBrands operation.
     * @callback module:api/ManagementApi~listBrandsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsBrandingListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Brands
     * Lists all brand configurations. Because a project can have only one brand, it always returns a list with one item. This endpoint can be used to retrieve the brand configuration created with the Voucherify Dashboard and the ID.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {module:api/ManagementApi~listBrandsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsBrandingListResponseBody}
     */
    listBrands(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listBrands");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsBrandingListResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/branding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCustomEventSchemas operation.
     * @callback module:api/ManagementApi~listCustomEventSchemasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsCustomEventSchemasListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Custom Event Schemas
     * Lists all custom event schemas available in the project.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the [Track Custom Event](/api-reference/events/track-custom-event) endpoint and the [Custom Event Object](/api-reference/events/event-object).
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {module:api/ManagementApi~listCustomEventSchemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsCustomEventSchemasListResponseBody}
     */
    listCustomEventSchemas(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listCustomEventSchemas");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsCustomEventSchemasListResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/custom-event-schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMetadataSchemas1 operation.
     * @callback module:api/ManagementApi~listMetadataSchemas1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsMetadataSchemasListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Metadata Schemas
     * Lists all metadata schemas available in the project.  📘 Metadata Documentation  Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](/guides/metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {module:api/ManagementApi~listMetadataSchemas1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsMetadataSchemasListResponseBody}
     */
    listMetadataSchemas1(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listMetadataSchemas1");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsMetadataSchemasListResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/metadata-schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjects operation.
     * @callback module:api/ManagementApi~listProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Projects
     * Lists all projects for the organization. The endpoint does not require any query parameters.
     * @param {module:api/ManagementApi~listProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsListResponseBody}
     */
    listProjects(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsListResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStackingRules operation.
     * @callback module:api/ManagementApi~listStackingRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsStackingRulesListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Stacking Rules
     * Lists all stacking rules. Returns always a list with one item. This endpoint can be used to retrieve the default stacking rules. The default stacking rules do not have an ID that could be used with the [Get Stacking Rules](/api-reference/management/get-stacking-rules) or [Update Stacking Rules](/api-reference/management/update-stacking-rules) endpoints.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {module:api/ManagementApi~listStackingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsStackingRulesListResponseBody}
     */
    listStackingRules(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listStackingRules");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsStackingRulesListResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/stacking-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/ManagementApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsUsersListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Users
     * Lists all users assigned to the project.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {module:api/ManagementApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsUsersListResponseBody}
     */
    listUsers(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listUsers");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsUsersListResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWebhooks operation.
     * @callback module:api/ManagementApi~listWebhooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsWebhooksListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Webhooks
     * Lists all webhook configurations for the project.  📘 Webhook Documentation  Read [Introduction to webhooks](/api-reference/introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {module:api/ManagementApi~listWebhooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsWebhooksListResponseBody}
     */
    listWebhooks(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listWebhooks");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsWebhooksListResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementCopyCampaignTemplate operation.
     * @callback module:api/ManagementApi~managementCopyCampaignTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsTemplatesCampaignsCopyCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy Campaign Template to a Project
     * Copies a campaign template to another project. The resources, like validation rules or products, will not be copied to the destination project yet. When the template is used to create a new campaign or add a new promotion tier, the resources will be created in the destination project.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} campaignTemplateId Provide the unique identifier of the campaign template.
     * @param {{
        projectId: String
     
        campaignTemplateId: String
     
        managementProjectsTemplatesCampaignsCopyCreateRequestBody?: module:model/ManagementProjectsTemplatesCampaignsCopyCreateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~managementCopyCampaignTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsTemplatesCampaignsCopyCreateResponseBody}
     */
    managementCopyCampaignTemplate(projectId, campaignTemplateId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsTemplatesCampaignsCopyCreateRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling managementCopyCampaignTemplate");
      }
      // verify the required parameter 'campaignTemplateId' is set
      if (campaignTemplateId === undefined || campaignTemplateId === null) {
        throw new Error("Missing the required parameter 'campaignTemplateId' when calling managementCopyCampaignTemplate");
      }

      let pathParams = {
        'projectId': projectId,
        'campaignTemplateId': campaignTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsTemplatesCampaignsCopyCreateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/templates/campaigns/{campaignTemplateId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementListCampaignTemplates operation.
     * @callback module:api/ManagementApi~managementListCampaignTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsTemplatesCampaignsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Campaign Templates
     * Lists all campaign templates available in the project.  👍 List Campaign Templates  This endpoint works in the same way as the [List Campaign Templates endpoint](/api-reference/templates/list-campaign-templates).  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {{
        projectId: String
     
        limit?: Number
     
        startingAfterId?: String
     
        order?: module:model/ParameterTemplatesList
     
        includeTotal?: Boolean
     
        filters?: module:model/ParameterFiltersListTemplates
     }} opts Parameters
     * @param {module:api/ManagementApi~managementListCampaignTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsTemplatesCampaignsListResponseBody}
     */
    managementListCampaignTemplates(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling managementListCampaignTemplates");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'limit': opts['limit'],
        'starting_after_id': opts['startingAfterId'],
        'order': opts['order'],
        'include_total': opts['includeTotal'],
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsTemplatesCampaignsListResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/templates/campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unassignUser operation.
     * @callback module:api/ManagementApi~unassignUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unassign User
     * Unassigns the user from the project. If the user is currently logged in, they are automatically logged out. If the user is assigned to only one project, they cannot be unassigned from that project.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} userId Provide the unique identifier of the user. Alternatively, provide the users login.
     * @param {module:api/ManagementApi~unassignUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unassignUser(projectId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling unassignUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling unassignUser");
      }

      let pathParams = {
        'projectId': projectId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBrand operation.
     * @callback module:api/ManagementApi~updateBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsBrandingUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Brand
     * Updates a brand configuration. Only the fields sent in the request will be updated. The fields omitted in the request will remain unchanged.  📘 White Labelling  The white labelling settings which can be found in Project Settings > Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} brandingId Provide the unique identifier of the brand configuration.
     * @param {{
        projectId: String
     
        brandingId: String
     
        managementProjectsBrandingUpdateRequestBody?: module:model/ManagementProjectsBrandingUpdateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~updateBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsBrandingUpdateResponseBody}
     */
    updateBrand(projectId, brandingId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsBrandingUpdateRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateBrand");
      }
      // verify the required parameter 'brandingId' is set
      if (brandingId === undefined || brandingId === null) {
        throw new Error("Missing the required parameter 'brandingId' when calling updateBrand");
      }

      let pathParams = {
        'projectId': projectId,
        'brandingId': brandingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsBrandingUpdateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/branding/{brandingId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomEventSchema operation.
     * @callback module:api/ManagementApi~updateCustomEventSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsCustomEventSchemasUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Custom Event Schema
     * Updates a custom event schema. With this request, you can: - Add a nonexistent property to a custom event schema. - Update an existing property. In the request, you can provide only those properties you want to add or update. Definitions omitted in the request remain unchanged.  👍 Additional Notes - You can change the type of an existing property, e.g. from string to number. - You can remove a custom property with this endpoint by providing deleted: true in the request. However, you cannot permanently remove an event definition or its property with this endpoint.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the [Track Custom Event](/api-reference/events/track-custom-event) endpoint and the [Custom Event Object](/api-reference/events/event-object).
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} customEventSchemaId Provide the unique identifier of the custom event schema.
     * @param {{
        projectId: String
     
        customEventSchemaId: String
     
        managementProjectsCustomEventSchemasUpdateRequestBody?: module:model/ManagementProjectsCustomEventSchemasUpdateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~updateCustomEventSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsCustomEventSchemasUpdateResponseBody}
     */
    updateCustomEventSchema(projectId, customEventSchemaId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsCustomEventSchemasUpdateRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateCustomEventSchema");
      }
      // verify the required parameter 'customEventSchemaId' is set
      if (customEventSchemaId === undefined || customEventSchemaId === null) {
        throw new Error("Missing the required parameter 'customEventSchemaId' when calling updateCustomEventSchema");
      }

      let pathParams = {
        'projectId': projectId,
        'customEventSchemaId': customEventSchemaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsCustomEventSchemasUpdateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMetadataSchema operation.
     * @callback module:api/ManagementApi~updateMetadataSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsMetadataSchemasUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Metadata Schema
     * Updates a metadata schema. With this request, you can: - Add a nonexistent attribute definition to the metadata schema. - Update an existing attribute definition by overwriting its current values. In the request, you can provide only those definitions you want to add or update. Definitions omitted in the request remain unchanged. However, if you want to update a definition, you will have to add all its current key-value pairs as well. Only the pairs sent in the request are saved for this definition. This means that the key-value pairs that are not sent in a request are restored to default values. For example, if your definition has an array with values and it is not sent in an update request, the array values will be deleted.  👍 Additional Notes - You cannot change the type of an existing schema, e.g. from string to number. - You can remove a definition with this endpoint by providing deleted: true in the request. It will be moved to the Removed definitions section in the user interface. However, you cannot permanently remove a definition with this endpoint.  📘 Metadata Documentation  Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](/guides/metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} metadataSchemaId Provide the unique identifier of the metadata schema.
     * @param {{
        projectId: String
     
        metadataSchemaId: String
     
        managementProjectsMetadataSchemasUpdateRequestBody?: module:model/ManagementProjectsMetadataSchemasUpdateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~updateMetadataSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsMetadataSchemasUpdateResponseBody}
     */
    updateMetadataSchema(projectId, metadataSchemaId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsMetadataSchemasUpdateRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateMetadataSchema");
      }
      // verify the required parameter 'metadataSchemaId' is set
      if (metadataSchemaId === undefined || metadataSchemaId === null) {
        throw new Error("Missing the required parameter 'metadataSchemaId' when calling updateMetadataSchema");
      }

      let pathParams = {
        'projectId': projectId,
        'metadataSchemaId': metadataSchemaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsMetadataSchemasUpdateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/ManagementApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Project
     * Updates an existing project. You can add or modify settings for timezone, currency, notifications, and other details. Only the fields sent in the request will be updated.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {{
        projectId: String
     
        managementProjectsUpdateRequestBody?: module:model/ManagementProjectsUpdateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsUpdateResponseBody}
     */
    updateProject(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsUpdateRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsUpdateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStackingRules operation.
     * @callback module:api/ManagementApi~updateStackingRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsStackingRulesUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Stacking Rules
     * Updates the stacking rules. Only the provided fields will be updated. However, if you update an array, the content of the array is overwritten. This means that if you want to add new values to an array and retain existing ones, you need to provide both the existing and new values in the request.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} stackingRulesId Provide the unique identifier of the stacking rules.
     * @param {{
        projectId: String
     
        stackingRulesId: String
     
        managementProjectsStackingRulesUpdateRequestBody?: module:model/ManagementProjectsStackingRulesUpdateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~updateStackingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsStackingRulesUpdateResponseBody}
     */
    updateStackingRules(projectId, stackingRulesId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsStackingRulesUpdateRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateStackingRules");
      }
      // verify the required parameter 'stackingRulesId' is set
      if (stackingRulesId === undefined || stackingRulesId === null) {
        throw new Error("Missing the required parameter 'stackingRulesId' when calling updateStackingRules");
      }

      let pathParams = {
        'projectId': projectId,
        'stackingRulesId': stackingRulesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsStackingRulesUpdateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/ManagementApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsUsersUpdateRoleResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User
     * Updates the users role.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} userId Provide the unique identifier of the user. Alternatively, provide the users login.
     * @param {{
        projectId: String
     
        userId: String
     
        managementProjectsUsersUpdateRoleRequestBody?: module:model/ManagementProjectsUsersUpdateRoleRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsUsersUpdateRoleResponseBody}
     */
    updateUser(projectId, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsUsersUpdateRoleRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUser");
      }

      let pathParams = {
        'projectId': projectId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsUsersUpdateRoleResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebhook operation.
     * @callback module:api/ManagementApi~updateWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementProjectsWebhooksUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Webhook
     * Updates a webhook configuration. The events listed in the request are overwritten. If you want to add more events, provide also the events that are already in the webhook configuration.  📘 Webhook Documentation  Read [Introduction to webhooks](/api-reference/introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param {String} projectId Provide the unique identifier of the project.
     * @param {String} webhookId Provide the unique identifier of the webhook configuration.
     * @param {{
        projectId: String
     
        webhookId: String
     
        managementProjectsWebhooksUpdateRequestBody?: module:model/ManagementProjectsWebhooksUpdateRequestBody
     }} opts Parameters
     * @param {module:api/ManagementApi~updateWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementProjectsWebhooksUpdateResponseBody}
     */
    updateWebhook(projectId, webhookId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managementProjectsWebhooksUpdateRequestBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateWebhook");
      }
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling updateWebhook");
      }

      let pathParams = {
        'projectId': projectId,
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Management-Token', 'X-Management-Id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementProjectsWebhooksUpdateResponseBody;
      return this.apiClient.callApi(
        '/management/v1/projects/{projectId}/webhooks/{webhookId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
