/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CampaignsTransactionsExportCreateResponseBody from '../model/CampaignsTransactionsExportCreateResponseBody';
import LoyaltiesCreateCampaignRequestBody from '../model/LoyaltiesCreateCampaignRequestBody';
import LoyaltiesCreateCampaignResponseBody from '../model/LoyaltiesCreateCampaignResponseBody';
import LoyaltiesDeleteResponseBody from '../model/LoyaltiesDeleteResponseBody';
import LoyaltiesEarningRulesCreateRequestBodyItem from '../model/LoyaltiesEarningRulesCreateRequestBodyItem';
import LoyaltiesEarningRulesCreateResponseBody from '../model/LoyaltiesEarningRulesCreateResponseBody';
import LoyaltiesEarningRulesDisableResponseBody from '../model/LoyaltiesEarningRulesDisableResponseBody';
import LoyaltiesEarningRulesEnableResponseBody from '../model/LoyaltiesEarningRulesEnableResponseBody';
import LoyaltiesEarningRulesGetResponseBody from '../model/LoyaltiesEarningRulesGetResponseBody';
import LoyaltiesEarningRulesListResponseBody from '../model/LoyaltiesEarningRulesListResponseBody';
import LoyaltiesEarningRulesUpdateRequestBody from '../model/LoyaltiesEarningRulesUpdateRequestBody';
import LoyaltiesEarningRulesUpdateResponseBody from '../model/LoyaltiesEarningRulesUpdateResponseBody';
import LoyaltiesGetCampaignResponseBody from '../model/LoyaltiesGetCampaignResponseBody';
import LoyaltiesListCampaignsResponseBody from '../model/LoyaltiesListCampaignsResponseBody';
import LoyaltiesListMembersResponseBody from '../model/LoyaltiesListMembersResponseBody';
import LoyaltiesMemberActivityListResponseBody from '../model/LoyaltiesMemberActivityListResponseBody';
import LoyaltiesMembersBalanceUpdateRequestBody from '../model/LoyaltiesMembersBalanceUpdateRequestBody';
import LoyaltiesMembersBalanceUpdateResponseBody from '../model/LoyaltiesMembersBalanceUpdateResponseBody';
import LoyaltiesMembersCreateRequestBody from '../model/LoyaltiesMembersCreateRequestBody';
import LoyaltiesMembersCreateResponseBody from '../model/LoyaltiesMembersCreateResponseBody';
import LoyaltiesMembersGetResponseBody from '../model/LoyaltiesMembersGetResponseBody';
import LoyaltiesMembersPendingPointsActivateResponseBody from '../model/LoyaltiesMembersPendingPointsActivateResponseBody';
import LoyaltiesMembersPendingPointsBalanceRequestBody from '../model/LoyaltiesMembersPendingPointsBalanceRequestBody';
import LoyaltiesMembersPendingPointsBalanceResponseBody from '../model/LoyaltiesMembersPendingPointsBalanceResponseBody';
import LoyaltiesMembersPendingPointsListResponseBody from '../model/LoyaltiesMembersPendingPointsListResponseBody';
import LoyaltiesMembersPointsExpirationListResponseBody from '../model/LoyaltiesMembersPointsExpirationListResponseBody';
import LoyaltiesMembersRedemptionRedeemRequestBody from '../model/LoyaltiesMembersRedemptionRedeemRequestBody';
import LoyaltiesMembersRedemptionRedeemResponseBody from '../model/LoyaltiesMembersRedemptionRedeemResponseBody';
import LoyaltiesMembersRewardsListResponseBody from '../model/LoyaltiesMembersRewardsListResponseBody';
import LoyaltiesMembersTiersListResponseBody from '../model/LoyaltiesMembersTiersListResponseBody';
import LoyaltiesMembersTransactionsExportCreateRequestBody from '../model/LoyaltiesMembersTransactionsExportCreateRequestBody';
import LoyaltiesMembersTransactionsExportCreateResponseBody from '../model/LoyaltiesMembersTransactionsExportCreateResponseBody';
import LoyaltiesMembersTransactionsListResponseBody from '../model/LoyaltiesMembersTransactionsListResponseBody';
import LoyaltiesMembersTransfersCreateResponseBody from '../model/LoyaltiesMembersTransfersCreateResponseBody';
import LoyaltiesPendingPointsListResponseBody from '../model/LoyaltiesPendingPointsListResponseBody';
import LoyaltiesPointsExpirationExportCreateRequestBody from '../model/LoyaltiesPointsExpirationExportCreateRequestBody';
import LoyaltiesPointsExpirationExportCreateResponseBody from '../model/LoyaltiesPointsExpirationExportCreateResponseBody';
import LoyaltiesRewardAssignmentsGetResponseBody from '../model/LoyaltiesRewardAssignmentsGetResponseBody';
import LoyaltiesRewardAssignmentsListResponseBody from '../model/LoyaltiesRewardAssignmentsListResponseBody';
import LoyaltiesRewardAssignmentsRewardGetResponseBody from '../model/LoyaltiesRewardAssignmentsRewardGetResponseBody';
import LoyaltiesRewardsCreateAssignmentItemRequestBody from '../model/LoyaltiesRewardsCreateAssignmentItemRequestBody';
import LoyaltiesRewardsCreateAssignmentResponseBody from '../model/LoyaltiesRewardsCreateAssignmentResponseBody';
import LoyaltiesRewardsGetResponseBody from '../model/LoyaltiesRewardsGetResponseBody';
import LoyaltiesRewardsListAssignmentsResponseBody from '../model/LoyaltiesRewardsListAssignmentsResponseBody';
import LoyaltiesRewardsUpdateAssignmentRequestBody from '../model/LoyaltiesRewardsUpdateAssignmentRequestBody';
import LoyaltiesRewardsUpdateAssignmentResponseBody from '../model/LoyaltiesRewardsUpdateAssignmentResponseBody';
import LoyaltiesTiersCreateInBulkRequestBodyItem from '../model/LoyaltiesTiersCreateInBulkRequestBodyItem';
import LoyaltiesTiersEarningRulesListResponseBody from '../model/LoyaltiesTiersEarningRulesListResponseBody';
import LoyaltiesTiersGetResponseBody from '../model/LoyaltiesTiersGetResponseBody';
import LoyaltiesTiersListResponseBody from '../model/LoyaltiesTiersListResponseBody';
import LoyaltiesTiersRewardsListResponseBody from '../model/LoyaltiesTiersRewardsListResponseBody';
import LoyaltiesTransactionsExportCreateRequestBody from '../model/LoyaltiesTransactionsExportCreateRequestBody';
import LoyaltiesTransactionsListResponseBody from '../model/LoyaltiesTransactionsListResponseBody';
import LoyaltiesTransferPoints from '../model/LoyaltiesTransferPoints';
import LoyaltiesUpdateCampaignRequestBody from '../model/LoyaltiesUpdateCampaignRequestBody';
import LoyaltiesUpdateCampaignResponseBody from '../model/LoyaltiesUpdateCampaignResponseBody';
import LoyaltyTier from '../model/LoyaltyTier';
import ParameterCreatedBeforeAfter from '../model/ParameterCreatedBeforeAfter';
import ParameterExpandListCampaigns from '../model/ParameterExpandListCampaigns';
import ParameterFiltersListMemberTransactions from '../model/ParameterFiltersListMemberTransactions';
import ParameterOrderCreatedAt from '../model/ParameterOrderCreatedAt';
import ParameterOrderListCampaigns from '../model/ParameterOrderListCampaigns';
import ParameterOrderListEarningRules from '../model/ParameterOrderListEarningRules';
import ParameterOrderListLoyaltyTiers from '../model/ParameterOrderListLoyaltyTiers';
import ParameterOrderListPendingPoints from '../model/ParameterOrderListPendingPoints';
import ParameterOrderListTransactions from '../model/ParameterOrderListTransactions';
import ParameterOrderVouchers from '../model/ParameterOrderVouchers';
import ParameterUpdatedBeforeAfter from '../model/ParameterUpdatedBeforeAfter';
import ParametersFiltersListCampaignTransactions from '../model/ParametersFiltersListCampaignTransactions';

/**
* Loyalties service.
* @module api/LoyaltiesApi
* @version v2018-08-01
*/
export default class LoyaltiesApi {

    /**
    * Constructs a new LoyaltiesApi. 
    * @alias module:api/LoyaltiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateMemberPendingPoints operation.
     * @callback module:api/LoyaltiesApi~activateMemberPendingPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersPendingPointsActivateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate Member Pending Points
     * Activate manually the pending points and add them to the loyalty card. The pending points are determined by the pending point ID. Once activated, the pending point entry with that ID is not listed by the endpoints: List member ([with campaign ID](/api-reference/loyalties/list-member-pending-points-with-campaign-id), [without campaign ID](/api-reference/loyalties/list-member-pending-points)), [List campaign pending points](/api-reference/loyalties/list-campaign-pending-points). This **POST** method does not require a request body. üëç Configuring pending points Pending points are configured as part of an earning rule with [POST Create earning rule](/api-reference/loyalties/create-earning-rule) or [PUT Update earning rule](/api-reference/loyalties/update-earning-rule).
     * @param {String} memberId Unique loyalty card code assigned to a particular customer.
     * @param {String} pendingPointsId Unique pending point identifier, assigned by Voucherify.
     * @param {module:api/LoyaltiesApi~activateMemberPendingPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersPendingPointsActivateResponseBody}
     */
    activateMemberPendingPoints(memberId, pendingPointsId, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling activateMemberPendingPoints");
      }
      // verify the required parameter 'pendingPointsId' is set
      if (pendingPointsId === undefined || pendingPointsId === null) {
        throw new Error("Missing the required parameter 'pendingPointsId' when calling activateMemberPendingPoints");
      }

      let pathParams = {
        'memberId': memberId,
        'pendingPointsId': pendingPointsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersPendingPointsActivateResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/members/{memberId}/pending-points/{pendingPointsId}/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addMember operation.
     * @callback module:api/LoyaltiesApi~addMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Member
     * This method assigns a loyalty card to a customer. It selects a [loyalty card](/api-reference/vouchers/get-voucher) suitable for publication, adds a publish entry, and returns the published voucher.   A voucher is suitable for publication when its active and hasnt been published yet.    üìò Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.
     * @param {String} campaignId Unique campaign ID of the loyalty program.
     * @param {{
        loyaltiesMembersCreateRequestBody?: module:model/LoyaltiesMembersCreateRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~addMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersCreateResponseBody}
     */
    addMember(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesMembersCreateRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling addMember");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adjustMemberPendingPoints operation.
     * @callback module:api/LoyaltiesApi~adjustMemberPendingPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersPendingPointsBalanceResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adjust Member Pending Points
     * Adjusts the pending points with a given ID. You can add or subtract the number of points. üëç Configuring pending points Pending points are configured as part of an earning rule with [POST Create earning rule](/api-reference/loyalties/create-earning-rule) or [PUT Update earning rule](/api-reference/loyalties/update-earning-rule).
     * @param {String} memberId Unique loyalty card code assigned to a particular customer.
     * @param {String} pendingPointsId Unique pending point identifier, assigned by Voucherify.
     * @param {{
        loyaltiesMembersPendingPointsBalanceRequestBody?: module:model/LoyaltiesMembersPendingPointsBalanceRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~adjustMemberPendingPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersPendingPointsBalanceResponseBody}
     */
    adjustMemberPendingPoints(memberId, pendingPointsId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesMembersPendingPointsBalanceRequestBody'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling adjustMemberPendingPoints");
      }
      // verify the required parameter 'pendingPointsId' is set
      if (pendingPointsId === undefined || pendingPointsId === null) {
        throw new Error("Missing the required parameter 'pendingPointsId' when calling adjustMemberPendingPoints");
      }

      let pathParams = {
        'memberId': memberId,
        'pendingPointsId': pendingPointsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersPendingPointsBalanceResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/members/{memberId}/pending-points/{pendingPointsId}/balance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelMemberPendingPoints operation.
     * @callback module:api/LoyaltiesApi~cancelMemberPendingPointsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Member Pending Points
     * Cancel manually the pending points for the loyalty card. The pending points are determined by the pending point ID. Once canceled, the pending point entry with that ID is not listed by the endpoints: List member ([with campaign ID](/api-reference/loyalties/list-member-pending-points-with-campaign-id), [without campaign ID](/api-reference/loyalties/list-member-pending-points)), [List campaign pending points](/api-reference/loyalties/list-campaign-pending-points). This **POST** method does not require a request body and it returns an empty, 204, response. üëç Configuring pending points Pending points are configured as part of an earning rule with [POST Create earning rule](/api-reference/loyalties/create-earning-rule) or [PUT Update earning rule](/api-reference/loyalties/update-earning-rule).
     * @param {String} memberId Unique loyalty card code assigned to a particular customer.
     * @param {String} pendingPointsId Unique pending point identifier, assigned by Voucherify.
     * @param {module:api/LoyaltiesApi~cancelMemberPendingPointsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelMemberPendingPoints(memberId, pendingPointsId, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling cancelMemberPendingPoints");
      }
      // verify the required parameter 'pendingPointsId' is set
      if (pendingPointsId === undefined || pendingPointsId === null) {
        throw new Error("Missing the required parameter 'pendingPointsId' when calling cancelMemberPendingPoints");
      }

      let pathParams = {
        'memberId': memberId,
        'pendingPointsId': pendingPointsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/loyalties/members/{memberId}/pending-points/{pendingPointsId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEarningRule operation.
     * @callback module:api/LoyaltiesApi~createEarningRuleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LoyaltiesEarningRulesCreateResponseBody>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Earning Rule
     * Create earning rules for a loyalty campaign.  üöß Maximum number of earning rules  You can create up to 100 earning rules per project. The limit can be customized for clients with a single-tenant setup.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {{
        loyaltiesEarningRulesCreateRequestBodyItem?: Array.<module:model/LoyaltiesEarningRulesCreateRequestBodyItem>,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~createEarningRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LoyaltiesEarningRulesCreateResponseBody>}
     */
    createEarningRule(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesEarningRulesCreateRequestBodyItem'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling createEarningRule");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [LoyaltiesEarningRulesCreateResponseBody];
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/earning-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInBulkLoyaltyTiers operation.
     * @callback module:api/LoyaltiesApi~createInBulkLoyaltyTiersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LoyaltyTier>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create loyalty tiers
     * Creates loyalty tiers for desired campaign.
     * @param {String} campaignId Unique loyalty campaign ID or name.
     * @param {{
        loyaltiesTiersCreateInBulkRequestBodyItem?: Array.<module:model/LoyaltiesTiersCreateInBulkRequestBodyItem>,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~createInBulkLoyaltyTiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LoyaltyTier>}
     */
    createInBulkLoyaltyTiers(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesTiersCreateInBulkRequestBodyItem'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling createInBulkLoyaltyTiers");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [LoyaltyTier];
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/tiers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoyaltyProgram operation.
     * @callback module:api/LoyaltiesApi~createLoyaltyProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesCreateCampaignResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Loyalty Campaign
     * Creates a batch of [loyalty cards](/api-reference/loyalties/get-member) aggregated in a single loyalty campaign. It also allows you to define a custom codes pattern.    üìò Global uniqueness  All codes are unique across the whole project. Voucherify wont allow to generate the same codes in any of your campaigns.  üöß Asynchronous action!  This is an asynchronous action, you cant read or modify a newly created campaign until the code generation is completed. See creation_status field in the [loyalty campaign object](/api-reference/loyalties/loyalty-campaign-object) description.
     * @param {{
        loyaltiesCreateCampaignRequestBody?: module:model/LoyaltiesCreateCampaignRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~createLoyaltyProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesCreateCampaignResponseBody}
     */
    createLoyaltyProgram(opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesCreateCampaignRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesCreateCampaignResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPointsExpirationExport operation.
     * @callback module:api/LoyaltiesApi~createPointsExpirationExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesPointsExpirationExportCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Loyalty Campaign Point Expiration
     * Schedule the generation of a point expiration CSV file for a particular campaign. It can list point buckets, which can have an ACTIVE or EXPIRED status.
     * @param {String} campaignId Unique campaign ID or name.
     * @param {{
        loyaltiesPointsExpirationExportCreateRequestBody?: module:model/LoyaltiesPointsExpirationExportCreateRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~createPointsExpirationExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesPointsExpirationExportCreateResponseBody}
     */
    createPointsExpirationExport(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesPointsExpirationExportCreateRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling createPointsExpirationExport");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesPointsExpirationExportCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/points-expiration/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRewardAssignment1 operation.
     * @callback module:api/LoyaltiesApi~createRewardAssignment1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesRewardsCreateAssignmentResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Loyalty Campaign Reward Assignment
     * Add rewards to a loyalty campaign.
     * @param {String} campaignId Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {{
        loyaltiesRewardsCreateAssignmentItemRequestBody?: Array.<module:model/LoyaltiesRewardsCreateAssignmentItemRequestBody>,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~createRewardAssignment1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesRewardsCreateAssignmentResponseBody}
     */
    createRewardAssignment1(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesRewardsCreateAssignmentItemRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling createRewardAssignment1");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesRewardsCreateAssignmentResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/rewards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEarningRule operation.
     * @callback module:api/LoyaltiesApi~deleteEarningRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Earning Rule
     * This method deletes an earning rule for a specific loyalty campaign.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {String} earningRuleId A unique earning rule ID.
     * @param {module:api/LoyaltiesApi~deleteEarningRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEarningRule(campaignId, earningRuleId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteEarningRule");
      }
      // verify the required parameter 'earningRuleId' is set
      if (earningRuleId === undefined || earningRuleId === null) {
        throw new Error("Missing the required parameter 'earningRuleId' when calling deleteEarningRule");
      }

      let pathParams = {
        'campaignId': campaignId,
        'earningRuleId': earningRuleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoyaltyProgram operation.
     * @callback module:api/LoyaltiesApi~deleteLoyaltyProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesDeleteResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Loyalty Campaign
     * Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards. If the force parameter is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to [the bin](/api-reference/bin/list-bin-entries).
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {{
        force?: Boolean,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~deleteLoyaltyProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesDeleteResponseBody}
     */
    deleteLoyaltyProgram(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteLoyaltyProgram");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesDeleteResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRewardAssignment1 operation.
     * @callback module:api/LoyaltiesApi~deleteRewardAssignment1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Campaign Reward Assignment
     * This method deletes a reward assignment for a particular loyalty campaign.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {String} assignmentId A unique reward assignment ID.
     * @param {module:api/LoyaltiesApi~deleteRewardAssignment1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRewardAssignment1(campaignId, assignmentId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteRewardAssignment1");
      }
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling deleteRewardAssignment1");
      }

      let pathParams = {
        'campaignId': campaignId,
        'assignmentId': assignmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/rewards/{assignmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableEarningRule operation.
     * @callback module:api/LoyaltiesApi~disableEarningRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesEarningRulesDisableResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable Earning Rule
     * Disable an earning rule.
     * @param {String} campaignId Unique campaign ID or name.
     * @param {String} earningRuleId Unique identifier of an earning rule, assigned by Voucherify.
     * @param {module:api/LoyaltiesApi~disableEarningRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesEarningRulesDisableResponseBody}
     */
    disableEarningRule(campaignId, earningRuleId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling disableEarningRule");
      }
      // verify the required parameter 'earningRuleId' is set
      if (earningRuleId === undefined || earningRuleId === null) {
        throw new Error("Missing the required parameter 'earningRuleId' when calling disableEarningRule");
      }

      let pathParams = {
        'campaignId': campaignId,
        'earningRuleId': earningRuleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesEarningRulesDisableResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableEarningRule operation.
     * @callback module:api/LoyaltiesApi~enableEarningRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesEarningRulesEnableResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable Earning Rule
     * Enable an earning rule.
     * @param {String} campaignId Unique campaign ID or name.
     * @param {String} earningRuleId Unique identifier of an earning rule, assigned by Voucherify.
     * @param {module:api/LoyaltiesApi~enableEarningRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesEarningRulesEnableResponseBody}
     */
    enableEarningRule(campaignId, earningRuleId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling enableEarningRule");
      }
      // verify the required parameter 'earningRuleId' is set
      if (earningRuleId === undefined || earningRuleId === null) {
        throw new Error("Missing the required parameter 'earningRuleId' when calling enableEarningRule");
      }

      let pathParams = {
        'campaignId': campaignId,
        'earningRuleId': earningRuleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesEarningRulesEnableResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportLoyaltyCampaignTransactions operation.
     * @callback module:api/LoyaltiesApi~exportLoyaltyCampaignTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsTransactionsExportCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Loyalty Campaign Transactions
     * Export transactions is an asynchronous process that generates a CSV file with the data about or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the [GET Export](/api-reference/exports/get-export) method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    üëç Export Campaign Transactions  This method works in the same way the [POST Export Campaign Transactions](/api-reference/campaigns/export-campaign-transactions) does, but it is limited to loyalty campaigns only. The POST Export Campaign Transactions method can also export gift card campaign transactions.
     * @param {String} campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.
     * @param {{
        loyaltiesTransactionsExportCreateRequestBody?: module:model/LoyaltiesTransactionsExportCreateRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~exportLoyaltyCampaignTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsTransactionsExportCreateResponseBody}
     */
    exportLoyaltyCampaignTransactions(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesTransactionsExportCreateRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling exportLoyaltyCampaignTransactions");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignsTransactionsExportCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/transactions/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportLoyaltyCardTransactions operation.
     * @callback module:api/LoyaltiesApi~exportLoyaltyCardTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersTransactionsExportCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Loyalty Card Transactions
     * Export transactions that are associated with point movements on a loyalty card.   
     * @param {String} memberId A unique code identifying the loyalty card that you are looking to export transaction data for.
     * @param {{
        loyaltiesMembersTransactionsExportCreateRequestBody?: module:model/LoyaltiesMembersTransactionsExportCreateRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~exportLoyaltyCardTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersTransactionsExportCreateResponseBody}
     */
    exportLoyaltyCardTransactions(memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesMembersTransactionsExportCreateRequestBody'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling exportLoyaltyCardTransactions");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersTransactionsExportCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/members/{memberId}/transactions/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportLoyaltyCardTransactions1 operation.
     * @callback module:api/LoyaltiesApi~exportLoyaltyCardTransactions1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersTransactionsExportCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Loyalty Card Transactions with campaign ID
     * Export transactions that are associated with point movements on a loyalty card.   
     * @param {String} campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export.
     * @param {String} memberId A unique code identifying the loyalty card that you are looking to export transaction data for.
     * @param {{
        loyaltiesMembersTransactionsExportCreateRequestBody?: module:model/LoyaltiesMembersTransactionsExportCreateRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~exportLoyaltyCardTransactions1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersTransactionsExportCreateResponseBody}
     */
    exportLoyaltyCardTransactions1(campaignId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesMembersTransactionsExportCreateRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling exportLoyaltyCardTransactions1");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling exportLoyaltyCardTransactions1");
      }

      let pathParams = {
        'campaignId': campaignId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersTransactionsExportCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/members/{memberId}/transactions/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEarningRule operation.
     * @callback module:api/LoyaltiesApi~getEarningRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesEarningRulesGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Earning Rule
     * Retrieves an earning rule assigned to a campaign.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {String} earningRuleId A unique earning rule ID.
     * @param {module:api/LoyaltiesApi~getEarningRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesEarningRulesGetResponseBody}
     */
    getEarningRule(campaignId, earningRuleId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getEarningRule");
      }
      // verify the required parameter 'earningRuleId' is set
      if (earningRuleId === undefined || earningRuleId === null) {
        throw new Error("Missing the required parameter 'earningRuleId' when calling getEarningRule");
      }

      let pathParams = {
        'campaignId': campaignId,
        'earningRuleId': earningRuleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesEarningRulesGetResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoyaltyProgram operation.
     * @callback module:api/LoyaltiesApi~getLoyaltyProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesGetCampaignResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Loyalty Campaign
     * Retrieve a specific loyalty campaign.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {module:api/LoyaltiesApi~getLoyaltyProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesGetCampaignResponseBody}
     */
    getLoyaltyProgram(campaignId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getLoyaltyProgram");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesGetCampaignResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoyaltyTier operation.
     * @callback module:api/LoyaltiesApi~getLoyaltyTierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesTiersGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Loyalty Tier
     * Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
     * @param {String} campaignId Unique loyalty campaign ID or name.
     * @param {String} loyaltyTierId Unique loyalty tier ID.
     * @param {module:api/LoyaltiesApi~getLoyaltyTierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesTiersGetResponseBody}
     */
    getLoyaltyTier(campaignId, loyaltyTierId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getLoyaltyTier");
      }
      // verify the required parameter 'loyaltyTierId' is set
      if (loyaltyTierId === undefined || loyaltyTierId === null) {
        throw new Error("Missing the required parameter 'loyaltyTierId' when calling getLoyaltyTier");
      }

      let pathParams = {
        'campaignId': campaignId,
        'loyaltyTierId': loyaltyTierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesTiersGetResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMember operation.
     * @callback module:api/LoyaltiesApi~getMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Member
     * Retrieve loyalty card with the given member ID (i.e. voucher code).      üìò Alternative endpoint  This endpoint is an alternative to this [endpoint](/api-reference/loyalties/get-member-with-campaign-id). The URL was re-designed to allow you to retrieve loyalty card details without having to provide the campaignId as a path parameter.
     * @param {String} memberId Unique loyalty card code assigned to a particular customer.
     * @param {module:api/LoyaltiesApi~getMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersGetResponseBody}
     */
    getMember(memberId, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling getMember");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersGetResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/members/{memberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMember1 operation.
     * @callback module:api/LoyaltiesApi~getMember1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Member with campaign ID
     * Retrieves the loyalty card with the given member ID (i.e. voucher code).
     * @param {String} campaignId Unique campaign ID.
     * @param {String} memberId Unique code that identifies the loyalty card.
     * @param {module:api/LoyaltiesApi~getMember1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersGetResponseBody}
     */
    getMember1(campaignId, memberId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getMember1");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling getMember1");
      }

      let pathParams = {
        'campaignId': campaignId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersGetResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/members/{memberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRewardAssignment1 operation.
     * @callback module:api/LoyaltiesApi~getRewardAssignment1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesRewardAssignmentsGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Campaign Reward Assignments
     * Retrieve specific reward assignment.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {String} assignmentId Unique reward assignment ID.
     * @param {module:api/LoyaltiesApi~getRewardAssignment1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesRewardAssignmentsGetResponseBody}
     */
    getRewardAssignment1(campaignId, assignmentId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getRewardAssignment1");
      }
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling getRewardAssignment1");
      }

      let pathParams = {
        'campaignId': campaignId,
        'assignmentId': assignmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesRewardAssignmentsGetResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRewardAssignment2 operation.
     * @callback module:api/LoyaltiesApi~getRewardAssignment2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesRewardsGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Campaign Reward Assignment
     * Retrieve specific reward assignment.  üìò Alternative endpoint  This endpoint is an alternative to this [endpoint](/api-reference/loyalties/get-campaign-reward-assignments). 
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {String} assignmentId A unique reward assignment ID.
     * @param {module:api/LoyaltiesApi~getRewardAssignment2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesRewardsGetResponseBody}
     */
    getRewardAssignment2(campaignId, assignmentId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getRewardAssignment2");
      }
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling getRewardAssignment2");
      }

      let pathParams = {
        'campaignId': campaignId,
        'assignmentId': assignmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesRewardsGetResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/rewards/{assignmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRewardDetails operation.
     * @callback module:api/LoyaltiesApi~getRewardDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesRewardAssignmentsRewardGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Reward Details
     * Get reward details in the context of a loyalty campaign and reward assignment ID.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {String} assignmentId Unique reward assignment ID.
     * @param {module:api/LoyaltiesApi~getRewardDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesRewardAssignmentsRewardGetResponseBody}
     */
    getRewardDetails(campaignId, assignmentId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getRewardDetails");
      }
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling getRewardDetails");
      }

      let pathParams = {
        'campaignId': campaignId,
        'assignmentId': assignmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesRewardAssignmentsRewardGetResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}/reward', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCampaignPendingPoints operation.
     * @callback module:api/LoyaltiesApi~listCampaignPendingPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesPendingPointsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Campaign Pending Points
     * Lists all pending points that are currently assigned to all loyalty cards in a campaign. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with [POST Create earning rule](/api-reference/loyalties/create-earning-rule) or [PUT Update earning rule](/api-reference/loyalties/update-earning-rule).
     * @param {String} campaignId Unique campaign ID.
     * @param {{
        limit?: Number,
        order?: module:model/ParameterOrderListPendingPoints,
        startingAfterId?: String,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listCampaignPendingPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesPendingPointsListResponseBody}
     */
    listCampaignPendingPoints(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listCampaignPendingPoints");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'starting_after_id': opts['startingAfterId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesPendingPointsListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/pending-points', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEarningRules operation.
     * @callback module:api/LoyaltiesApi~listEarningRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesEarningRulesListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Earning Rules
     * Returns a list of all earning rules within a given campaign.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {{
        limit?: Number,
        page?: Number,
        order?: module:model/ParameterOrderListEarningRules,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listEarningRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesEarningRulesListResponseBody}
     */
    listEarningRules(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listEarningRules");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesEarningRulesListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/earning-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoyaltyCampaignTransactions operation.
     * @callback module:api/LoyaltiesApi~listLoyaltyCampaignTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesTransactionsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Loyalty Campaign Transactions
     * Retrieves all transactions for the campaign with the given campaign ID or campaign name.
     * @param {String} campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.
     * @param {{
        limit?: Number,
        order?: module:model/ParameterOrderListTransactions,
        startingAfterId?: String,
        filters?: module:model/ParametersFiltersListCampaignTransactions,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listLoyaltyCampaignTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesTransactionsListResponseBody}
     */
    listLoyaltyCampaignTransactions(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listLoyaltyCampaignTransactions");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'starting_after_id': opts['startingAfterId'],
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesTransactionsListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoyaltyCardTransactions operation.
     * @callback module:api/LoyaltiesApi~listLoyaltyCardTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersTransactionsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Loyalty Card Transactions
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param {String} memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for.
     * @param {{
        limit?: Number,
        order?: module:model/ParameterOrderListTransactions,
        filters?: module:model/ParameterFiltersListMemberTransactions,
        startingAfterId?: String,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listLoyaltyCardTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersTransactionsListResponseBody}
     */
    listLoyaltyCardTransactions(memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling listLoyaltyCardTransactions");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'filters': opts['filters'],
        'starting_after_id': opts['startingAfterId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersTransactionsListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/members/{memberId}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoyaltyCardTransactions1 operation.
     * @callback module:api/LoyaltiesApi~listLoyaltyCardTransactions1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersTransactionsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Loyalty Card Transactions with campaign ID
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param {String} campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return.
     * @param {String} memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for.
     * @param {{
        limit?: Number,
        order?: module:model/ParameterOrderListTransactions,
        filters?: module:model/ParameterFiltersListMemberTransactions,
        startingAfterId?: String,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listLoyaltyCardTransactions1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersTransactionsListResponseBody}
     */
    listLoyaltyCardTransactions1(campaignId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listLoyaltyCardTransactions1");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling listLoyaltyCardTransactions1");
      }

      let pathParams = {
        'campaignId': campaignId,
        'memberId': memberId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'filters': opts['filters'],
        'starting_after_id': opts['startingAfterId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersTransactionsListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/members/{memberId}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoyaltyPrograms operation.
     * @callback module:api/LoyaltiesApi~listLoyaltyProgramsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesListCampaignsResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Loyalty Campaigns
     * Returns a list of your loyalty campaigns.
     * @param {{
        limit?: Number,
        page?: Number,
        expand?: module:model/ParameterExpandListCampaigns,
        order?: module:model/ParameterOrderListCampaigns,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listLoyaltyProgramsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesListCampaignsResponseBody}
     */
    listLoyaltyPrograms(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'expand': opts['expand'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesListCampaignsResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoyaltyTierEarningRules operation.
     * @callback module:api/LoyaltiesApi~listLoyaltyTierEarningRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesTiersEarningRulesListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Loyalty Tier Earning Rules
     * Retrieve available earning rules for a given tier and the calculation method for earning points.
     * @param {String} campaignId Unique campaign ID or name.
     * @param {String} loyaltyTierId Unique loyalty tier ID.
     * @param {{
        limit?: Number,
        page?: Number,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listLoyaltyTierEarningRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesTiersEarningRulesListResponseBody}
     */
    listLoyaltyTierEarningRules(campaignId, loyaltyTierId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listLoyaltyTierEarningRules");
      }
      // verify the required parameter 'loyaltyTierId' is set
      if (loyaltyTierId === undefined || loyaltyTierId === null) {
        throw new Error("Missing the required parameter 'loyaltyTierId' when calling listLoyaltyTierEarningRules");
      }

      let pathParams = {
        'campaignId': campaignId,
        'loyaltyTierId': loyaltyTierId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesTiersEarningRulesListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/earning-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoyaltyTierRewards operation.
     * @callback module:api/LoyaltiesApi~listLoyaltyTierRewardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesTiersRewardsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Loyalty Tier Rewards
     * Get available rewards for a given tier.
     * @param {String} campaignId Unique campaign ID or name.
     * @param {String} loyaltyTierId Unique loyalty tier ID.
     * @param {module:api/LoyaltiesApi~listLoyaltyTierRewardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesTiersRewardsListResponseBody}
     */
    listLoyaltyTierRewards(campaignId, loyaltyTierId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listLoyaltyTierRewards");
      }
      // verify the required parameter 'loyaltyTierId' is set
      if (loyaltyTierId === undefined || loyaltyTierId === null) {
        throw new Error("Missing the required parameter 'loyaltyTierId' when calling listLoyaltyTierRewards");
      }

      let pathParams = {
        'campaignId': campaignId,
        'loyaltyTierId': loyaltyTierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesTiersRewardsListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/rewards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoyaltyTiers operation.
     * @callback module:api/LoyaltiesApi~listLoyaltyTiersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesTiersListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Loyalty Tiers
     * Retrieve a list of loyalty tiers which were added to the loyalty program.
     * @param {String} campaignId Unique loyalty campaign ID or name.
     * @param {{
        limit?: Number,
        order?: module:model/ParameterOrderListLoyaltyTiers,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listLoyaltyTiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesTiersListResponseBody}
     */
    listLoyaltyTiers(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listLoyaltyTiers");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesTiersListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/tiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMemberActivity operation.
     * @callback module:api/LoyaltiesApi~listMemberActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMemberActivityListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Member Activity
     *   üìò Alternative endpoint  This endpoint is an alternative to this [endpoint](/api-reference/loyalties/list-member-activity-with-campaign-id). The URL was re-designed to allow you to get member activities without having to provide the campaignId as a path parameter. Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
     * @param {String} memberId Unique loyalty card assigned to a particular customer.
     * @param {{
        limit?: Number,
        order?: module:model/ParameterOrderCreatedAt,
        startingAfterId?: String,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listMemberActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMemberActivityListResponseBody}
     */
    listMemberActivity(memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling listMemberActivity");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'starting_after_id': opts['startingAfterId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMemberActivityListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/members/{memberId}/activity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMemberActivity1 operation.
     * @callback module:api/LoyaltiesApi~listMemberActivity1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMemberActivityListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Member Activity with campaign ID
     * Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
     * @param {String} campaignId Unique campaign ID.
     * @param {String} memberId A code that identifies the loyalty card.
     * @param {{
        limit?: Number,
        order?: module:model/ParameterOrderCreatedAt,
        startingAfterId?: String,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listMemberActivity1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMemberActivityListResponseBody}
     */
    listMemberActivity1(campaignId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listMemberActivity1");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling listMemberActivity1");
      }

      let pathParams = {
        'campaignId': campaignId,
        'memberId': memberId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'starting_after_id': opts['startingAfterId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMemberActivityListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/members/{memberId}/activity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMemberLoyaltyTier operation.
     * @callback module:api/LoyaltiesApi~listMemberLoyaltyTierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersTiersListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Member's Loyalty Tiers
     * Retrieve member tiers using the loyalty card ID.
     * @param {String} memberId Unique loyalty card assigned to a particular customer.
     * @param {module:api/LoyaltiesApi~listMemberLoyaltyTierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersTiersListResponseBody}
     */
    listMemberLoyaltyTier(memberId, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling listMemberLoyaltyTier");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersTiersListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/members/{memberId}/tiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMemberPendingPoints operation.
     * @callback module:api/LoyaltiesApi~listMemberPendingPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersPendingPointsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Member Pending Points
     *   üìò Alternative endpoint  This endpoint is an alternative to this [endpoint](/api-reference/loyalties/list-member-pending-points-with-campaign-id). The URL was re-designed to list member pending points without having to provide the campaignId as a path parameter. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with [POST Create earning rule](/api-reference/loyalties/create-earning-rule) or [PUT Update earning rule](/api-reference/loyalties/update-earning-rule).
     * @param {String} memberId Unique loyalty card code assigned to a particular customer.
     * @param {{
        limit?: Number,
        order?: module:model/ParameterOrderListPendingPoints,
        startingAfterId?: String,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listMemberPendingPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersPendingPointsListResponseBody}
     */
    listMemberPendingPoints(memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling listMemberPendingPoints");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'starting_after_id': opts['startingAfterId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersPendingPointsListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/members/{memberId}/pending-points', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMemberPendingPoints1 operation.
     * @callback module:api/LoyaltiesApi~listMemberPendingPoints1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersPendingPointsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Member Pending Points with campaign ID
     * Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with [POST Create earning rule](/api-reference/loyalties/create-earning-rule) or [PUT Update earning rule](/api-reference/loyalties/update-earning-rule).
     * @param {String} campaignId Unique campaign ID.
     * @param {String} memberId Unique loyalty card code assigned to a particular customer.
     * @param {{
        limit?: Number,
        order?: module:model/ParameterOrderListPendingPoints,
        startingAfterId?: String,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listMemberPendingPoints1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersPendingPointsListResponseBody}
     */
    listMemberPendingPoints1(campaignId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listMemberPendingPoints1");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling listMemberPendingPoints1");
      }

      let pathParams = {
        'campaignId': campaignId,
        'memberId': memberId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'starting_after_id': opts['startingAfterId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersPendingPointsListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/members/{memberId}/pending-points', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMemberRewards operation.
     * @callback module:api/LoyaltiesApi~listMemberRewardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersRewardsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Member Rewards
     * Retrieves the list of rewards that the given customer (identified by member_id, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.   You can use the affordable_only parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).   Please note that rewards that are disabled (i.e. set to Not Available in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
     * @param {String} memberId Unique loyalty card assigned to a particular customer.
     * @param {{
        affordableOnly?: Boolean,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listMemberRewardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersRewardsListResponseBody}
     */
    listMemberRewards(memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling listMemberRewards");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
        'affordable_only': opts['affordableOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersRewardsListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/members/{memberId}/rewards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMembers operation.
     * @callback module:api/LoyaltiesApi~listMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesListMembersResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Members
     * Returns a list of your loyalty cards. The loyalty cards are sorted by creation date, with the most recent loyalty cards appearing first.
     * @param {String} campaignId Unique campaign ID of the loyalty program.
     * @param {{
        limit?: Number,
        page?: Number,
        customer?: String,
        createdAt?: module:model/ParameterCreatedBeforeAfter,
        updatedAt?: module:model/ParameterUpdatedBeforeAfter,
        order?: module:model/ParameterOrderVouchers,
        code?: String,
        ids?: Array.<String>,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesListMembersResponseBody}
     */
    listMembers(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listMembers");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'customer': opts['customer'],
        'created_at': opts['createdAt'],
        'updated_at': opts['updatedAt'],
        'order': opts['order'],
        'code': opts['code'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesListMembersResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPointsExpiration operation.
     * @callback module:api/LoyaltiesApi~listPointsExpirationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersPointsExpirationListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Loyalty Card Point Expiration
     * Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the [Exports API](/api-reference/exports/create-export) to retrieve a list of both ACTIVE and EXPIRED point buckets.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {String} memberId Loyalty card code.
     * @param {{
        limit?: Number,
        page?: Number,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listPointsExpirationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersPointsExpirationListResponseBody}
     */
    listPointsExpiration(campaignId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listPointsExpiration");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling listPointsExpiration");
      }

      let pathParams = {
        'campaignId': campaignId,
        'memberId': memberId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersPointsExpirationListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/members/{memberId}/points-expiration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRewardAssignments1 operation.
     * @callback module:api/LoyaltiesApi~listRewardAssignments1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesRewardAssignmentsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Reward Assignments with campaign ID
     * Returns reward assignments from a given loyalty campaign.  üìò Alternative endpoint  This endpoint is an alternative to this [endpoint](/api-reference/loyalties/list-campaign-rewards). The URL was re-designed to be more contextual to the type of data returned in the response.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {{
        limit?: Number,
        page?: Number,
        assignmentId?: String,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listRewardAssignments1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesRewardAssignmentsListResponseBody}
     */
    listRewardAssignments1(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listRewardAssignments1");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'assignmentId': opts['assignmentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesRewardAssignmentsListResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/reward-assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRewardAssignments2 operation.
     * @callback module:api/LoyaltiesApi~listRewardAssignments2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesRewardsListAssignmentsResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Campaign Rewards
     * Returns active rewards from a given loyalty campaign.
     * @param {String} campaignId Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {{
        limit?: Number,
        page?: Number,
        assignmentId?: String,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~listRewardAssignments2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesRewardsListAssignmentsResponseBody}
     */
    listRewardAssignments2(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listRewardAssignments2");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'assignment_id': opts['assignmentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltiesRewardsListAssignmentsResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/rewards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the redeemReward operation.
     * @callback module:api/LoyaltiesApi~redeemRewardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersRedemptionRedeemResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeem Reward
     *   üìò Alternative endpoint This endpoint is an alternative to this [endpoint](/api-reference/loyalties/redeem-reward-with-campaign-id). The URL was re-designed to allow you to redeem a reward without having to provide the campaignId as a path parameter.
     * @param {String} memberId Unique loyalty card assigned to a particular customer.
     * @param {{
        loyaltiesMembersRedemptionRedeemRequestBody?: module:model/LoyaltiesMembersRedemptionRedeemRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~redeemRewardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersRedemptionRedeemResponseBody}
     */
    redeemReward(memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesMembersRedemptionRedeemRequestBody'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling redeemReward");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersRedemptionRedeemResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/members/{memberId}/redemption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the redeemReward1 operation.
     * @callback module:api/LoyaltiesApi~redeemReward1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersRedemptionRedeemResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeem Reward with campaign ID
     * Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
     * @param {String} campaignId Unique campaign ID.
     * @param {String} memberId A code that identifies the loyalty card.
     * @param {{
        loyaltiesMembersRedemptionRedeemRequestBody?: module:model/LoyaltiesMembersRedemptionRedeemRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~redeemReward1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersRedemptionRedeemResponseBody}
     */
    redeemReward1(campaignId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesMembersRedemptionRedeemRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling redeemReward1");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling redeemReward1");
      }

      let pathParams = {
        'campaignId': campaignId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersRedemptionRedeemResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/members/{memberId}/redemption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferPoints operation.
     * @callback module:api/LoyaltiesApi~transferPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersTransfersCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer Loyalty Points
     * Transfer points between different loyalty cards which have holders. Provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters. In the request body, provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. Transfer works only for loyalty cards that have holders, meaning the cards were published to customers. The transferred points expire according to the target program expiration rules.
     * @param {String} campaignId A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination).
     * @param {String} memberId A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination).
     * @param {{
        loyaltiesTransferPoints?: Array.<module:model/LoyaltiesTransferPoints>,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~transferPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersTransfersCreateResponseBody}
     */
    transferPoints(campaignId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesTransferPoints'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling transferPoints");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling transferPoints");
      }

      let pathParams = {
        'campaignId': campaignId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersTransfersCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/members/{memberId}/transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEarningRule operation.
     * @callback module:api/LoyaltiesApi~updateEarningRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesEarningRulesUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Earning Rule
     * Update an earning rule definition.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {String} earningRuleId A unique earning rule ID.
     * @param {{
        loyaltiesEarningRulesUpdateRequestBody?: module:model/LoyaltiesEarningRulesUpdateRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~updateEarningRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesEarningRulesUpdateResponseBody}
     */
    updateEarningRule(campaignId, earningRuleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesEarningRulesUpdateRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateEarningRule");
      }
      // verify the required parameter 'earningRuleId' is set
      if (earningRuleId === undefined || earningRuleId === null) {
        throw new Error("Missing the required parameter 'earningRuleId' when calling updateEarningRule");
      }

      let pathParams = {
        'campaignId': campaignId,
        'earningRuleId': earningRuleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesEarningRulesUpdateResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoyaltyCardBalance operation.
     * @callback module:api/LoyaltiesApi~updateLoyaltyCardBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersBalanceUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adjust Loyalty Card Balance
     * This method gives adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   >üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.  üìò Alternative endpoint  This endpoint is an alternative to this [endpoint](/api-reference/loyalties/adjust-loyalty-card-balance-with-campaign-id). The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the campaignId as a path parameter.
     * @param {String} memberId Unique loyalty card assigned to a particular customer.
     * @param {{
        loyaltiesMembersBalanceUpdateRequestBody?: module:model/LoyaltiesMembersBalanceUpdateRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~updateLoyaltyCardBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersBalanceUpdateResponseBody}
     */
    updateLoyaltyCardBalance(memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesMembersBalanceUpdateRequestBody'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling updateLoyaltyCardBalance");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersBalanceUpdateResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/members/{memberId}/balance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoyaltyCardBalance1 operation.
     * @callback module:api/LoyaltiesApi~updateLoyaltyCardBalance1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesMembersBalanceUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adjust Loyalty Card Balance with campaign ID
     * This method adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   >üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
     * @param {String} campaignId Unique campaign ID.
     * @param {String} memberId A code that identifies the loyalty card.
     * @param {{
        loyaltiesMembersBalanceUpdateRequestBody?: module:model/LoyaltiesMembersBalanceUpdateRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~updateLoyaltyCardBalance1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesMembersBalanceUpdateResponseBody}
     */
    updateLoyaltyCardBalance1(campaignId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesMembersBalanceUpdateRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateLoyaltyCardBalance1");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling updateLoyaltyCardBalance1");
      }

      let pathParams = {
        'campaignId': campaignId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesMembersBalanceUpdateResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/members/{memberId}/balance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoyaltyProgram operation.
     * @callback module:api/LoyaltiesApi~updateLoyaltyProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesUpdateCampaignResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Loyalty Campaign
     * Updates a loyalty program.  Fields other than those specified in the allowed request body payload wont be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged.  This method will update the [loyalty cards](/api-reference/loyalties/get-member) which have not been published or redeemed yet.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {{
        loyaltiesUpdateCampaignRequestBody?: module:model/LoyaltiesUpdateCampaignRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~updateLoyaltyProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesUpdateCampaignResponseBody}
     */
    updateLoyaltyProgram(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesUpdateCampaignRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateLoyaltyProgram");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesUpdateCampaignResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRewardAssignment1 operation.
     * @callback module:api/LoyaltiesApi~updateRewardAssignment1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltiesRewardsUpdateAssignmentResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Campaign Reward Assignment
     * Updates rewards parameters, i.e. the points cost for the specific reward.
     * @param {String} campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. 
     * @param {String} assignmentId A unique reward assignment ID.
     * @param {{
        loyaltiesRewardsUpdateAssignmentRequestBody?: module:model/LoyaltiesRewardsUpdateAssignmentRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/LoyaltiesApi~updateRewardAssignment1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltiesRewardsUpdateAssignmentResponseBody}
     */
    updateRewardAssignment1(campaignId, assignmentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltiesRewardsUpdateAssignmentRequestBody'];
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateRewardAssignment1");
      }
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling updateRewardAssignment1");
      }

      let pathParams = {
        'campaignId': campaignId,
        'assignmentId': assignmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltiesRewardsUpdateAssignmentResponseBody;
      return this.apiClient.callApi(
        '/v1/loyalties/{campaignId}/rewards/{assignmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
