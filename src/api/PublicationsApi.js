/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePublicationCampaign from '../model/CreatePublicationCampaign';
import Customer from '../model/Customer';
import ParameterFiltersListPublications from '../model/ParameterFiltersListPublications';
import ParameterOrderListPublications from '../model/ParameterOrderListPublications';
import ParameterResultListPublications from '../model/ParameterResultListPublications';
import ParameterVoucherTypeListPublications from '../model/ParameterVoucherTypeListPublications';
import PublicationsCreateRequestBody from '../model/PublicationsCreateRequestBody';
import PublicationsCreateResponseBody from '../model/PublicationsCreateResponseBody';
import PublicationsListResponseBody from '../model/PublicationsListResponseBody';

/**
* Publications service.
* @module api/PublicationsApi
* @version v2018-08-01
*/
export default class PublicationsApi {

    /**
    * Constructs a new PublicationsApi. 
    * @alias module:api/PublicationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPublication operation.
     * @callback module:api/PublicationsApi~createPublicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicationsCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Publication
     * This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication. A voucher is suitable for publication when its active and hasnt been published yet.    üöß Clearly define the source of the voucher  You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.    üöß Publish multiple vouchers  In case you want to publish multiple vouchers within a single publication, you need to specify the campaign name and number of vouchers you want to publish.    üìò Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [joinOnce] Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer.
     * @param {module:model/PublicationsCreateRequestBody} [publicationsCreateRequestBody] Specify the publication parameters.
     * @param {module:api/PublicationsApi~createPublicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicationsCreateResponseBody}
     */
    createPublication(opts, callback) {
      opts = opts || {};
      let postBody = opts['publicationsCreateRequestBody'];

      let pathParams = {
      };
      let queryParams = {
        'join_once': opts['joinOnce']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicationsCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/publications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPublication1 operation.
     * @callback module:api/PublicationsApi~createPublication1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicationsCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Publication with GET
     * This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication. A voucher is suitable for publication when its active and hasnt been published yet.  ‚ùóÔ∏è Limited access  Access to this endpoint is limited. This endpoint is designed for specific integrations and the API keys need to be configured to access this endpoint. Navigate to the **Dashboard** &rarr; **Project Settings** &rarr; **General** &rarr; **Integration Keys** to set up a pair of API keys and use them to send the request.    üöß Clearly define the source of the voucher  You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.    üöß Publish multiple vouchers  This endpoint does not support the publishing of multiple vouchers from a single campaign. In case you want to publish multiple vouchers within a single publication, you need to use a [dedicated endpoint](/api-reference/publications/create-publication).    üìò Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.   # Example Request      ‚ùóÔ∏è Required    Query param voucher OR campaign MUST be filled out. If you provide both, campaign param will be skipped.
     * @param {module:model/Customer} customer Contains information about the customer to whom the publication was directed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [joinOnce] Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer.
     * @param {String} [voucher] Code of voucher being published.
     * @param {module:model/CreatePublicationCampaign} [campaign] Create publication with campaign.
     * @param {String} [sourceId] The merchants publication ID if it is different from the Voucherify publication ID. Its an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. If source_id is provided only 1 voucher can be published per request.
     * @param {Object.<String, Object>} [metadata] The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format.
     * @param {module:api/PublicationsApi~createPublication1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicationsCreateResponseBody}
     */
    createPublication1(customer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling createPublication1");
      }

      let pathParams = {
      };
      let queryParams = {
        'join_once': opts['joinOnce'],
        'voucher': opts['voucher'],
        'campaign': opts['campaign'],
        'source_id': opts['sourceId'],
        'customer': customer,
        'metadata': opts['metadata']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicationsCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/publications/create', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPublications operation.
     * @callback module:api/PublicationsApi~listPublicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicationsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Publications
     * Retrieve a list of publications. To return a **particular** publication, you can use the source_id query parameter and provide the source_id of the publication you are looking for specifically. # Pagination  üöß Important!  If you want to scroll through a huge set of records, it is recommended to use the [Exports API](/api-reference/exports/create-export). This API will return an error page_over_limit if you reach a page above 1000. # Filter Query The filters query parameter allows for joining multiple parameters with logical operators. The syntax looks as follows:  ## Examples  
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items.
     * @param {Number} [page] Which page of results to return. The lowest value is 1.
     * @param {module:model/ParameterOrderListPublications} [order] Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order.
     * @param {String} [campaign] Filters by a given campaign name.
     * @param {String} [customer] Filters by a unique customer ID.
     * @param {String} [voucher] Filters by a given voucher code.
     * @param {module:model/ParameterResultListPublications} [result] Filters by a publication result.
     * @param {module:model/ParameterVoucherTypeListPublications} [voucherType] Filters by a voucher type.
     * @param {Boolean} [isReferralCode] This filter works only for the true option. If set to true, the query returns only publications of codes from referral campaigns. 
     * @param {module:model/ParameterFiltersListPublications} [filters] Filters for listing publications.
     * @param {String} [sourceId] Using this endpoint with a particular publication source_id, which was sent with the original request to create a publication, returns in the response, exactly the same code published initially because the code was assigned to the given publication. As a result, you can use this endpoint as a reference and return a code that was assigned in a publication by using a particular source_id.
     * @param {module:api/PublicationsApi~listPublicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicationsListResponseBody}
     */
    listPublications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'order': opts['order'],
        'campaign': opts['campaign'],
        'customer': opts['customer'],
        'voucher': opts['voucher'],
        'result': opts['result'],
        'voucher_type': opts['voucherType'],
        'is_referral_code': opts['isReferralCode'],
        'filters': opts['filters'],
        'source_id': opts['sourceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicationsListResponseBody;
      return this.apiClient.callApi(
        '/v1/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
