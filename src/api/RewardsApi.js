/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Reward from '../model/Reward';
import RewardsAssignmentsCreateRequestBody from '../model/RewardsAssignmentsCreateRequestBody';
import RewardsAssignmentsCreateResponseBody from '../model/RewardsAssignmentsCreateResponseBody';
import RewardsAssignmentsGetResponseBody from '../model/RewardsAssignmentsGetResponseBody';
import RewardsAssignmentsListResponseBody from '../model/RewardsAssignmentsListResponseBody';
import RewardsAssignmentsUpdateRequestBody from '../model/RewardsAssignmentsUpdateRequestBody';
import RewardsAssignmentsUpdateResponseBody from '../model/RewardsAssignmentsUpdateResponseBody';
import RewardsCreateRequestBody from '../model/RewardsCreateRequestBody';
import RewardsCreateResponseBody from '../model/RewardsCreateResponseBody';
import RewardsListResponseBody from '../model/RewardsListResponseBody';
import RewardsUpdateRequestBody from '../model/RewardsUpdateRequestBody';
import RewardsUpdateResponseBody from '../model/RewardsUpdateResponseBody';

/**
* Rewards service.
* @module api/RewardsApi
* @version v2018-08-01
*/
export default class RewardsApi {

    /**
    * Constructs a new RewardsApi. 
    * @alias module:api/RewardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createReward operation.
     * @callback module:api/RewardsApi~createRewardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RewardsCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Reward
     * Create a new reward.
     * @param {{
        rewardsCreateRequestBody?: module:model/RewardsCreateRequestBody
     }} opts Parameters
     * @param {module:api/RewardsApi~createRewardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RewardsCreateResponseBody}
     */
    createReward(opts, callback) {
      opts = opts || {};
      let postBody = opts['rewardsCreateRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RewardsCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/rewards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRewardAssignment operation.
     * @callback module:api/RewardsApi~createRewardAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RewardsAssignmentsCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Reward Assignment
     * Assigns a reward to a specified loyalty campaign.
     * @param {String} rewardId A unique reward ID.
     * @param {{
        rewardId: String
     
        rewardsAssignmentsCreateRequestBody?: module:model/RewardsAssignmentsCreateRequestBody
     }} opts Parameters
     * @param {module:api/RewardsApi~createRewardAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RewardsAssignmentsCreateResponseBody}
     */
    createRewardAssignment(rewardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['rewardsAssignmentsCreateRequestBody'];
      // verify the required parameter 'rewardId' is set
      if (rewardId === undefined || rewardId === null) {
        throw new Error("Missing the required parameter 'rewardId' when calling createRewardAssignment");
      }

      let pathParams = {
        'rewardId': rewardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RewardsAssignmentsCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/rewards/{rewardId}/assignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReward operation.
     * @callback module:api/RewardsApi~deleteRewardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Reward
     * Delete a reward.
     * @param {String} rewardId A unique reward ID.
     * @param {module:api/RewardsApi~deleteRewardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReward(rewardId, callback) {
      let postBody = null;
      // verify the required parameter 'rewardId' is set
      if (rewardId === undefined || rewardId === null) {
        throw new Error("Missing the required parameter 'rewardId' when calling deleteReward");
      }

      let pathParams = {
        'rewardId': rewardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/rewards/{rewardId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRewardAssignment operation.
     * @callback module:api/RewardsApi~deleteRewardAssignmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Reward Assignment
     * This method deletes a reward assignment for a particular reward.
     * @param {String} rewardId A unique reward ID.
     * @param {String} assignmentId A unique reward assignment ID.
     * @param {module:api/RewardsApi~deleteRewardAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRewardAssignment(rewardId, assignmentId, callback) {
      let postBody = null;
      // verify the required parameter 'rewardId' is set
      if (rewardId === undefined || rewardId === null) {
        throw new Error("Missing the required parameter 'rewardId' when calling deleteRewardAssignment");
      }
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling deleteRewardAssignment");
      }

      let pathParams = {
        'rewardId': rewardId,
        'assignmentId': assignmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/rewards/{rewardId}/assignments/{assignmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReward operation.
     * @callback module:api/RewardsApi~getRewardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reward} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Reward
     * Retrieve a reward by the reward ID.
     * @param {String} rewardId A unique reward ID.
     * @param {module:api/RewardsApi~getRewardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reward}
     */
    getReward(rewardId, callback) {
      let postBody = null;
      // verify the required parameter 'rewardId' is set
      if (rewardId === undefined || rewardId === null) {
        throw new Error("Missing the required parameter 'rewardId' when calling getReward");
      }

      let pathParams = {
        'rewardId': rewardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Reward;
      return this.apiClient.callApi(
        '/v1/rewards/{rewardId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRewardAssignment operation.
     * @callback module:api/RewardsApi~getRewardAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RewardsAssignmentsGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Reward Assignment
     * Retrieve a reward assignment.
     * @param {String} rewardId A unique reward ID.
     * @param {String} assignmentId A unique reward assignment ID.
     * @param {module:api/RewardsApi~getRewardAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RewardsAssignmentsGetResponseBody}
     */
    getRewardAssignment(rewardId, assignmentId, callback) {
      let postBody = null;
      // verify the required parameter 'rewardId' is set
      if (rewardId === undefined || rewardId === null) {
        throw new Error("Missing the required parameter 'rewardId' when calling getRewardAssignment");
      }
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling getRewardAssignment");
      }

      let pathParams = {
        'rewardId': rewardId,
        'assignmentId': assignmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RewardsAssignmentsGetResponseBody;
      return this.apiClient.callApi(
        '/v1/rewards/{rewardId}/assignments/{assignmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRewardAssignments operation.
     * @callback module:api/RewardsApi~listRewardAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RewardsAssignmentsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Reward Assignments
     * Retrieve reward assignments by the reward ID.
     * @param {String} rewardId A unique reward ID.
     * @param {{
        rewardId: String
     
        limit?: Number
     
        page?: Number
     }} opts Parameters
     * @param {module:api/RewardsApi~listRewardAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RewardsAssignmentsListResponseBody}
     */
    listRewardAssignments(rewardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'rewardId' is set
      if (rewardId === undefined || rewardId === null) {
        throw new Error("Missing the required parameter 'rewardId' when calling listRewardAssignments");
      }

      let pathParams = {
        'rewardId': rewardId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RewardsAssignmentsListResponseBody;
      return this.apiClient.callApi(
        '/v1/rewards/{rewardId}/assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRewards operation.
     * @callback module:api/RewardsApi~listRewardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RewardsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Rewards
     * Retrieve rewards.
     * @param {{
        limit?: Number
     
        page?: Number
     
        assignmentId?: String
     }} opts Parameters
     * @param {module:api/RewardsApi~listRewardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RewardsListResponseBody}
     */
    listRewards(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'assignment_id': opts['assignmentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RewardsListResponseBody;
      return this.apiClient.callApi(
        '/v1/rewards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReward operation.
     * @callback module:api/RewardsApi~updateRewardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RewardsUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Reward
     * Update the details of a reward.
     * @param {String} rewardId A unique reward ID.
     * @param {{
        rewardId: String
     
        rewardsUpdateRequestBody?: module:model/RewardsUpdateRequestBody
     }} opts Parameters
     * @param {module:api/RewardsApi~updateRewardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RewardsUpdateResponseBody}
     */
    updateReward(rewardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['rewardsUpdateRequestBody'];
      // verify the required parameter 'rewardId' is set
      if (rewardId === undefined || rewardId === null) {
        throw new Error("Missing the required parameter 'rewardId' when calling updateReward");
      }

      let pathParams = {
        'rewardId': rewardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RewardsUpdateResponseBody;
      return this.apiClient.callApi(
        '/v1/rewards/{rewardId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRewardAssignment operation.
     * @callback module:api/RewardsApi~updateRewardAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RewardsAssignmentsUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Reward Assignment
     * Update the number of points needed to successfully redeem the reward.
     * @param {String} rewardId A unique reward ID.
     * @param {String} assignmentId A unique reward assignment ID.
     * @param {{
        rewardId: String
     
        assignmentId: String
     
        rewardsAssignmentsUpdateRequestBody?: module:model/RewardsAssignmentsUpdateRequestBody
     }} opts Parameters
     * @param {module:api/RewardsApi~updateRewardAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RewardsAssignmentsUpdateResponseBody}
     */
    updateRewardAssignment(rewardId, assignmentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['rewardsAssignmentsUpdateRequestBody'];
      // verify the required parameter 'rewardId' is set
      if (rewardId === undefined || rewardId === null) {
        throw new Error("Missing the required parameter 'rewardId' when calling updateRewardAssignment");
      }
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling updateRewardAssignment");
      }

      let pathParams = {
        'rewardId': rewardId,
        'assignmentId': assignmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RewardsAssignmentsUpdateResponseBody;
      return this.apiClient.callApi(
        '/v1/rewards/{rewardId}/assignments/{assignmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
