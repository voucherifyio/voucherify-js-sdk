/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ParameterOrder from '../model/ParameterOrder';
import ProductsCreateRequestBody from '../model/ProductsCreateRequestBody';
import ProductsCreateResponseBody from '../model/ProductsCreateResponseBody';
import ProductsGetResponseBody from '../model/ProductsGetResponseBody';
import ProductsImportCsvCreateResponseBody from '../model/ProductsImportCsvCreateResponseBody';
import ProductsListResponseBody from '../model/ProductsListResponseBody';
import ProductsMetadataUpdateInBulkRequestBody from '../model/ProductsMetadataUpdateInBulkRequestBody';
import ProductsMetadataUpdateInBulkResponseBody from '../model/ProductsMetadataUpdateInBulkResponseBody';
import ProductsSkusCreateRequestBody from '../model/ProductsSkusCreateRequestBody';
import ProductsSkusCreateResponseBody from '../model/ProductsSkusCreateResponseBody';
import ProductsSkusListResponseBody from '../model/ProductsSkusListResponseBody';
import ProductsSkusUpdateRequestBody from '../model/ProductsSkusUpdateRequestBody';
import ProductsSkusUpdateResponseBody from '../model/ProductsSkusUpdateResponseBody';
import ProductsUpdateInBulkRequestBody from '../model/ProductsUpdateInBulkRequestBody';
import ProductsUpdateInBulkResponseBody from '../model/ProductsUpdateInBulkResponseBody';
import ProductsUpdateRequestBody from '../model/ProductsUpdateRequestBody';
import ProductsUpdateResponseBody from '../model/ProductsUpdateResponseBody';
import SkusGetResponseBody from '../model/SkusGetResponseBody';
import SkusImportCsvCreateResponseBody from '../model/SkusImportCsvCreateResponseBody';

/**
* Products service.
* @module api/ProductsApi
* @version v2018-08-01
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProduct operation.
     * @callback module:api/ProductsApi~createProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Product
     * Creates a product object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the product database, Voucherify will return a related product object with updated fields.
     * @param {{
        productsCreateRequestBody?: module:model/ProductsCreateRequestBody
     }} opts Parameters
     * @param {module:api/ProductsApi~createProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsCreateResponseBody}
     */
    createProduct(opts, callback) {
      opts = opts || {};
      let postBody = opts['productsCreateRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductsCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSku operation.
     * @callback module:api/ProductsApi~createSkuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsSkusCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create SKU
     * This method adds product variants to a [created product](/api-reference/products/create-product).   ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the sku database, Voucherify will return a related sku object with updated fields.
     * @param {String} productId A Voucherify [product](/api-reference/products/get-product) ID or product source ID.
     * @param {{
        productId: String
     
        productsSkusCreateRequestBody?: module:model/ProductsSkusCreateRequestBody
     }} opts Parameters
     * @param {module:api/ProductsApi~createSkuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsSkusCreateResponseBody}
     */
    createSku(productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['productsSkusCreateRequestBody'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling createSku");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductsSkusCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/products/{productId}/skus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProduct operation.
     * @callback module:api/ProductsApi~deleteProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Product
     * Deletes a product and all related SKUs. This operation cannot be undone.  If the force parameter is set to false or not set at all, the product and all related SKUs will be moved to [the bin](/api-reference/bin/list-bin-entries).
     * @param {String} productId A Voucherify product ID or source ID.
     * @param {{
        productId: String
     
        force?: Boolean
     }} opts Parameters
     * @param {module:api/ProductsApi~deleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProduct(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/products/{productId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSku operation.
     * @callback module:api/ProductsApi~deleteSkuCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete SKU
     * Deletes a product SKU. This operation cannot be undone.  If the force parameter is set to false or not set at all, the SKU will be moved to [the bin](/api-reference/bin/list-bin-entries).
     * @param {String} productId A unique Voucherify [product](/api-reference/products/get-product) ID or product source ID.
     * @param {String} skuId A Voucherify [SKU ID](/api-reference/products/get-sku) or SKU source ID.
     * @param {{
        productId: String
     
        skuId: String
     
        force?: Boolean
     }} opts Parameters
     * @param {module:api/ProductsApi~deleteSkuCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSku(productId, skuId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteSku");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling deleteSku");
      }

      let pathParams = {
        'productId': productId,
        'skuId': skuId
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/products/{productId}/skus/{skuId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProduct operation.
     * @callback module:api/ProductsApi~getProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product
     * Retrieve details of a given product and its SKUs, if any.
     * @param {String} productId A Voucherify product ID or source ID.
     * @param {module:api/ProductsApi~getProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsGetResponseBody}
     */
    getProduct(productId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductsGetResponseBody;
      return this.apiClient.callApi(
        '/v1/products/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSku operation.
     * @callback module:api/ProductsApi~getSkuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkusGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get SKU
     * Retrieve details of a SKU.
     * @param {String} skuId A Voucherify SKU identifier or SKU source ID.
     * @param {module:api/ProductsApi~getSkuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkusGetResponseBody}
     */
    getSku(skuId, callback) {
      let postBody = null;
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling getSku");
      }

      let pathParams = {
        'skuId': skuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkusGetResponseBody;
      return this.apiClient.callApi(
        '/v1/skus/{skuId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importProductsUsingCsv operation.
     * @callback module:api/ProductsApi~importProductsUsingCsvCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsImportCsvCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Products using CSV
     * Import products into the repository using a CSV file. The CSV file has to include headers in the first line.  ðŸ“˜ Standard product fields mapping  - Create a **comma separated value (CSV) file** or download our CSV import template. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b82ed68d51e779443f550/Import_products_template.csv).  - Supported CSV file headers: name,source_id,price,attributes,image_url,Metadata_property_name  - **Name** is a **required** field. The remaining fields in the CSV template are optional.  - Override/Update products **names** in Voucherify using this method. Data will be updated for each product included in the CSV file whose **source_id** matches a source ID in Voucherify. No other data can be updated other than the product name.  - Note that dates and date-time attributes need to be provided in compliance with the **ISO 8601 norms**. For example, 2022-03-11T09:00:00.000Z or 2022-03-11     - YYYY-MM-DD     - YYYY-MM-DDTHH     - YYYY-MM-DDTHH:mm     - YYYY-MM-DDTHH:mm:ss     - YYYY-MM-DDTHH:mm:ssZ     - YYYY-MM-DDTHH:mm:ssZ     - YYYY-MM-DDTHH:mm:ss.SSSZ  - Columns that cannot be mapped to standard fields, will be mapped to **Custom attributes** and added as **products metadata**. There is no limit on the number of custom attributes that you can import as metadata.   - To provide the proper data type, you need to add all custom attributes to the metadata schema **before importing the file**. Read more [here](https://support.voucherify.io/article/99-schema-validation-metadata#add-metadata).  - **Product attributes** (not custom attributes) need to be separated by a comma and enclosed in double quotes, i.e attribute1,attribute2.  - Headers with metadata names **cant contain white-space characters**.  - If you import metadata defined in the schema as **arrays (multiple)**, you need to separate each value using a comma, for example:       - array of strings: subscribed,premium       - array of numbers: 123,234.      - array of dates: 2000-01-01,2000-01-02 This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this [API request](/api-reference/async-actions/get-async-action).
     * @param {{
        file?: File
     }} opts Parameters
     * @param {module:api/ProductsApi~importProductsUsingCsvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsImportCsvCreateResponseBody}
     */
    importProductsUsingCsv(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ProductsImportCsvCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/products/importCSV', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSKUsUsingCsv operation.
     * @callback module:api/ProductsApi~importSKUsUsingCsvCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkusImportCsvCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import SKUs using CSV
     * Import SKUs into the repository using a CSV file. The CSV file has to include headers in the first line. All properties which cannot be mapped to standard SKU fields will be added to the metadata object. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b98d08c9b585083488a4c/Import_SKUS_template.csv).   ðŸš§ Import sequence  First import products using the [dedicated endpoint](/api-reference/products/import-products-using-csv), then import SKUs using this endpoint to properly match SKUs to products.  ðŸ“˜ Standard SKU fields mapping  - **Required** fields are source_id and product_id.  - Supported CSV file headers: product_id,sku,source_id,price,image_url,attributes  - SKU **source_id** must be unique in the entire product catalog, no duplicates are allowed.  - SKU attributes need to be in the form of a stringy-fied json, i.e.{color:blue}. These attributes must be defined in the **product** beforehand so you can import them to the SKU.  - You can use this method to update the following parameters in bulk: **sku** and the sku **price**.  - Columns that cannot be mapped to standard fields will be mapped to Custom attributes and added as product metadata. There is no limit on the number of custom attributes that you can import as metadata. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this [API request](/api-reference/async-actions/get-async-action).
     * @param {{
        file?: File
     }} opts Parameters
     * @param {module:api/ProductsApi~importSKUsUsingCsvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkusImportCsvCreateResponseBody}
     */
    importSKUsUsingCsv(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SkusImportCsvCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/skus/importCSV', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProducts operation.
     * @callback module:api/ProductsApi~listProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Products
     * Retrieve a list of products.
     * @param {{
        limit?: Number
     
        page?: Number
     
        order?: module:model/ParameterOrder
     
        startDate?: Date
     
        endDate?: Date
     }} opts Parameters
     * @param {module:api/ProductsApi~listProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsListResponseBody}
     */
    listProducts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'order': opts['order'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductsListResponseBody;
      return this.apiClient.callApi(
        '/v1/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSKUsInProduct operation.
     * @callback module:api/ProductsApi~listSKUsInProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsSkusListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List SKUs in Product
     * Retrieve all SKUs for a given product.
     * @param {String} productId A Voucherify [product](/api-reference/products/get-product) ID or product source ID.
     * @param {{
        productId: String
     
        limit?: Number
     
        page?: Number
     
        order?: module:model/ParameterOrder
     
        startDate?: Date
     
        endDate?: Date
     }} opts Parameters
     * @param {module:api/ProductsApi~listSKUsInProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsSkusListResponseBody}
     */
    listSKUsInProduct(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling listSKUsInProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'order': opts['order'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductsSkusListResponseBody;
      return this.apiClient.callApi(
        '/v1/products/{productId}/skus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProduct operation.
     * @callback module:api/ProductsApi~updateProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Product
     * Updates the specified product by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
     * @param {String} productId A Voucherify product ID or source ID.
     * @param {{
        productId: String
     
        productsUpdateRequestBody?: module:model/ProductsUpdateRequestBody
     }} opts Parameters
     * @param {module:api/ProductsApi~updateProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsUpdateResponseBody}
     */
    updateProduct(productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['productsUpdateRequestBody'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductsUpdateResponseBody;
      return this.apiClient.callApi(
        '/v1/products/{productId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductsInBulk operation.
     * @callback module:api/ProductsApi~updateProductsInBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsUpdateInBulkResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Products in Bulk
     * Update products in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the [GET Async Action](/api-reference/async-actions/get-async-action) endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
     * @param {{
        productsUpdateInBulkRequestBody?: Array.<module:model/ProductsUpdateInBulkRequestBody>
     }} opts Parameters
     * @param {module:api/ProductsApi~updateProductsInBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsUpdateInBulkResponseBody}
     */
    updateProductsInBulk(opts, callback) {
      opts = opts || {};
      let postBody = opts['productsUpdateInBulkRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductsUpdateInBulkResponseBody;
      return this.apiClient.callApi(
        '/v1/products/bulk/async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductsMetadataInBulk operation.
     * @callback module:api/ProductsApi~updateProductsMetadataInBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsMetadataUpdateInBulkResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Products' Metadata in Bulk
     * Updates metadata parameters for a list of products. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the [GET Async Action](/api-reference/async-actions/get-async-action) endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
     * @param {{
        productsMetadataUpdateInBulkRequestBody?: module:model/ProductsMetadataUpdateInBulkRequestBody
     }} opts Parameters
     * @param {module:api/ProductsApi~updateProductsMetadataInBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsMetadataUpdateInBulkResponseBody}
     */
    updateProductsMetadataInBulk(opts, callback) {
      opts = opts || {};
      let postBody = opts['productsMetadataUpdateInBulkRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductsMetadataUpdateInBulkResponseBody;
      return this.apiClient.callApi(
        '/v1/products/metadata/async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSku operation.
     * @callback module:api/ProductsApi~updateSkuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsSkusUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update SKU
     * Updates the specified SKU by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. Fields other than the ones listed in the request body schema wont be modified. Even if provided, they will be silently skipped.
     * @param {String} productId A unique Voucherify [product](/api-reference/products/get-product) ID or product source ID.
     * @param {String} skuId A Voucherify [SKU ID](/api-reference/products/get-sku) or SKU source ID.
     * @param {{
        productId: String
     
        skuId: String
     
        productsSkusUpdateRequestBody?: module:model/ProductsSkusUpdateRequestBody
     }} opts Parameters
     * @param {module:api/ProductsApi~updateSkuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsSkusUpdateResponseBody}
     */
    updateSku(productId, skuId, opts, callback) {
      opts = opts || {};
      let postBody = opts['productsSkusUpdateRequestBody'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling updateSku");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling updateSku");
      }

      let pathParams = {
        'productId': productId,
        'skuId': skuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductsSkusUpdateResponseBody;
      return this.apiClient.callApi(
        '/v1/products/{productId}/skus/{skuId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
