/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OrdersCreateRequestBody from '../model/OrdersCreateRequestBody';
import OrdersCreateResponseBody from '../model/OrdersCreateResponseBody';
import OrdersExportCreateRequestBody from '../model/OrdersExportCreateRequestBody';
import OrdersExportCreateResponseBody from '../model/OrdersExportCreateResponseBody';
import OrdersGetResponseBody from '../model/OrdersGetResponseBody';
import OrdersImportCreateRequestBodyItem from '../model/OrdersImportCreateRequestBodyItem';
import OrdersImportCreateResponseBody from '../model/OrdersImportCreateResponseBody';
import OrdersListResponseBody from '../model/OrdersListResponseBody';
import OrdersUpdateRequestBody from '../model/OrdersUpdateRequestBody';
import OrdersUpdateResponseBody from '../model/OrdersUpdateResponseBody';
import ParameterOrderListOrders from '../model/ParameterOrderListOrders';

/**
* Orders service.
* @module api/OrdersApi
* @version v2018-08-01
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrder operation.
     * @callback module:api/OrdersApi~createOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Order
     * Creates an order object and triggers an order creation event.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the order database, Voucherify will return a related order object with updated fields.
     * @param {{
        ordersCreateRequestBody?: module:model/OrdersCreateRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/OrdersApi~createOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersCreateResponseBody}
     */
    createOrder(opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersCreateRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrderExport operation.
     * @callback module:api/OrdersApi~createOrderExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersExportCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Orders Export
     * Creates a downloadable CSV file containing a list of orders. The parameters listed in the payload resembles headers in the CSV file. To include a parameter to the file, add it to the parameters.fields object in the request body. The available filters are all [order object](/api-reference/orders/order-calculated-object) attributes. Additionally, any metadata defined in the metadata schema can be exported. Passing an empty JSON will generate a file containing three default fields: id, source_id, and status. The fields array is an array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combination of any of the following available fields:    
     * @param {{
        ordersExportCreateRequestBody?: module:model/OrdersExportCreateRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/OrdersApi~createOrderExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersExportCreateResponseBody}
     */
    createOrderExport(opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersExportCreateRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersExportCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/orders/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrder operation.
     * @callback module:api/OrdersApi~getOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Order
     * Retrieve a specific order by passing its ID.
     * @param {String} orderId Unique Voucherify order ID or order source ID.
     * @param {module:api/OrdersApi~getOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersGetResponseBody}
     */
    getOrder(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrder");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrdersGetResponseBody;
      return this.apiClient.callApi(
        '/v1/orders/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importOrders operation.
     * @callback module:api/OrdersApi~importOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersImportCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Orders
     *   ðŸš§ Historical orders  This endpoint should only be used to import historical orders into Voucherify. For on-going synchronization, the [update order](/api-reference/orders/update-order) endpoints should be used. This is critical because this endpoint does not store events or launch distributions. # Limitations ## Import volume There can be only a single on-going order import per tenant per project at a given time. The user can schedule more imports but those extra imports will be scheduled to run in sequence one by one.   ## Maximum count of orders in single import There is a 2000 limit but we might decide to change it to a lower / higher value at any given time depending if we find this value is too high or too low with time. # Notifications There are no notifications on the Dashboard because this import is launched via the API. # Triggered actions    If you import orders with customers, then a logic will be scheduled responsible for placing these customers into segments and refreshing the segments summary. Consequently, this update will trigger  - **customers entering into segments**  - **distributions** based on any rules tied to customer entering segment(s) - **earning rules** based on the customer entering segment(s) # What is not triggered 1. No webhooks are triggered during the import of orders - for both orders and upserted products / SKUs.   2. Distributions based on Order Update, Order Paid, Order Created and Order Cancelled. In other words if you have a distribution based on Order Paid and you import an order with a PAID status, the distribution is not going to be triggered.     3. No events are created during the import of orders - for both orders and upserted products / SKUs. In other words you wont see any events in the Activity tab in the Dashboard such as Order created or Order paid. If you are additionally upserting products / SKUs, then you wont see the Product created events listed, etc.    4. Earning rules based on Order Paid wont be triggered. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request with [GET Async Action](/api-reference/async-actions/get-async-action) endpoint.
     * @param {{
        ordersImportCreateRequestBodyItem?: Array.<module:model/OrdersImportCreateRequestBodyItem>,
     }} [opts] Optional parameters
     * @param {module:api/OrdersApi~importOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersImportCreateResponseBody}
     */
    importOrders(opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersImportCreateRequestBodyItem'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersImportCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/orders/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrders operation.
     * @callback module:api/OrdersApi~listOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Orders
     * Returns a list of orders. 
     * @param {{
        limit?: Number,
        page?: Number,
        order?: module:model/ParameterOrderListOrders,
     }} [opts] Optional parameters
     * @param {module:api/OrdersApi~listOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersListResponseBody}
     */
    listOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrdersListResponseBody;
      return this.apiClient.callApi(
        '/v1/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrder operation.
     * @callback module:api/OrdersApi~updateOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersUpdateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Order
     * Updates the specified order by setting the values of the parameters passed in the request body. Any parameters not provided will be left unchanged.
     * @param {String} orderId Unique Voucherify order ID or order source ID.
     * @param {{
        ordersUpdateRequestBody?: module:model/OrdersUpdateRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/OrdersApi~updateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersUpdateResponseBody}
     */
    updateOrder(orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersUpdateRequestBody'];
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling updateOrder");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersUpdateResponseBody;
      return this.apiClient.callApi(
        '/v1/orders/{orderId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
