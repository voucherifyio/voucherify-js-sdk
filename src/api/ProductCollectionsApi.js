/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ParameterOrder from '../model/ParameterOrder';
import ProductCollectionsCreateRequestBody from '../model/ProductCollectionsCreateRequestBody';
import ProductCollectionsCreateResponseBody from '../model/ProductCollectionsCreateResponseBody';
import ProductCollectionsGetResponseBody from '../model/ProductCollectionsGetResponseBody';
import ProductCollectionsListResponseBody from '../model/ProductCollectionsListResponseBody';
import ProductCollectionsProductsListResponseBody from '../model/ProductCollectionsProductsListResponseBody';

/**
* ProductCollections service.
* @module api/ProductCollectionsApi
* @version v2018-08-01
*/
export default class ProductCollectionsApi {

    /**
    * Constructs a new ProductCollectionsApi. 
    * @alias module:api/ProductCollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProductCollection operation.
     * @callback module:api/ProductCollectionsApi~createProductCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCollectionsCreateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Product Collection
     * This method creates a new product collection.
     * @param {{
        productCollectionsCreateRequestBody?: module:model/ProductCollectionsCreateRequestBody,
     }} [opts] Optional parameters
     * @param {module:api/ProductCollectionsApi~createProductCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCollectionsCreateResponseBody}
     */
    createProductCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['productCollectionsCreateRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductCollectionsCreateResponseBody;
      return this.apiClient.callApi(
        '/v1/product-collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductCollection operation.
     * @callback module:api/ProductCollectionsApi~deleteProductCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Product Collection
     * This method deletes a product collection.
     * @param {String} productCollectionId A unique product collection ID.
     * @param {module:api/ProductCollectionsApi~deleteProductCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProductCollection(productCollectionId, callback) {
      let postBody = null;
      // verify the required parameter 'productCollectionId' is set
      if (productCollectionId === undefined || productCollectionId === null) {
        throw new Error("Missing the required parameter 'productCollectionId' when calling deleteProductCollection");
      }

      let pathParams = {
        'productCollectionId': productCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/product-collections/{productCollectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductCollection operation.
     * @callback module:api/ProductCollectionsApi~getProductCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCollectionsGetResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Collection
     * Retrieves the product collection.
     * @param {String} productCollectionId A unique product collection ID.
     * @param {module:api/ProductCollectionsApi~getProductCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCollectionsGetResponseBody}
     */
    getProductCollection(productCollectionId, callback) {
      let postBody = null;
      // verify the required parameter 'productCollectionId' is set
      if (productCollectionId === undefined || productCollectionId === null) {
        throw new Error("Missing the required parameter 'productCollectionId' when calling getProductCollection");
      }

      let pathParams = {
        'productCollectionId': productCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCollectionsGetResponseBody;
      return this.apiClient.callApi(
        '/v1/product-collections/{productCollectionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductCollections operation.
     * @callback module:api/ProductCollectionsApi~listProductCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCollectionsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Product Collections
     * This method returns a list of product collections.
     * @param {{
        limit?: Number,
        page?: Number,
        order?: module:model/ParameterOrder,
     }} [opts] Optional parameters
     * @param {module:api/ProductCollectionsApi~listProductCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCollectionsListResponseBody}
     */
    listProductCollections(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCollectionsListResponseBody;
      return this.apiClient.callApi(
        '/v1/product-collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductsInCollection operation.
     * @callback module:api/ProductCollectionsApi~listProductsInCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCollectionsProductsListResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Products in Collection
     * Retrieves list of products from a product collection; works for both dynamic and static product collections.
     * @param {String} productCollectionId Unique product collection ID.
     * @param {{
        limit?: Number,
        page?: Number,
        order?: module:model/ParameterOrder,
        startingAfter?: Date,
     }} [opts] Optional parameters
     * @param {module:api/ProductCollectionsApi~listProductsInCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCollectionsProductsListResponseBody}
     */
    listProductsInCollection(productCollectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productCollectionId' is set
      if (productCollectionId === undefined || productCollectionId === null) {
        throw new Error("Missing the required parameter 'productCollectionId' when calling listProductsInCollection");
      }

      let pathParams = {
        'productCollectionId': productCollectionId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'order': opts['order'],
        'starting_after': opts['startingAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-App-Id', 'X-App-Token', 'X-Voucherify-OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCollectionsProductsListResponseBody;
      return this.apiClient.callApi(
        '/v1/product-collections/{productCollectionId}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
