/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RedemptionEntryChannel from './RedemptionEntryChannel';
import RedemptionEntryCustomer from './RedemptionEntryCustomer';
import RedemptionEntryGift from './RedemptionEntryGift';
import RedemptionEntryLoyaltyCard from './RedemptionEntryLoyaltyCard';
import RedemptionEntryOrder from './RedemptionEntryOrder';
import RedemptionEntryPromotionTier from './RedemptionEntryPromotionTier';
import RedemptionEntryRelatedRedemptions from './RedemptionEntryRelatedRedemptions';
import RedemptionEntrySession from './RedemptionEntrySession';
import RedemptionEntryVoucher from './RedemptionEntryVoucher';
import RedemptionRewardResult from './RedemptionRewardResult';

/**
 * The RedemptionEntry model module.
 * @module model/RedemptionEntry
 * @version v2018-08-01
 */
class RedemptionEntry {
    /**
     * Constructs a new <code>RedemptionEntry</code>.
     * @alias module:model/RedemptionEntry
     */
    constructor() { 
        
        RedemptionEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RedemptionEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedemptionEntry} obj Optional instance to populate.
     * @return {module:model/RedemptionEntry} The populated <code>RedemptionEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedemptionEntry();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('tracking_id')) {
                obj['tracking_id'] = ApiClient.convertToType(data['tracking_id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('redemption')) {
                obj['redemption'] = ApiClient.convertToType(data['redemption'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('session')) {
                obj['session'] = RedemptionEntrySession.constructFromObject(data['session']);
            }
            if (data.hasOwnProperty('related_redemptions')) {
                obj['related_redemptions'] = RedemptionEntryRelatedRedemptions.constructFromObject(data['related_redemptions']);
            }
            if (data.hasOwnProperty('failure_code')) {
                obj['failure_code'] = ApiClient.convertToType(data['failure_code'], 'String');
            }
            if (data.hasOwnProperty('failure_message')) {
                obj['failure_message'] = ApiClient.convertToType(data['failure_message'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = RedemptionEntryOrder.constructFromObject(data['order']);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = RedemptionEntryChannel.constructFromObject(data['channel']);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = RedemptionEntryCustomer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('related_object_type')) {
                obj['related_object_type'] = ApiClient.convertToType(data['related_object_type'], 'String');
            }
            if (data.hasOwnProperty('related_object_id')) {
                obj['related_object_id'] = ApiClient.convertToType(data['related_object_id'], 'String');
            }
            if (data.hasOwnProperty('promotion_tier')) {
                obj['promotion_tier'] = RedemptionEntryPromotionTier.constructFromObject(data['promotion_tier']);
            }
            if (data.hasOwnProperty('reward')) {
                obj['reward'] = RedemptionRewardResult.constructFromObject(data['reward']);
            }
            if (data.hasOwnProperty('gift')) {
                obj['gift'] = RedemptionEntryGift.constructFromObject(data['gift']);
            }
            if (data.hasOwnProperty('loyalty_card')) {
                obj['loyalty_card'] = RedemptionEntryLoyaltyCard.constructFromObject(data['loyalty_card']);
            }
            if (data.hasOwnProperty('voucher')) {
                obj['voucher'] = RedemptionEntryVoucher.constructFromObject(data['voucher']);
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedemptionEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedemptionEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['tracking_id'] && !(typeof data['tracking_id'] === 'string' || data['tracking_id'] instanceof String)) {
            throw new Error("Expected the field `tracking_id` to be a primitive type in the JSON string but got " + data['tracking_id']);
        }
        // ensure the json data is a string
        if (data['redemption'] && !(typeof data['redemption'] === 'string' || data['redemption'] instanceof String)) {
            throw new Error("Expected the field `redemption` to be a primitive type in the JSON string but got " + data['redemption']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `session`
        if (data['session']) { // data not null
          RedemptionEntrySession.validateJSON(data['session']);
        }
        // validate the optional field `related_redemptions`
        if (data['related_redemptions']) { // data not null
          RedemptionEntryRelatedRedemptions.validateJSON(data['related_redemptions']);
        }
        // ensure the json data is a string
        if (data['failure_code'] && !(typeof data['failure_code'] === 'string' || data['failure_code'] instanceof String)) {
            throw new Error("Expected the field `failure_code` to be a primitive type in the JSON string but got " + data['failure_code']);
        }
        // ensure the json data is a string
        if (data['failure_message'] && !(typeof data['failure_message'] === 'string' || data['failure_message'] instanceof String)) {
            throw new Error("Expected the field `failure_message` to be a primitive type in the JSON string but got " + data['failure_message']);
        }
        // validate the optional field `order`
        if (data['order']) { // data not null
          RedemptionEntryOrder.validateJSON(data['order']);
        }
        // validate the optional field `channel`
        if (data['channel']) { // data not null
          RedemptionEntryChannel.validateJSON(data['channel']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          RedemptionEntryCustomer.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['related_object_type'] && !(typeof data['related_object_type'] === 'string' || data['related_object_type'] instanceof String)) {
            throw new Error("Expected the field `related_object_type` to be a primitive type in the JSON string but got " + data['related_object_type']);
        }
        // ensure the json data is a string
        if (data['related_object_id'] && !(typeof data['related_object_id'] === 'string' || data['related_object_id'] instanceof String)) {
            throw new Error("Expected the field `related_object_id` to be a primitive type in the JSON string but got " + data['related_object_id']);
        }
        // validate the optional field `promotion_tier`
        if (data['promotion_tier']) { // data not null
          RedemptionEntryPromotionTier.validateJSON(data['promotion_tier']);
        }
        // validate the optional field `reward`
        if (data['reward']) { // data not null
          RedemptionRewardResult.validateJSON(data['reward']);
        }
        // validate the optional field `gift`
        if (data['gift']) { // data not null
          RedemptionEntryGift.validateJSON(data['gift']);
        }
        // validate the optional field `loyalty_card`
        if (data['loyalty_card']) { // data not null
          RedemptionEntryLoyaltyCard.validateJSON(data['loyalty_card']);
        }
        // validate the optional field `voucher`
        if (data['voucher']) { // data not null
          RedemptionEntryVoucher.validateJSON(data['voucher']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
RedemptionEntry.prototype['id'] = undefined;

/**
 * @member {module:model/RedemptionEntry.ObjectEnum} object
 */
RedemptionEntry.prototype['object'] = undefined;

/**
 * Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format.
 * @member {Date} date
 */
RedemptionEntry.prototype['date'] = undefined;

/**
 * Unique customer ID of the redeeming customer.
 * @member {String} customer_id
 */
RedemptionEntry.prototype['customer_id'] = undefined;

/**
 * Hashed customer source ID.
 * @member {String} tracking_id
 */
RedemptionEntry.prototype['tracking_id'] = undefined;

/**
 * The metadata object stores all custom attributes assigned to the redemption.
 * @member {Object} metadata
 */
RedemptionEntry.prototype['metadata'] = undefined;

/**
 * For gift cards, this is a positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the number of redeemed credits. For loyalty cards, this is the number of loyalty points used in the transaction. and For gift cards, this represents the number of the credits restored to the card in the rolledback redemption. The number is a negative integer in the smallest currency unit, e.g. -100 cents for $1.00 added back to the card. For loyalty cards, this represents the number of loyalty points restored to the card in the rolledback redemption. The number is a negative integer.
 * @member {Number} amount
 */
RedemptionEntry.prototype['amount'] = undefined;

/**
 * Unique redemption ID of the parent redemption.
 * @member {String} redemption
 */
RedemptionEntry.prototype['redemption'] = undefined;

/**
 * Redemption result.
 * @member {module:model/RedemptionEntry.ResultEnum} result
 */
RedemptionEntry.prototype['result'] = undefined;

/**
 * @member {module:model/RedemptionEntry.StatusEnum} status
 */
RedemptionEntry.prototype['status'] = undefined;

/**
 * @member {module:model/RedemptionEntrySession} session
 */
RedemptionEntry.prototype['session'] = undefined;

/**
 * @member {module:model/RedemptionEntryRelatedRedemptions} related_redemptions
 */
RedemptionEntry.prototype['related_redemptions'] = undefined;

/**
 * If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed.
 * @member {String} failure_code
 */
RedemptionEntry.prototype['failure_code'] = undefined;

/**
 * If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed.
 * @member {String} failure_message
 */
RedemptionEntry.prototype['failure_message'] = undefined;

/**
 * @member {module:model/RedemptionEntryOrder} order
 */
RedemptionEntry.prototype['order'] = undefined;

/**
 * @member {module:model/RedemptionEntryChannel} channel
 */
RedemptionEntry.prototype['channel'] = undefined;

/**
 * @member {module:model/RedemptionEntryCustomer} customer
 */
RedemptionEntry.prototype['customer'] = undefined;

/**
 * Defines the related object.
 * @member {module:model/RedemptionEntry.RelatedObjectTypeEnum} related_object_type
 */
RedemptionEntry.prototype['related_object_type'] = undefined;

/**
 * @member {String} related_object_id
 */
RedemptionEntry.prototype['related_object_id'] = undefined;

/**
 * @member {module:model/RedemptionEntryPromotionTier} promotion_tier
 */
RedemptionEntry.prototype['promotion_tier'] = undefined;

/**
 * @member {module:model/RedemptionRewardResult} reward
 */
RedemptionEntry.prototype['reward'] = undefined;

/**
 * @member {module:model/RedemptionEntryGift} gift
 */
RedemptionEntry.prototype['gift'] = undefined;

/**
 * @member {module:model/RedemptionEntryLoyaltyCard} loyalty_card
 */
RedemptionEntry.prototype['loyalty_card'] = undefined;

/**
 * @member {module:model/RedemptionEntryVoucher} voucher
 */
RedemptionEntry.prototype['voucher'] = undefined;

/**
 * System generated cause for the redemption being invalid in the context of the provided parameters.
 * @member {String} reason
 */
RedemptionEntry.prototype['reason'] = undefined;





/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
RedemptionEntry['ObjectEnum'] = {

    /**
     * value: "redemption"
     * @const
     */
    "redemption": "redemption",

    /**
     * value: "redemption_rollback"
     * @const
     */
    "redemption_rollback": "redemption_rollback"
};


/**
 * Allowed values for the <code>result</code> property.
 * @enum {String}
 * @readonly
 */
RedemptionEntry['ResultEnum'] = {

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "FAILURE"
     * @const
     */
    "FAILURE": "FAILURE"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
RedemptionEntry['StatusEnum'] = {

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "ROLLED_BACK"
     * @const
     */
    "ROLLED_BACK": "ROLLED_BACK"
};


/**
 * Allowed values for the <code>related_object_type</code> property.
 * @enum {String}
 * @readonly
 */
RedemptionEntry['RelatedObjectTypeEnum'] = {

    /**
     * value: "voucher"
     * @const
     */
    "voucher": "voucher",

    /**
     * value: "promotion_tier"
     * @const
     */
    "promotion_tier": "promotion_tier",

    /**
     * value: "redemption"
     * @const
     */
    "redemption": "redemption"
};



export default RedemptionEntry;

