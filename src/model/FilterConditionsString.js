/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FilterConditionsString model module.
 * @module model/FilterConditionsString
 * @version v2018-08-01
 */
class FilterConditionsString {
    /**
     * Constructs a new <code>FilterConditionsString</code>.
     * Data filters used to narrow down the data records to be returned in the result.
     * @alias module:model/FilterConditionsString
     */
    constructor() { 
        
        FilterConditionsString.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FilterConditionsString</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilterConditionsString} obj Optional instance to populate.
     * @return {module:model/FilterConditionsString} The populated <code>FilterConditionsString</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilterConditionsString();

            if (data.hasOwnProperty('$in')) {
                obj['$in'] = ApiClient.convertToType(data['$in'], ['String']);
            }
            if (data.hasOwnProperty('$not_in')) {
                obj['$not_in'] = ApiClient.convertToType(data['$not_in'], ['String']);
            }
            if (data.hasOwnProperty('$is')) {
                obj['$is'] = ApiClient.convertToType(data['$is'], 'String');
            }
            if (data.hasOwnProperty('$is_not')) {
                obj['$is_not'] = ApiClient.convertToType(data['$is_not'], 'String');
            }
            if (data.hasOwnProperty('$has_value')) {
                obj['$has_value'] = ApiClient.convertToType(data['$has_value'], 'String');
            }
            if (data.hasOwnProperty('$is_unknown')) {
                obj['$is_unknown'] = ApiClient.convertToType(data['$is_unknown'], 'String');
            }
            if (data.hasOwnProperty('$starts_with')) {
                obj['$starts_with'] = ApiClient.convertToType(data['$starts_with'], 'String');
            }
            if (data.hasOwnProperty('$ends_with')) {
                obj['$ends_with'] = ApiClient.convertToType(data['$ends_with'], 'String');
            }
            if (data.hasOwnProperty('$contains')) {
                obj['$contains'] = ApiClient.convertToType(data['$contains'], 'String');
            }
            if (data.hasOwnProperty('$not_contain')) {
                obj['$not_contain'] = ApiClient.convertToType(data['$not_contain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FilterConditionsString</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FilterConditionsString</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['$in'])) {
            throw new Error("Expected the field `$in` to be an array in the JSON data but got " + data['$in']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['$not_in'])) {
            throw new Error("Expected the field `$not_in` to be an array in the JSON data but got " + data['$not_in']);
        }
        // ensure the json data is a string
        if (data['$is'] && !(typeof data['$is'] === 'string' || data['$is'] instanceof String)) {
            throw new Error("Expected the field `$is` to be a primitive type in the JSON string but got " + data['$is']);
        }
        // ensure the json data is a string
        if (data['$is_not'] && !(typeof data['$is_not'] === 'string' || data['$is_not'] instanceof String)) {
            throw new Error("Expected the field `$is_not` to be a primitive type in the JSON string but got " + data['$is_not']);
        }
        // ensure the json data is a string
        if (data['$has_value'] && !(typeof data['$has_value'] === 'string' || data['$has_value'] instanceof String)) {
            throw new Error("Expected the field `$has_value` to be a primitive type in the JSON string but got " + data['$has_value']);
        }
        // ensure the json data is a string
        if (data['$is_unknown'] && !(typeof data['$is_unknown'] === 'string' || data['$is_unknown'] instanceof String)) {
            throw new Error("Expected the field `$is_unknown` to be a primitive type in the JSON string but got " + data['$is_unknown']);
        }
        // ensure the json data is a string
        if (data['$starts_with'] && !(typeof data['$starts_with'] === 'string' || data['$starts_with'] instanceof String)) {
            throw new Error("Expected the field `$starts_with` to be a primitive type in the JSON string but got " + data['$starts_with']);
        }
        // ensure the json data is a string
        if (data['$ends_with'] && !(typeof data['$ends_with'] === 'string' || data['$ends_with'] instanceof String)) {
            throw new Error("Expected the field `$ends_with` to be a primitive type in the JSON string but got " + data['$ends_with']);
        }
        // ensure the json data is a string
        if (data['$contains'] && !(typeof data['$contains'] === 'string' || data['$contains'] instanceof String)) {
            throw new Error("Expected the field `$contains` to be a primitive type in the JSON string but got " + data['$contains']);
        }
        // ensure the json data is a string
        if (data['$not_contain'] && !(typeof data['$not_contain'] === 'string' || data['$not_contain'] instanceof String)) {
            throw new Error("Expected the field `$not_contain` to be a primitive type in the JSON string but got " + data['$not_contain']);
        }

        return true;
    }


}



/**
 * Array of resource values that should be included in the results (multiple values).
 * @member {Array.<String>} $in
 */
FilterConditionsString.prototype['$in'] = undefined;

/**
 * Array of resource values that should be included in the results (multiple values).
 * @member {Array.<String>} $not_in
 */
FilterConditionsString.prototype['$not_in'] = undefined;

/**
 * Value is exactly this value (single value).
 * @member {String} $is
 */
FilterConditionsString.prototype['$is'] = undefined;

/**
 * Results omit this value (single value).
 * @member {String} $is_not
 */
FilterConditionsString.prototype['$is_not'] = undefined;

/**
 * Value is NOT null. The value for this parameter is an empty string.
 * @member {String} $has_value
 */
FilterConditionsString.prototype['$has_value'] = undefined;

/**
 * Value is null. The value for this parameter is an empty string.
 * @member {String} $is_unknown
 */
FilterConditionsString.prototype['$is_unknown'] = undefined;

/**
 * Value starts with the specified string.
 * @member {String} $starts_with
 */
FilterConditionsString.prototype['$starts_with'] = undefined;

/**
 * Value ends with the specified string.
 * @member {String} $ends_with
 */
FilterConditionsString.prototype['$ends_with'] = undefined;

/**
 * Value includes the specified string.
 * @member {String} $contains
 */
FilterConditionsString.prototype['$contains'] = undefined;

/**
 * Value does NOT include the specified string.
 * @member {String} $not_contain
 */
FilterConditionsString.prototype['$not_contain'] = undefined;






export default FilterConditionsString;

