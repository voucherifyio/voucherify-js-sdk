/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BundleIdentifiedItem model module.
 * @module model/BundleIdentifiedItem
 * @version v2018-08-01
 */
class BundleIdentifiedItem {
    /**
     * Constructs a new <code>BundleIdentifiedItem</code>.
     * Determines a product from the customer&#39;s order items that meets bundle conditions.
     * @alias module:model/BundleIdentifiedItem
     * @param id {String} Unique identifier of the product or SKU that meets the bundle condition. This is an ID assigned by Voucherify.
     * @param object {module:model/BundleIdentifiedItem.ObjectEnum} Determines the type of the object that meets the bundle condition.
     * @param itemIndex {Number} Number assigned to the order line item in accordance with the order sent in the request. It starts with `0` for the first order line item in the request.
     * @param itemQuantity {Number} Quantity of items that meet the bundle conditions. If the quantity in the order is higher than the quantity required by the bundle, this returns only the number that meets the bundle. For example, if the bundle requires `5` coffees, but the order includes `10` coffees, `item_quantity` returns `5`.
     */
    constructor(id, object, itemIndex, itemQuantity) { 
        
        BundleIdentifiedItem.initialize(this, id, object, itemIndex, itemQuantity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, object, itemIndex, itemQuantity) { 
        obj['id'] = id;
        obj['object'] = object;
        obj['item_index'] = itemIndex;
        obj['item_quantity'] = itemQuantity;
    }

    /**
     * Constructs a <code>BundleIdentifiedItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BundleIdentifiedItem} obj Optional instance to populate.
     * @return {module:model/BundleIdentifiedItem} The populated <code>BundleIdentifiedItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BundleIdentifiedItem();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('item_index')) {
                obj['item_index'] = ApiClient.convertToType(data['item_index'], 'Number');
            }
            if (data.hasOwnProperty('item_quantity')) {
                obj['item_quantity'] = ApiClient.convertToType(data['item_quantity'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BundleIdentifiedItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BundleIdentifiedItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BundleIdentifiedItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }

        return true;
    }


}

BundleIdentifiedItem.RequiredProperties = ["id", "object", "item_index", "item_quantity"];

/**
 * Unique identifier of the product or SKU that meets the bundle condition. This is an ID assigned by Voucherify.
 * @member {String} id
 */
BundleIdentifiedItem.prototype['id'] = undefined;

/**
 * Determines the type of the object that meets the bundle condition.
 * @member {module:model/BundleIdentifiedItem.ObjectEnum} object
 */
BundleIdentifiedItem.prototype['object'] = undefined;

/**
 * Number assigned to the order line item in accordance with the order sent in the request. It starts with `0` for the first order line item in the request.
 * @member {Number} item_index
 */
BundleIdentifiedItem.prototype['item_index'] = undefined;

/**
 * Quantity of items that meet the bundle conditions. If the quantity in the order is higher than the quantity required by the bundle, this returns only the number that meets the bundle. For example, if the bundle requires `5` coffees, but the order includes `10` coffees, `item_quantity` returns `5`.
 * @member {Number} item_quantity
 */
BundleIdentifiedItem.prototype['item_quantity'] = undefined;





/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
BundleIdentifiedItem['ObjectEnum'] = {

    /**
     * value: "product"
     * @const
     */
    "product": "product",

    /**
     * value: "sku"
     * @const
     */
    "sku": "sku"
};



export default BundleIdentifiedItem;

