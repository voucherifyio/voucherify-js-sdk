/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CodeConfig model module.
 * @module model/CodeConfig
 * @version v2018-08-01
 */
class CodeConfig {
    /**
     * Constructs a new <code>CodeConfig</code>.
     * Contains information about the config used for the voucher code. Defines the code&#39;s pattern (prefix, postfix, length, charset, etc).
     * @alias module:model/CodeConfig
     */
    constructor() { 
        
        CodeConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CodeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodeConfig} obj Optional instance to populate.
     * @return {module:model/CodeConfig} The populated <code>CodeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodeConfig();

            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('charset')) {
                obj['charset'] = ApiClient.convertToType(data['charset'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('postfix')) {
                obj['postfix'] = ApiClient.convertToType(data['postfix'], 'String');
            }
            if (data.hasOwnProperty('pattern')) {
                obj['pattern'] = ApiClient.convertToType(data['pattern'], 'String');
            }
            if (data.hasOwnProperty('initial_count')) {
                obj['initial_count'] = ApiClient.convertToType(data['initial_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodeConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['charset'] && !(typeof data['charset'] === 'string' || data['charset'] instanceof String)) {
            throw new Error("Expected the field `charset` to be a primitive type in the JSON string but got " + data['charset']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // ensure the json data is a string
        if (data['postfix'] && !(typeof data['postfix'] === 'string' || data['postfix'] instanceof String)) {
            throw new Error("Expected the field `postfix` to be a primitive type in the JSON string but got " + data['postfix']);
        }
        // ensure the json data is a string
        if (data['pattern'] && !(typeof data['pattern'] === 'string' || data['pattern'] instanceof String)) {
            throw new Error("Expected the field `pattern` to be a primitive type in the JSON string but got " + data['pattern']);
        }

        return true;
    }


}



/**
 * Number of characters in a generated code (excluding prefix and postfix).
 * @member {Number} length
 */
CodeConfig.prototype['length'] = undefined;

/**
 * Characters that can appear in the code.    Examples:  - Alphanumeric: `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`  - Alphabetic: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`  - Alphabetic Lowercase: `abcdefghijklmnopqrstuvwxyz`  - Alphabetic Uppercase: `ABCDEFGHIJKLMNOPQRSTUVWXYZ`  - Numbers: `0123456789`   - Custom: a custom character set
 * @member {String} charset
 */
CodeConfig.prototype['charset'] = undefined;

/**
 * A text appended before the code.
 * @member {String} prefix
 */
CodeConfig.prototype['prefix'] = undefined;

/**
 * A text appended after the code.
 * @member {String} postfix
 */
CodeConfig.prototype['postfix'] = undefined;

/**
 * A pattern for codes where hashes (#) will be replaced with random characters. Overrides `length`.
 * @member {String} pattern
 */
CodeConfig.prototype['pattern'] = undefined;

/**
 * Internal value, does not change anything if provided.
 * @member {Number} initial_count
 */
CodeConfig.prototype['initial_count'] = undefined;






export default CodeConfig;

