/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomEvent from './CustomEvent';
import EarningRule from './EarningRule';
import ListPublicationsItemValidSingleVoucher from './ListPublicationsItemValidSingleVoucher';
import LoyaltyPendingPoints from './LoyaltyPendingPoints';
import LoyaltyPointsBucket from './LoyaltyPointsBucket';
import LoyaltyTier from './LoyaltyTier';
import MemberActivityDataBalance from './MemberActivityDataBalance';
import MemberActivityDataCustomerEvent from './MemberActivityDataCustomerEvent';
import MemberActivityDataOrder from './MemberActivityDataOrder';
import MemberActivityDataRedemption from './MemberActivityDataRedemption';
import MemberActivityDataTransaction from './MemberActivityDataTransaction';
import RewardAssignment from './RewardAssignment';
import SimpleCampaign from './SimpleCampaign';
import SimpleCustomer from './SimpleCustomer';
import SimpleEvent from './SimpleEvent';
import SimplePromotionStack from './SimplePromotionStack';
import SimplePromotionTier from './SimplePromotionTier';
import SimpleRedemption from './SimpleRedemption';
import SimpleRedemptionRewardResult from './SimpleRedemptionRewardResult';
import SimpleReferralTier from './SimpleReferralTier';
import SimpleVoucher from './SimpleVoucher';
import VoucherBalance from './VoucherBalance';

/**
 * The MemberActivityData model module.
 * @module model/MemberActivityData
 * @version v2018-08-01
 */
class MemberActivityData {
    /**
     * Constructs a new <code>MemberActivityData</code>.
     * @alias module:model/MemberActivityData
     */
    constructor() { 
        
        MemberActivityData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MemberActivityData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemberActivityData} obj Optional instance to populate.
     * @return {module:model/MemberActivityData} The populated <code>MemberActivityData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemberActivityData();

            if (data.hasOwnProperty('customer')) {
                obj['customer'] = SimpleCustomer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('campaign')) {
                obj['campaign'] = SimpleCampaign.constructFromObject(data['campaign']);
            }
            if (data.hasOwnProperty('loyalty_tier_from')) {
                obj['loyalty_tier_from'] = LoyaltyTier.constructFromObject(data['loyalty_tier_from']);
            }
            if (data.hasOwnProperty('loyalty_tier_to')) {
                obj['loyalty_tier_to'] = LoyaltyTier.constructFromObject(data['loyalty_tier_to']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('loyalty_tier')) {
                obj['loyalty_tier'] = LoyaltyTier.constructFromObject(data['loyalty_tier']);
            }
            if (data.hasOwnProperty('expiration_date')) {
                obj['expiration_date'] = ApiClient.convertToType(data['expiration_date'], 'Date');
            }
            if (data.hasOwnProperty('publication')) {
                obj['publication'] = ListPublicationsItemValidSingleVoucher.constructFromObject(data['publication']);
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = MemberActivityDataOrder.constructFromObject(data['order']);
            }
            if (data.hasOwnProperty('voucher')) {
                obj['voucher'] = SimpleVoucher.constructFromObject(data['voucher']);
            }
            if (data.hasOwnProperty('holder')) {
                obj['holder'] = SimpleCustomer.constructFromObject(data['holder']);
            }
            if (data.hasOwnProperty('promotion_tier')) {
                obj['promotion_tier'] = SimplePromotionTier.constructFromObject(data['promotion_tier']);
            }
            if (data.hasOwnProperty('promotion_stack')) {
                obj['promotion_stack'] = SimplePromotionStack.constructFromObject(data['promotion_stack']);
            }
            if (data.hasOwnProperty('redemption')) {
                obj['redemption'] = MemberActivityDataRedemption.constructFromObject(data['redemption']);
            }
            if (data.hasOwnProperty('redemption_rollback')) {
                obj['redemption_rollback'] = SimpleRedemption.constructFromObject(data['redemption_rollback']);
            }
            if (data.hasOwnProperty('reward')) {
                obj['reward'] = SimpleRedemptionRewardResult.constructFromObject(data['reward']);
            }
            if (data.hasOwnProperty('referral_tier')) {
                obj['referral_tier'] = SimpleReferralTier.constructFromObject(data['referral_tier']);
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = MemberActivityDataBalance.constructFromObject(data['balance']);
            }
            if (data.hasOwnProperty('custom_event')) {
                obj['custom_event'] = CustomEvent.constructFromObject(data['custom_event']);
            }
            if (data.hasOwnProperty('customer_event')) {
                obj['customer_event'] = MemberActivityDataCustomerEvent.constructFromObject(data['customer_event']);
            }
            if (data.hasOwnProperty('earning_rule')) {
                obj['earning_rule'] = EarningRule.constructFromObject(data['earning_rule']);
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = SimpleEvent.constructFromObject(data['event']);
            }
            if (data.hasOwnProperty('reward_redemption')) {
                obj['reward_redemption'] = ApiClient.convertToType(data['reward_redemption'], Object);
            }
            if (data.hasOwnProperty('reward_assignment')) {
                obj['reward_assignment'] = RewardAssignment.constructFromObject(data['reward_assignment']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = MemberActivityDataTransaction.constructFromObject(data['transaction']);
            }
            if (data.hasOwnProperty('pending_points')) {
                obj['pending_points'] = LoyaltyPendingPoints.constructFromObject(data['pending_points']);
            }
            if (data.hasOwnProperty('voucher_pending_points_balance')) {
                obj['voucher_pending_points_balance'] = VoucherBalance.constructFromObject(data['voucher_pending_points_balance']);
            }
            if (data.hasOwnProperty('source_voucher')) {
                obj['source_voucher'] = SimpleVoucher.constructFromObject(data['source_voucher']);
            }
            if (data.hasOwnProperty('destination_voucher')) {
                obj['destination_voucher'] = SimpleVoucher.constructFromObject(data['destination_voucher']);
            }
            if (data.hasOwnProperty('points')) {
                obj['points'] = ApiClient.convertToType(data['points'], 'Number');
            }
            if (data.hasOwnProperty('buckets')) {
                obj['buckets'] = ApiClient.convertToType(data['buckets'], [LoyaltyPointsBucket]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MemberActivityData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MemberActivityData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          SimpleCustomer.validateJSON(data['customer']);
        }
        // validate the optional field `campaign`
        if (data['campaign']) { // data not null
          SimpleCampaign.validateJSON(data['campaign']);
        }
        // validate the optional field `loyalty_tier_from`
        if (data['loyalty_tier_from']) { // data not null
          LoyaltyTier.validateJSON(data['loyalty_tier_from']);
        }
        // validate the optional field `loyalty_tier_to`
        if (data['loyalty_tier_to']) { // data not null
          LoyaltyTier.validateJSON(data['loyalty_tier_to']);
        }
        // validate the optional field `loyalty_tier`
        if (data['loyalty_tier']) { // data not null
          LoyaltyTier.validateJSON(data['loyalty_tier']);
        }
        // validate the optional field `publication`
        if (data['publication']) { // data not null
          ListPublicationsItemValidSingleVoucher.validateJSON(data['publication']);
        }
        // validate the optional field `order`
        if (data['order']) { // data not null
          MemberActivityDataOrder.validateJSON(data['order']);
        }
        // validate the optional field `voucher`
        if (data['voucher']) { // data not null
          SimpleVoucher.validateJSON(data['voucher']);
        }
        // validate the optional field `holder`
        if (data['holder']) { // data not null
          SimpleCustomer.validateJSON(data['holder']);
        }
        // validate the optional field `promotion_tier`
        if (data['promotion_tier']) { // data not null
          SimplePromotionTier.validateJSON(data['promotion_tier']);
        }
        // validate the optional field `promotion_stack`
        if (data['promotion_stack']) { // data not null
          SimplePromotionStack.validateJSON(data['promotion_stack']);
        }
        // validate the optional field `redemption`
        if (data['redemption']) { // data not null
          MemberActivityDataRedemption.validateJSON(data['redemption']);
        }
        // validate the optional field `redemption_rollback`
        if (data['redemption_rollback']) { // data not null
          SimpleRedemption.validateJSON(data['redemption_rollback']);
        }
        // validate the optional field `reward`
        if (data['reward']) { // data not null
          SimpleRedemptionRewardResult.validateJSON(data['reward']);
        }
        // validate the optional field `referral_tier`
        if (data['referral_tier']) { // data not null
          SimpleReferralTier.validateJSON(data['referral_tier']);
        }
        // validate the optional field `balance`
        if (data['balance']) { // data not null
          MemberActivityDataBalance.validateJSON(data['balance']);
        }
        // validate the optional field `custom_event`
        if (data['custom_event']) { // data not null
          CustomEvent.validateJSON(data['custom_event']);
        }
        // validate the optional field `customer_event`
        if (data['customer_event']) { // data not null
          MemberActivityDataCustomerEvent.validateJSON(data['customer_event']);
        }
        // validate the optional field `earning_rule`
        if (data['earning_rule']) { // data not null
          EarningRule.validateJSON(data['earning_rule']);
        }
        // validate the optional field `event`
        if (data['event']) { // data not null
          SimpleEvent.validateJSON(data['event']);
        }
        // validate the optional field `reward_assignment`
        if (data['reward_assignment']) { // data not null
          RewardAssignment.validateJSON(data['reward_assignment']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // validate the optional field `transaction`
        if (data['transaction']) { // data not null
          MemberActivityDataTransaction.validateJSON(data['transaction']);
        }
        // validate the optional field `pending_points`
        if (data['pending_points']) { // data not null
          LoyaltyPendingPoints.validateJSON(data['pending_points']);
        }
        // validate the optional field `voucher_pending_points_balance`
        if (data['voucher_pending_points_balance']) { // data not null
          VoucherBalance.validateJSON(data['voucher_pending_points_balance']);
        }
        // validate the optional field `source_voucher`
        if (data['source_voucher']) { // data not null
          SimpleVoucher.validateJSON(data['source_voucher']);
        }
        // validate the optional field `destination_voucher`
        if (data['destination_voucher']) { // data not null
          SimpleVoucher.validateJSON(data['destination_voucher']);
        }
        if (data['buckets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buckets'])) {
                throw new Error("Expected the field `buckets` to be an array in the JSON data but got " + data['buckets']);
            }
            // validate the optional field `buckets` (array)
            for (const item of data['buckets']) {
                LoyaltyPointsBucket.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/SimpleCustomer} customer
 */
MemberActivityData.prototype['customer'] = undefined;

/**
 * @member {module:model/SimpleCampaign} campaign
 */
MemberActivityData.prototype['campaign'] = undefined;

/**
 * @member {module:model/LoyaltyTier} loyalty_tier_from
 */
MemberActivityData.prototype['loyalty_tier_from'] = undefined;

/**
 * @member {module:model/LoyaltyTier} loyalty_tier_to
 */
MemberActivityData.prototype['loyalty_tier_to'] = undefined;

/**
 * @member {Date} created_at
 */
MemberActivityData.prototype['created_at'] = undefined;

/**
 * @member {module:model/LoyaltyTier} loyalty_tier
 */
MemberActivityData.prototype['loyalty_tier'] = undefined;

/**
 * @member {Date} expiration_date
 */
MemberActivityData.prototype['expiration_date'] = undefined;

/**
 * @member {module:model/ListPublicationsItemValidSingleVoucher} publication
 */
MemberActivityData.prototype['publication'] = undefined;

/**
 * @member {module:model/MemberActivityDataOrder} order
 */
MemberActivityData.prototype['order'] = undefined;

/**
 * @member {module:model/SimpleVoucher} voucher
 */
MemberActivityData.prototype['voucher'] = undefined;

/**
 * @member {module:model/SimpleCustomer} holder
 */
MemberActivityData.prototype['holder'] = undefined;

/**
 * @member {module:model/SimplePromotionTier} promotion_tier
 */
MemberActivityData.prototype['promotion_tier'] = undefined;

/**
 * @member {module:model/SimplePromotionStack} promotion_stack
 */
MemberActivityData.prototype['promotion_stack'] = undefined;

/**
 * @member {module:model/MemberActivityDataRedemption} redemption
 */
MemberActivityData.prototype['redemption'] = undefined;

/**
 * @member {module:model/SimpleRedemption} redemption_rollback
 */
MemberActivityData.prototype['redemption_rollback'] = undefined;

/**
 * @member {module:model/SimpleRedemptionRewardResult} reward
 */
MemberActivityData.prototype['reward'] = undefined;

/**
 * @member {module:model/SimpleReferralTier} referral_tier
 */
MemberActivityData.prototype['referral_tier'] = undefined;

/**
 * @member {module:model/MemberActivityDataBalance} balance
 */
MemberActivityData.prototype['balance'] = undefined;

/**
 * @member {module:model/CustomEvent} custom_event
 */
MemberActivityData.prototype['custom_event'] = undefined;

/**
 * @member {module:model/MemberActivityDataCustomerEvent} customer_event
 */
MemberActivityData.prototype['customer_event'] = undefined;

/**
 * @member {module:model/EarningRule} earning_rule
 */
MemberActivityData.prototype['earning_rule'] = undefined;

/**
 * @member {module:model/SimpleEvent} event
 */
MemberActivityData.prototype['event'] = undefined;

/**
 * @member {Object} reward_redemption
 */
MemberActivityData.prototype['reward_redemption'] = undefined;

/**
 * @member {module:model/RewardAssignment} reward_assignment
 */
MemberActivityData.prototype['reward_assignment'] = undefined;

/**
 * @member {String} source
 */
MemberActivityData.prototype['source'] = undefined;

/**
 * @member {module:model/MemberActivityDataTransaction} transaction
 */
MemberActivityData.prototype['transaction'] = undefined;

/**
 * @member {module:model/LoyaltyPendingPoints} pending_points
 */
MemberActivityData.prototype['pending_points'] = undefined;

/**
 * @member {module:model/VoucherBalance} voucher_pending_points_balance
 */
MemberActivityData.prototype['voucher_pending_points_balance'] = undefined;

/**
 * @member {module:model/SimpleVoucher} source_voucher
 */
MemberActivityData.prototype['source_voucher'] = undefined;

/**
 * @member {module:model/SimpleVoucher} destination_voucher
 */
MemberActivityData.prototype['destination_voucher'] = undefined;

/**
 * The number of expired points.
 * @member {Number} points
 */
MemberActivityData.prototype['points'] = undefined;

/**
 * @member {Array.<module:model/LoyaltyPointsBucket>} buckets
 */
MemberActivityData.prototype['buckets'] = undefined;






export default MemberActivityData;

