/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AsyncActionBase model module.
 * @module model/AsyncActionBase
 * @version v2018-08-01
 */
class AsyncActionBase {
    /**
     * Constructs a new <code>AsyncActionBase</code>.
     * This is an object representing an asynchronous action.
     * @alias module:model/AsyncActionBase
     */
    constructor() { 
        
        AsyncActionBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['object'] = 'async_action';
    }

    /**
     * Constructs a <code>AsyncActionBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AsyncActionBase} obj Optional instance to populate.
     * @return {module:model/AsyncActionBase} The populated <code>AsyncActionBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AsyncActionBase();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('operation_status')) {
                obj['operation_status'] = ApiClient.convertToType(data['operation_status'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('processing_time')) {
                obj['processing_time'] = ApiClient.convertToType(data['processing_time'], 'Number');
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = ApiClient.convertToType(data['progress'], 'Number');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AsyncActionBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AsyncActionBase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['operation_status'] && !(typeof data['operation_status'] === 'string' || data['operation_status'] instanceof String)) {
            throw new Error("Expected the field `operation_status` to be a primitive type in the JSON string but got " + data['operation_status']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }

        return true;
    }


}



/**
 * Async action unique ID.
 * @member {String} id
 */
AsyncActionBase.prototype['id'] = undefined;

/**
 * Type of async action.
 * @member {String} type
 */
AsyncActionBase.prototype['type'] = undefined;

/**
 * Status of the async action. Informs you whether the async action has already been completed.
 * @member {module:model/AsyncActionBase.StatusEnum} status
 */
AsyncActionBase.prototype['status'] = undefined;

/**
 * Status of async action processing. Informs about the async action status, whether it failed, succeeded, or the status is unknown.
 * @member {module:model/AsyncActionBase.OperationStatusEnum} operation_status
 */
AsyncActionBase.prototype['operation_status'] = undefined;

/**
 * Timestamp representing the date and time when the async action was scheduled in ISO 8601 format.
 * @member {Date} created_at
 */
AsyncActionBase.prototype['created_at'] = undefined;

/**
 * Timestamp representing the date and time when the async action was updated. The value is shown in the ISO 8601 format.
 * @member {Date} updated_at
 */
AsyncActionBase.prototype['updated_at'] = undefined;

/**
 * Unique request ID.
 * @member {String} request_id
 */
AsyncActionBase.prototype['request_id'] = undefined;

/**
 * The length of time it took to process the request in milliseconds.
 * @member {Number} processing_time
 */
AsyncActionBase.prototype['processing_time'] = undefined;

/**
 * % progress to completion of the asynchronous action.
 * @member {Number} progress
 */
AsyncActionBase.prototype['progress'] = undefined;

/**
 * The type of the object represented by JSON. This object stores information about the `async_action`.
 * @member {module:model/AsyncActionBase.ObjectEnum} object
 * @default 'async_action'
 */
AsyncActionBase.prototype['object'] = 'async_action';





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AsyncActionBase['StatusEnum'] = {

    /**
     * value: "DONE"
     * @const
     */
    "DONE": "DONE",

    /**
     * value: "ENQUEUED"
     * @const
     */
    "ENQUEUED": "ENQUEUED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "IN_PROGRESS"
};


/**
 * Allowed values for the <code>operation_status</code> property.
 * @enum {String}
 * @readonly
 */
AsyncActionBase['OperationStatusEnum'] = {

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN"
};


/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
AsyncActionBase['ObjectEnum'] = {

    /**
     * value: "async_action"
     * @const
     */
    "async_action": "async_action"
};



export default AsyncActionBase;

