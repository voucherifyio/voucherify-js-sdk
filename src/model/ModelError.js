/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorError from './ErrorError';

/**
 * The ModelError model module.
 * @module model/ModelError
 * @version v2018-08-01
 */
class ModelError {
    /**
     * Constructs a new <code>ModelError</code>.
     * Error details
     * @alias module:model/ModelError
     */
    constructor() { 
        
        ModelError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModelError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelError} obj Optional instance to populate.
     * @return {module:model/ModelError} The populated <code>ModelError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelError();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'Number');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('resource_id')) {
                obj['resource_id'] = ApiClient.convertToType(data['resource_id'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ErrorError.constructFromObject(data['error']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModelError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModelError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['resource_id'] && !(typeof data['resource_id'] === 'string' || data['resource_id'] instanceof String)) {
            throw new Error("Expected the field `resource_id` to be a primitive type in the JSON string but got " + data['resource_id']);
        }
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          ErrorError.validateJSON(data['error']);
        }

        return true;
    }


}



/**
 * Error's HTTP status code.
 * @member {Number} code
 */
ModelError.prototype['code'] = undefined;

/**
 * Short string describing the kind of error which occurred.
 * @member {String} key
 */
ModelError.prototype['key'] = undefined;

/**
 * A human-readable message providing a short description of the error.
 * @member {String} message
 */
ModelError.prototype['message'] = undefined;

/**
 * A human-readable message providing more details about the error.
 * @member {String} details
 */
ModelError.prototype['details'] = undefined;

/**
 * This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team.
 * @member {String} request_id
 */
ModelError.prototype['request_id'] = undefined;

/**
 * Unique resource ID that can be used in another endpoint to get more details.
 * @member {String} resource_id
 */
ModelError.prototype['resource_id'] = undefined;

/**
 * The resource type.
 * @member {String} resource_type
 */
ModelError.prototype['resource_type'] = undefined;

/**
 * @member {module:model/ErrorError} error
 */
ModelError.prototype['error'] = undefined;






export default ModelError;

