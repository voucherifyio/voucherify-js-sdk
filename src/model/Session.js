/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Session model module.
 * @module model/Session
 * @version v2018-08-01
 */
class Session {
    /**
     * Constructs a new <code>Session</code>.
     * @alias module:model/Session
     */
    constructor() { 
        
        Session.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['type'] = 'LOCK';
    }

    /**
     * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Session} obj Optional instance to populate.
     * @return {module:model/Session} The populated <code>Session</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Session();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
            if (data.hasOwnProperty('ttl_unit')) {
                obj['ttl_unit'] = ApiClient.convertToType(data['ttl_unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Session</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Session</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['ttl_unit'] && !(typeof data['ttl_unit'] === 'string' || data['ttl_unit'] instanceof String)) {
            throw new Error("Expected the field `ttl_unit` to be a primitive type in the JSON string but got " + data['ttl_unit']);
        }

        return true;
    }


}



/**
 * The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated.
 * @member {String} key
 */
Session.prototype['key'] = undefined;

/**
 * This parameter is required to establish a new session.
 * @member {module:model/Session.TypeEnum} type
 * @default 'LOCK'
 */
Session.prototype['type'] = 'LOCK';

/**
 * Value for the period of time that the session is active. Units for this parameter are defined by the session.ttl_unit parameter.
 * @member {Number} ttl
 */
Session.prototype['ttl'] = undefined;

/**
 * Defines the type of unit in which the session time is counted.
 * @member {module:model/Session.TtlUnitEnum} ttl_unit
 */
Session.prototype['ttl_unit'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Session['TypeEnum'] = {

    /**
     * value: "LOCK"
     * @const
     */
    "LOCK": "LOCK"
};


/**
 * Allowed values for the <code>ttl_unit</code> property.
 * @enum {String}
 * @readonly
 */
Session['TtlUnitEnum'] = {

    /**
     * value: "DAYS"
     * @const
     */
    "DAYS": "DAYS",

    /**
     * value: "HOURS"
     * @const
     */
    "HOURS": "HOURS",

    /**
     * value: "MICROSECONDS"
     * @const
     */
    "MICROSECONDS": "MICROSECONDS",

    /**
     * value: "MILLISECONDS"
     * @const
     */
    "MILLISECONDS": "MILLISECONDS",

    /**
     * value: "MINUTES"
     * @const
     */
    "MINUTES": "MINUTES",

    /**
     * value: "NANOSECONDS"
     * @const
     */
    "NANOSECONDS": "NANOSECONDS",

    /**
     * value: "SECONDS"
     * @const
     */
    "SECONDS": "SECONDS"
};



export default Session;

