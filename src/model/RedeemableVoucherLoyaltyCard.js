/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RedeemableVoucherLoyaltyCard model module.
 * @module model/RedeemableVoucherLoyaltyCard
 * @version v2018-08-01
 */
class RedeemableVoucherLoyaltyCard {
    /**
     * Constructs a new <code>RedeemableVoucherLoyaltyCard</code>.
     * Object representing loyalty card parameters. Child attributes are present only if &#x60;type&#x60; is &#x60;LOYALTY_CARD&#x60;. Defaults to &#x60;null&#x60;.
     * @alias module:model/RedeemableVoucherLoyaltyCard
     */
    constructor() { 
        
        RedeemableVoucherLoyaltyCard.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RedeemableVoucherLoyaltyCard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedeemableVoucherLoyaltyCard} obj Optional instance to populate.
     * @return {module:model/RedeemableVoucherLoyaltyCard} The populated <code>RedeemableVoucherLoyaltyCard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedeemableVoucherLoyaltyCard();

            if (data.hasOwnProperty('points')) {
                obj['points'] = ApiClient.convertToType(data['points'], 'Number');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('next_expiration_date')) {
                obj['next_expiration_date'] = ApiClient.convertToType(data['next_expiration_date'], 'Date');
            }
            if (data.hasOwnProperty('next_expiration_points')) {
                obj['next_expiration_points'] = ApiClient.convertToType(data['next_expiration_points'], 'Number');
            }
            if (data.hasOwnProperty('pending_points')) {
                obj['pending_points'] = ApiClient.convertToType(data['pending_points'], 'Number');
            }
            if (data.hasOwnProperty('expired_points')) {
                obj['expired_points'] = ApiClient.convertToType(data['expired_points'], 'Number');
            }
            if (data.hasOwnProperty('subtracted_points')) {
                obj['subtracted_points'] = ApiClient.convertToType(data['subtracted_points'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedeemableVoucherLoyaltyCard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedeemableVoucherLoyaltyCard</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Total number of points added to the loyalty card over its lifespan.
 * @member {Number} points
 */
RedeemableVoucherLoyaltyCard.prototype['points'] = undefined;

/**
 * Points available for reward redemption. This is calculated as follows: `balance` = `points` - `expired_points` - `subtracted_points` - `redemption.redeemed_points`.
 * @member {Number} balance
 */
RedeemableVoucherLoyaltyCard.prototype['balance'] = undefined;

/**
 * The next closest date when the next set of points are due to expire.
 * @member {Date} next_expiration_date
 */
RedeemableVoucherLoyaltyCard.prototype['next_expiration_date'] = undefined;

/**
 * The amount of points that are set to expire next.
 * @member {Number} next_expiration_points
 */
RedeemableVoucherLoyaltyCard.prototype['next_expiration_points'] = undefined;

/**
 * Shows the number of pending points that will be added to the loyalty card when they are activated automatically or manually.
 * @member {Number} pending_points
 */
RedeemableVoucherLoyaltyCard.prototype['pending_points'] = undefined;

/**
 * Shows the total number of expired points over the lifetime of the loyalty card.
 * @member {Number} expired_points
 */
RedeemableVoucherLoyaltyCard.prototype['expired_points'] = undefined;

/**
 * Shows the total number of subtracted points over the lifetime of the loyalty card.
 * @member {Number} subtracted_points
 */
RedeemableVoucherLoyaltyCard.prototype['subtracted_points'] = undefined;






export default RedeemableVoucherLoyaltyCard;

