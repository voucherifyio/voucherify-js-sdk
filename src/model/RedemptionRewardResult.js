/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Product from './Product';
import RedemptionRewardResultParameters from './RedemptionRewardResultParameters';
import SimpleCustomer from './SimpleCustomer';
import Sku from './Sku';
import Voucher from './Voucher';

/**
 * The RedemptionRewardResult model module.
 * @module model/RedemptionRewardResult
 * @version v2018-08-01
 */
class RedemptionRewardResult {
    /**
     * Constructs a new <code>RedemptionRewardResult</code>.
     * @alias module:model/RedemptionRewardResult
     */
    constructor() { 
        
        RedemptionRewardResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['object'] = 'reward';
    }

    /**
     * Constructs a <code>RedemptionRewardResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedemptionRewardResult} obj Optional instance to populate.
     * @return {module:model/RedemptionRewardResult} The populated <code>RedemptionRewardResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedemptionRewardResult();

            if (data.hasOwnProperty('customer')) {
                obj['customer'] = SimpleCustomer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('assignment_id')) {
                obj['assignment_id'] = ApiClient.convertToType(data['assignment_id'], 'String');
            }
            if (data.hasOwnProperty('voucher')) {
                obj['voucher'] = Voucher.constructFromObject(data['voucher']);
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = Product.constructFromObject(data['product']);
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = Sku.constructFromObject(data['sku']);
            }
            if (data.hasOwnProperty('loyalty_tier_id')) {
                obj['loyalty_tier_id'] = ApiClient.convertToType(data['loyalty_tier_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = RedemptionRewardResultParameters.constructFromObject(data['parameters']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedemptionRewardResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedemptionRewardResult</code>.
     */
    static validateJSON(data) {
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          SimpleCustomer.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['assignment_id'] && !(typeof data['assignment_id'] === 'string' || data['assignment_id'] instanceof String)) {
            throw new Error("Expected the field `assignment_id` to be a primitive type in the JSON string but got " + data['assignment_id']);
        }
        // validate the optional field `voucher`
        if (data['voucher']) { // data not null
          Voucher.validateJSON(data['voucher']);
        }
        // validate the optional field `product`
        if (data['product']) { // data not null
          Product.validateJSON(data['product']);
        }
        // validate the optional field `sku`
        if (data['sku']) { // data not null
          Sku.validateJSON(data['sku']);
        }
        // ensure the json data is a string
        if (data['loyalty_tier_id'] && !(typeof data['loyalty_tier_id'] === 'string' || data['loyalty_tier_id'] instanceof String)) {
            throw new Error("Expected the field `loyalty_tier_id` to be a primitive type in the JSON string but got " + data['loyalty_tier_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // validate the optional field `parameters`
        if (data['parameters']) { // data not null
          RedemptionRewardResultParameters.validateJSON(data['parameters']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/SimpleCustomer} customer
 */
RedemptionRewardResult.prototype['customer'] = undefined;

/**
 * Unique reward assignment ID assigned by Voucherify.
 * @member {String} assignment_id
 */
RedemptionRewardResult.prototype['assignment_id'] = undefined;

/**
 * @member {module:model/Voucher} voucher
 */
RedemptionRewardResult.prototype['voucher'] = undefined;

/**
 * @member {module:model/Product} product
 */
RedemptionRewardResult.prototype['product'] = undefined;

/**
 * @member {module:model/Sku} sku
 */
RedemptionRewardResult.prototype['sku'] = undefined;

/**
 * Unique loyalty tier ID assigned by Voucherify.
 * @member {String} loyalty_tier_id
 */
RedemptionRewardResult.prototype['loyalty_tier_id'] = undefined;

/**
 * Unique reward ID.
 * @member {String} id
 */
RedemptionRewardResult.prototype['id'] = undefined;

/**
 * Name of the reward.
 * @member {String} name
 */
RedemptionRewardResult.prototype['name'] = undefined;

/**
 * The type of the object represented by the JSON
 * @member {module:model/RedemptionRewardResult.ObjectEnum} object
 * @default 'reward'
 */
RedemptionRewardResult.prototype['object'] = 'reward';

/**
 * Timestamp representing the date and time when the redemption was created. The value is shown in the ISO 8601 format.
 * @member {Date} created_at
 */
RedemptionRewardResult.prototype['created_at'] = undefined;

/**
 * Timestamp in ISO 8601 format indicating when the reward was updated.
 * @member {Date} updated_at
 */
RedemptionRewardResult.prototype['updated_at'] = undefined;

/**
 * @member {module:model/RedemptionRewardResultParameters} parameters
 */
RedemptionRewardResult.prototype['parameters'] = undefined;

/**
 * A set of custom key/value pairs that you can attach to a reward. The metadata object stores all custom attributes assigned to the reward.
 * @member {Object} metadata
 */
RedemptionRewardResult.prototype['metadata'] = undefined;

/**
 * Reward type.
 * @member {module:model/RedemptionRewardResult.TypeEnum} type
 */
RedemptionRewardResult.prototype['type'] = undefined;





/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
RedemptionRewardResult['ObjectEnum'] = {

    /**
     * value: "reward"
     * @const
     */
    "reward": "reward"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RedemptionRewardResult['TypeEnum'] = {

    /**
     * value: "CAMPAIGN"
     * @const
     */
    "CAMPAIGN": "CAMPAIGN",

    /**
     * value: "COIN"
     * @const
     */
    "COIN": "COIN",

    /**
     * value: "MATERIAL"
     * @const
     */
    "MATERIAL": "MATERIAL"
};



export default RedemptionRewardResult;

