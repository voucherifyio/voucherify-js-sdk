/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import ReferralProgram from './ReferralProgram';
import SimpleCampaignVoucher from './SimpleCampaignVoucher';

/**
 * The SimpleCampaign model module.
 * @module model/SimpleCampaign
 * @version v2018-08-01
 */
class SimpleCampaign {
    /**
     * Constructs a new <code>SimpleCampaign</code>.
     * Simplified campaign data.
     * @alias module:model/SimpleCampaign
     */
    constructor() { 
        
        SimpleCampaign.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['object'] = 'campaign';
    }

    /**
     * Constructs a <code>SimpleCampaign</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleCampaign} obj Optional instance to populate.
     * @return {module:model/SimpleCampaign} The populated <code>SimpleCampaign</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleCampaign();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('campaign_type')) {
                obj['campaign_type'] = ApiClient.convertToType(data['campaign_type'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('is_referral_code')) {
                obj['is_referral_code'] = ApiClient.convertToType(data['is_referral_code'], 'Boolean');
            }
            if (data.hasOwnProperty('voucher')) {
                obj['voucher'] = SimpleCampaignVoucher.constructFromObject(data['voucher']);
            }
            if (data.hasOwnProperty('referral_program')) {
                obj['referral_program'] = ReferralProgram.constructFromObject(data['referral_program']);
            }
            if (data.hasOwnProperty('auto_join')) {
                obj['auto_join'] = ApiClient.convertToType(data['auto_join'], 'Boolean');
            }
            if (data.hasOwnProperty('join_once')) {
                obj['join_once'] = ApiClient.convertToType(data['join_once'], 'Boolean');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('category_id')) {
                obj['category_id'] = ApiClient.convertToType(data['category_id'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
            }
            if (data.hasOwnProperty('expiration_date')) {
                obj['expiration_date'] = ApiClient.convertToType(data['expiration_date'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimpleCampaign</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimpleCampaign</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['campaign_type'] && !(typeof data['campaign_type'] === 'string' || data['campaign_type'] instanceof String)) {
            throw new Error("Expected the field `campaign_type` to be a primitive type in the JSON string but got " + data['campaign_type']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `voucher`
        if (data['voucher']) { // data not null
          SimpleCampaignVoucher.validateJSON(data['voucher']);
        }
        // validate the optional field `referral_program`
        if (data['referral_program']) { // data not null
          ReferralProgram.validateJSON(data['referral_program']);
        }
        // ensure the json data is a string
        if (data['category_id'] && !(typeof data['category_id'] === 'string' || data['category_id'] instanceof String)) {
            throw new Error("Expected the field `category_id` to be a primitive type in the JSON string but got " + data['category_id']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }

        return true;
    }


}



/**
 * Campaign ID.
 * @member {String} id
 */
SimpleCampaign.prototype['id'] = undefined;

/**
 * Campaign name.
 * @member {String} name
 */
SimpleCampaign.prototype['name'] = undefined;

/**
 * Type of campaign.
 * @member {String} campaign_type
 */
SimpleCampaign.prototype['campaign_type'] = undefined;

/**
 * Defines whether the campaign can be updated with new vouchers after campaign creation or if the campaign consists of generic (standalone) vouchers.  - `AUTO_UPDATE`: the campaign is dynamic, i.e. vouchers will generate based on set criteria -  `STATIC`: vouchers need to be manually published - `STANDALONE`: campaign for single vouchers
 * @member {module:model/SimpleCampaign.TypeEnum} type
 */
SimpleCampaign.prototype['type'] = undefined;

/**
 * Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`.
 * @member {Boolean} is_referral_code
 */
SimpleCampaign.prototype['is_referral_code'] = undefined;

/**
 * @member {module:model/SimpleCampaignVoucher} voucher
 */
SimpleCampaign.prototype['voucher'] = undefined;

/**
 * @member {module:model/ReferralProgram} referral_program
 */
SimpleCampaign.prototype['referral_program'] = undefined;

/**
 * Indicates whether customers will be able to auto-join the campaign if any earning rule is fulfilled.
 * @member {Boolean} auto_join
 */
SimpleCampaign.prototype['auto_join'] = undefined;

/**
 * If this value is set to `true`, customers will be able to join the campaign only once. It is always `false` for generic (standalone) vouchers campaigns and it cannot be changed in them. It is always `true` for loyalty campaigns and it cannot be changed in them.
 * @member {Boolean} join_once
 */
SimpleCampaign.prototype['join_once'] = undefined;

/**
 * Indicates whether the campaign is active.
 * @member {Boolean} active
 */
SimpleCampaign.prototype['active'] = undefined;

/**
 * The unique category ID that this campaign belongs to.
 * @member {String} category_id
 */
SimpleCampaign.prototype['category_id'] = undefined;

/**
 * Unique category name.
 * @member {String} category
 */
SimpleCampaign.prototype['category'] = undefined;

/**
 * Contains details about the category.
 * @member {Array.<module:model/Category>} categories
 */
SimpleCampaign.prototype['categories'] = undefined;

/**
 * A set of custom key/value pairs that you can attach to a campaign. The metadata object stores all custom attributes assigned to the campaign.
 * @member {Object} metadata
 */
SimpleCampaign.prototype['metadata'] = undefined;

/**
 * Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is inactive *before* this date. 
 * @member {Date} start_date
 */
SimpleCampaign.prototype['start_date'] = undefined;

/**
 * Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is inactive *after* this date.
 * @member {Date} expiration_date
 */
SimpleCampaign.prototype['expiration_date'] = undefined;

/**
 * An optional field to keep extra textual information about the campaign such as a campaign description and details.
 * @member {String} description
 */
SimpleCampaign.prototype['description'] = undefined;

/**
 * Timestamp representing the date and time when the campaign was created. The value is shown in the ISO 8601 format.
 * @member {Date} created_at
 */
SimpleCampaign.prototype['created_at'] = undefined;

/**
 * Timestamp representing the date and time when the campaign was updated in the ISO 8601 format.
 * @member {Date} updated_at
 */
SimpleCampaign.prototype['updated_at'] = undefined;

/**
 * The type of the object represented by JSON. This object stores information about the campaign.
 * @member {module:model/SimpleCampaign.ObjectEnum} object
 * @default 'campaign'
 */
SimpleCampaign.prototype['object'] = 'campaign';





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SimpleCampaign['TypeEnum'] = {

    /**
     * value: "AUTO_UPDATE"
     * @const
     */
    "AUTO_UPDATE": "AUTO_UPDATE",

    /**
     * value: "STATIC"
     * @const
     */
    "STATIC": "STATIC",

    /**
     * value: "STANDALONE"
     * @const
     */
    "STANDALONE": "STANDALONE"
};


/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
SimpleCampaign['ObjectEnum'] = {

    /**
     * value: "campaign"
     * @const
     */
    "campaign": "campaign"
};



export default SimpleCampaign;

