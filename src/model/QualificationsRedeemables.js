/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QualificationsRedeemable from './QualificationsRedeemable';

/**
 * The QualificationsRedeemables model module.
 * @module model/QualificationsRedeemables
 * @version v2018-08-01
 */
class QualificationsRedeemables {
    /**
     * Constructs a new <code>QualificationsRedeemables</code>.
     * List of redeemables for examine qualification.
     * @alias module:model/QualificationsRedeemables
     */
    constructor() { 
        
        QualificationsRedeemables.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['object'] = 'list';
        obj['data_ref'] = 'data';
    }

    /**
     * Constructs a <code>QualificationsRedeemables</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QualificationsRedeemables} obj Optional instance to populate.
     * @return {module:model/QualificationsRedeemables} The populated <code>QualificationsRedeemables</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QualificationsRedeemables();

            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('data_ref')) {
                obj['data_ref'] = ApiClient.convertToType(data['data_ref'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [QualificationsRedeemable]);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('has_more')) {
                obj['has_more'] = ApiClient.convertToType(data['has_more'], 'Boolean');
            }
            if (data.hasOwnProperty('more_starting_after')) {
                obj['more_starting_after'] = ApiClient.convertToType(data['more_starting_after'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QualificationsRedeemables</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QualificationsRedeemables</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['data_ref'] && !(typeof data['data_ref'] === 'string' || data['data_ref'] instanceof String)) {
            throw new Error("Expected the field `data_ref` to be a primitive type in the JSON string but got " + data['data_ref']);
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                QualificationsRedeemable.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The type of the object represented by JSON. Default is `list`.
 * @member {module:model/QualificationsRedeemables.ObjectEnum} object
 * @default 'list'
 */
QualificationsRedeemables.prototype['object'] = 'list';

/**
 * Identifies the name of the attribute that contains the array of qualified redeemables.
 * @member {module:model/QualificationsRedeemables.DataRefEnum} data_ref
 * @default 'data'
 */
QualificationsRedeemables.prototype['data_ref'] = 'data';

/**
 * Array of qualified redeemables.
 * @member {Array.<module:model/QualificationsRedeemable>} data
 */
QualificationsRedeemables.prototype['data'] = undefined;

/**
 * The number of redeemables returned in the API request.
 * @member {Number} total
 */
QualificationsRedeemables.prototype['total'] = undefined;

/**
 * As results are always limited, the `has_more` flag indicates if there are more records for given parameters. This lets you know if you can run another request (with different options) to get more records returned in the results.
 * @member {Boolean} has_more
 */
QualificationsRedeemables.prototype['has_more'] = undefined;

/**
 * Timestamp representing the date and time to use in `starting_after` cursor to get more redeemables.
 * @member {Date} more_starting_after
 */
QualificationsRedeemables.prototype['more_starting_after'] = undefined;





/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
QualificationsRedeemables['ObjectEnum'] = {

    /**
     * value: "list"
     * @const
     */
    "list": "list"
};


/**
 * Allowed values for the <code>data_ref</code> property.
 * @enum {String}
 * @readonly
 */
QualificationsRedeemables['DataRefEnum'] = {

    /**
     * value: "data"
     * @const
     */
    "data": "data"
};



export default QualificationsRedeemables;

