/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StackingRules model module.
 * @module model/StackingRules
 * @version v2018-08-01
 */
class StackingRules {
    /**
     * Constructs a new <code>StackingRules</code>.
     * Defines stacking rules for redeemables. Read more in the [Stacking Rule Documentation](https://support.voucherify.io/article/604-stacking-rules).
     * @alias module:model/StackingRules
     */
    constructor() { 
        
        StackingRules.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['redeemables_limit'] = 30;
        obj['applicable_redeemables_limit'] = 5;
        obj['applicable_redeemables_per_category_limit'] = 1;
        obj['applicable_exclusive_redeemables_limit'] = 1;
        obj['applicable_exclusive_redeemables_per_category_limit'] = 1;
        obj['redeemables_sorting_rule'] = 'REQUESTED_ORDER';
    }

    /**
     * Constructs a <code>StackingRules</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StackingRules} obj Optional instance to populate.
     * @return {module:model/StackingRules} The populated <code>StackingRules</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StackingRules();

            if (data.hasOwnProperty('redeemables_limit')) {
                obj['redeemables_limit'] = ApiClient.convertToType(data['redeemables_limit'], 'Number');
            }
            if (data.hasOwnProperty('applicable_redeemables_limit')) {
                obj['applicable_redeemables_limit'] = ApiClient.convertToType(data['applicable_redeemables_limit'], 'Number');
            }
            if (data.hasOwnProperty('applicable_redeemables_per_category_limit')) {
                obj['applicable_redeemables_per_category_limit'] = ApiClient.convertToType(data['applicable_redeemables_per_category_limit'], 'Number');
            }
            if (data.hasOwnProperty('applicable_redeemables_category_limits')) {
                obj['applicable_redeemables_category_limits'] = ApiClient.convertToType(data['applicable_redeemables_category_limits'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('applicable_exclusive_redeemables_limit')) {
                obj['applicable_exclusive_redeemables_limit'] = ApiClient.convertToType(data['applicable_exclusive_redeemables_limit'], 'Number');
            }
            if (data.hasOwnProperty('applicable_exclusive_redeemables_per_category_limit')) {
                obj['applicable_exclusive_redeemables_per_category_limit'] = ApiClient.convertToType(data['applicable_exclusive_redeemables_per_category_limit'], 'Number');
            }
            if (data.hasOwnProperty('exclusive_categories')) {
                obj['exclusive_categories'] = ApiClient.convertToType(data['exclusive_categories'], ['String']);
            }
            if (data.hasOwnProperty('joint_categories')) {
                obj['joint_categories'] = ApiClient.convertToType(data['joint_categories'], ['String']);
            }
            if (data.hasOwnProperty('redeemables_application_mode')) {
                obj['redeemables_application_mode'] = ApiClient.convertToType(data['redeemables_application_mode'], 'String');
            }
            if (data.hasOwnProperty('redeemables_sorting_rule')) {
                obj['redeemables_sorting_rule'] = ApiClient.convertToType(data['redeemables_sorting_rule'], 'String');
            }
            if (data.hasOwnProperty('redeemables_products_application_mode')) {
                obj['redeemables_products_application_mode'] = ApiClient.convertToType(data['redeemables_products_application_mode'], 'String');
            }
            if (data.hasOwnProperty('redeemables_no_effect_rule')) {
                obj['redeemables_no_effect_rule'] = ApiClient.convertToType(data['redeemables_no_effect_rule'], 'String');
            }
            if (data.hasOwnProperty('no_effect_skip_categories')) {
                obj['no_effect_skip_categories'] = ApiClient.convertToType(data['no_effect_skip_categories'], ['String']);
            }
            if (data.hasOwnProperty('no_effect_redeem_anyway_categories')) {
                obj['no_effect_redeem_anyway_categories'] = ApiClient.convertToType(data['no_effect_redeem_anyway_categories'], ['String']);
            }
            if (data.hasOwnProperty('redeemables_rollback_order_mode')) {
                obj['redeemables_rollback_order_mode'] = ApiClient.convertToType(data['redeemables_rollback_order_mode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StackingRules</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StackingRules</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['exclusive_categories'])) {
            throw new Error("Expected the field `exclusive_categories` to be an array in the JSON data but got " + data['exclusive_categories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['joint_categories'])) {
            throw new Error("Expected the field `joint_categories` to be an array in the JSON data but got " + data['joint_categories']);
        }
        // ensure the json data is a string
        if (data['redeemables_application_mode'] && !(typeof data['redeemables_application_mode'] === 'string' || data['redeemables_application_mode'] instanceof String)) {
            throw new Error("Expected the field `redeemables_application_mode` to be a primitive type in the JSON string but got " + data['redeemables_application_mode']);
        }
        // ensure the json data is a string
        if (data['redeemables_sorting_rule'] && !(typeof data['redeemables_sorting_rule'] === 'string' || data['redeemables_sorting_rule'] instanceof String)) {
            throw new Error("Expected the field `redeemables_sorting_rule` to be a primitive type in the JSON string but got " + data['redeemables_sorting_rule']);
        }
        // ensure the json data is a string
        if (data['redeemables_products_application_mode'] && !(typeof data['redeemables_products_application_mode'] === 'string' || data['redeemables_products_application_mode'] instanceof String)) {
            throw new Error("Expected the field `redeemables_products_application_mode` to be a primitive type in the JSON string but got " + data['redeemables_products_application_mode']);
        }
        // ensure the json data is a string
        if (data['redeemables_no_effect_rule'] && !(typeof data['redeemables_no_effect_rule'] === 'string' || data['redeemables_no_effect_rule'] instanceof String)) {
            throw new Error("Expected the field `redeemables_no_effect_rule` to be a primitive type in the JSON string but got " + data['redeemables_no_effect_rule']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['no_effect_skip_categories'])) {
            throw new Error("Expected the field `no_effect_skip_categories` to be an array in the JSON data but got " + data['no_effect_skip_categories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['no_effect_redeem_anyway_categories'])) {
            throw new Error("Expected the field `no_effect_redeem_anyway_categories` to be an array in the JSON data but got " + data['no_effect_redeem_anyway_categories']);
        }
        // ensure the json data is a string
        if (data['redeemables_rollback_order_mode'] && !(typeof data['redeemables_rollback_order_mode'] === 'string' || data['redeemables_rollback_order_mode'] instanceof String)) {
            throw new Error("Expected the field `redeemables_rollback_order_mode` to be a primitive type in the JSON string but got " + data['redeemables_rollback_order_mode']);
        }

        return true;
    }


}



/**
 * Defines how many redeemables can be sent in one request. Note: more redeemables means more processing time.
 * @member {Number} redeemables_limit
 * @default 30
 */
StackingRules.prototype['redeemables_limit'] = 30;

/**
 * Defines how many redeemables can be applied in one request. The number must be less than or equal to `redeemables_limit`. For example, a user can select 30 discounts but only 5 will be applied to the order and the remaining will be `SKIPPED` according to the `redeemables_sorting_rule`.
 * @member {Number} applicable_redeemables_limit
 * @default 5
 */
StackingRules.prototype['applicable_redeemables_limit'] = 5;

/**
 * Defines how many redeemables with the same category can be applied in one request. The number must be less than or equal to `applicable_redeemables_limit`. The ones above the limit will be `SKIPPED` according to the `redeemables_sorting_rule`.
 * @member {Number} applicable_redeemables_per_category_limit
 * @default 1
 */
StackingRules.prototype['applicable_redeemables_per_category_limit'] = 1;

/**
 * Lists categories by category IDs (keys) and defines their limits (values) of applicable redeemables that belong to campaigns with that category.
 * @member {Object.<String, Number>} applicable_redeemables_category_limits
 */
StackingRules.prototype['applicable_redeemables_category_limits'] = undefined;

/**
 * Defines how many redeemables with an assigned exclusive category can be applied in one request. The ones above the limit will be `SKIPPED` according to the `redeemables_sorting_rule`.
 * @member {Number} applicable_exclusive_redeemables_limit
 * @default 1
 */
StackingRules.prototype['applicable_exclusive_redeemables_limit'] = 1;

/**
 * Defines how many redeemables with an exclusive category per category in stacking rules can be applied in one request. The ones above the limit will be `SKIPPED` according to the `redeemables_sorting_rule`.
 * @member {Number} applicable_exclusive_redeemables_per_category_limit
 * @default 1
 */
StackingRules.prototype['applicable_exclusive_redeemables_per_category_limit'] = 1;

/**
 * Lists the IDs of exclusive categories. A redeemable from a campaign with an exclusive category is the only redeemable to be redeemed when applied with redeemables from other campaigns unless these campaigns are exclusive or joint.
 * @member {Array.<String>} exclusive_categories
 */
StackingRules.prototype['exclusive_categories'] = undefined;

/**
 * Lists the IDs of the joint categories. A campaign with a joint category is always applied regardless of the exclusivity of other campaigns.
 * @member {Array.<String>} joint_categories
 */
StackingRules.prototype['joint_categories'] = undefined;

/**
 * Defines the application mode for redeemables. `\"ALL\"` means that all redeemables must be validated for the redemption to be successful. `\"PARTIAL\"` means that only those redeemables that can be validated will be redeemed. The redeemables that fail validaton will be skipped.
 * @member {module:model/StackingRules.RedeemablesApplicationModeEnum} redeemables_application_mode
 */
StackingRules.prototype['redeemables_application_mode'] = undefined;

/**
 * Defines redeemables sorting rule. `CATEGORY_HIERARCHY` means that redeemables are applied oaccording to the category priority. `REQUESTED_ORDER` means that redeemables are applied in the sequence provided in the request.
 * @member {module:model/StackingRules.RedeemablesSortingRuleEnum} redeemables_sorting_rule
 * @default 'REQUESTED_ORDER'
 */
StackingRules.prototype['redeemables_sorting_rule'] = 'REQUESTED_ORDER';

/**
 * Defines redeemables products application mode. `STACK` means that multiple discounts can be applied to a product. `ONCE` means that only one discount can be applied to the same product.
 * @member {module:model/StackingRules.RedeemablesProductsApplicationModeEnum} redeemables_products_application_mode
 */
StackingRules.prototype['redeemables_products_application_mode'] = undefined;

/**
 * Defines redeemables no effect rule. `REDEEM_ANYWAY` means that the redeemable will be redeemed regardless of any restrictions or conditions in place. `SKIP` means that the redeemable will be processed only when an applicable effect is calculated.
 * @member {module:model/StackingRules.RedeemablesNoEffectRuleEnum} redeemables_no_effect_rule
 */
StackingRules.prototype['redeemables_no_effect_rule'] = undefined;

/**
 * Lists category IDs. Redeemables with a given category are skipped even if the `redeemables_no_effect_rule` is set to `REDEEM_ANYWAY`. Category IDs can't overlap with the IDs in `no_effect_redeem_anyway_categories`.
 * @member {Array.<String>} no_effect_skip_categories
 */
StackingRules.prototype['no_effect_skip_categories'] = undefined;

/**
 * Lists category IDs. Redeemables with a given category are redeemed anyway even if the `redeemables_no_effect_rule` is set to `SKIP`. Category IDs can't overlap with the IDs in `no_effect_skip_categories`.
 * @member {Array.<String>} no_effect_redeem_anyway_categories
 */
StackingRules.prototype['no_effect_redeem_anyway_categories'] = undefined;

/**
 * Defines the rollback mode for the order. `WITH_ORDER` is a default setting. The redemption is rolled back together with the data about the order, including related discount values. `WITHOUT_ORDER` allows rolling the redemption back without affecting order data, including the applied discount values.
 * @member {module:model/StackingRules.RedeemablesRollbackOrderModeEnum} redeemables_rollback_order_mode
 */
StackingRules.prototype['redeemables_rollback_order_mode'] = undefined;





/**
 * Allowed values for the <code>redeemables_application_mode</code> property.
 * @enum {String}
 * @readonly
 */
StackingRules['RedeemablesApplicationModeEnum'] = {

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "PARTIAL"
     * @const
     */
    "PARTIAL": "PARTIAL"
};


/**
 * Allowed values for the <code>redeemables_sorting_rule</code> property.
 * @enum {String}
 * @readonly
 */
StackingRules['RedeemablesSortingRuleEnum'] = {

    /**
     * value: "CATEGORY_HIERARCHY"
     * @const
     */
    "CATEGORY_HIERARCHY": "CATEGORY_HIERARCHY",

    /**
     * value: "REQUESTED_ORDER"
     * @const
     */
    "REQUESTED_ORDER": "REQUESTED_ORDER"
};


/**
 * Allowed values for the <code>redeemables_products_application_mode</code> property.
 * @enum {String}
 * @readonly
 */
StackingRules['RedeemablesProductsApplicationModeEnum'] = {

    /**
     * value: "STACK"
     * @const
     */
    "STACK": "STACK",

    /**
     * value: "ONCE"
     * @const
     */
    "ONCE": "ONCE"
};


/**
 * Allowed values for the <code>redeemables_no_effect_rule</code> property.
 * @enum {String}
 * @readonly
 */
StackingRules['RedeemablesNoEffectRuleEnum'] = {

    /**
     * value: "REDEEM_ANYWAY"
     * @const
     */
    "REDEEM_ANYWAY": "REDEEM_ANYWAY",

    /**
     * value: "SKIP"
     * @const
     */
    "SKIP": "SKIP"
};


/**
 * Allowed values for the <code>redeemables_rollback_order_mode</code> property.
 * @enum {String}
 * @readonly
 */
StackingRules['RedeemablesRollbackOrderModeEnum'] = {

    /**
     * value: "WITH_ORDER"
     * @const
     */
    "WITH_ORDER": "WITH_ORDER",

    /**
     * value: "WITHOUT_ORDER"
     * @const
     */
    "WITHOUT_ORDER": "WITHOUT_ORDER"
};



export default StackingRules;

