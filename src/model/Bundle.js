/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BundleIdentifiedItem from './BundleIdentifiedItem';
import BundleMissingItem from './BundleMissingItem';

/**
 * The Bundle model module.
 * @module model/Bundle
 * @version v2018-08-01
 */
class Bundle {
    /**
     * Constructs a new <code>Bundle</code>.
     * Determines how the bundle conditions are met by the customer&#39;s order items. The items in the order meet the bundle condition in the following way: SKU, then product, then collection.
     * @alias module:model/Bundle
     */
    constructor() { 
        
        Bundle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Bundle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Bundle} obj Optional instance to populate.
     * @return {module:model/Bundle} The populated <code>Bundle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Bundle();

            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('identified')) {
                obj['identified'] = ApiClient.convertToType(data['identified'], [BundleIdentifiedItem]);
            }
            if (data.hasOwnProperty('missing')) {
                obj['missing'] = ApiClient.convertToType(data['missing'], [BundleMissingItem]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Bundle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Bundle</code>.
     */
    static validateJSON(data) {
        if (data['identified']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['identified'])) {
                throw new Error("Expected the field `identified` to be an array in the JSON data but got " + data['identified']);
            }
            // validate the optional field `identified` (array)
            for (const item of data['identified']) {
                BundleIdentifiedItem.validateJSON(item);
            };
        }
        if (data['missing']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['missing'])) {
                throw new Error("Expected the field `missing` to be an array in the JSON data but got " + data['missing']);
            }
            // validate the optional field `missing` (array)
            for (const item of data['missing']) {
                BundleMissingItem.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Determines how many bundles are qualified. If there are missing bundle products, the value is `0`. If the bundle is qualified, the value is `1`. The maximum number of identified bundles can equal the number set in `limit`. Also defines the multiplier of the discount for `AMOUNT`, `PERCENT`, and `UNIT` discount types. To inform end-customers that more products can be added to meet additional bundles, compare this parameter with `limit`.
 * @member {Number} quantity
 */
Bundle.prototype['quantity'] = undefined;

/**
 * Determines the maximum number of identified bundles. This also defines the maximum multiplier of the bundle discount.
 * @member {Number} limit
 */
Bundle.prototype['limit'] = undefined;

/**
 * Determines products from the customer's order items that meet bundle conditions. SKUs meet the conditions for their product that is used in the bundle. Returns only the products and their quantity that meet the bundle.
 * @member {Array.<module:model/BundleIdentifiedItem>} identified
 */
Bundle.prototype['identified'] = undefined;

/**
 * Determines products, SKUs, or collections from the bundle that are missing in the customer's order items. Determines also the missing quantity. For collections, this means that order items do not include a sufficient number of items that belong to the collection. Not returned when all required bundle items are in the order.
 * @member {Array.<module:model/BundleMissingItem>} missing
 */
Bundle.prototype['missing'] = undefined;






export default Bundle;

