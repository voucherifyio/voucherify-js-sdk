/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocationShapeDistance from './LocationShapeDistance';
import LocationShapeGeojson from './LocationShapeGeojson';

/**
 * The LocationShape model module.
 * @module model/LocationShape
 * @version v2018-08-01
 */
class LocationShape {
    /**
     * Constructs a new <code>LocationShape</code>.
     * @alias module:model/LocationShape
     */
    constructor() { 
        
        LocationShape.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationShape</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationShape} obj Optional instance to populate.
     * @return {module:model/LocationShape} The populated <code>LocationShape</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationShape();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = LocationShapeDistance.constructFromObject(data['distance']);
            }
            if (data.hasOwnProperty('geojson')) {
                obj['geojson'] = LocationShapeGeojson.constructFromObject(data['geojson']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationShape</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationShape</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // validate the optional field `distance`
        if (data['distance']) { // data not null
          LocationShapeDistance.validateJSON(data['distance']);
        }
        // validate the optional field `geojson`
        if (data['geojson']) { // data not null
          LocationShapeGeojson.validateJSON(data['geojson']);
        }

        return true;
    }


}



/**
 * @member {module:model/LocationShape.TypeEnum} type
 */
LocationShape.prototype['type'] = undefined;

/**
 * @member {module:model/LocationShape.FormatEnum} format
 */
LocationShape.prototype['format'] = undefined;

/**
 * @member {module:model/LocationShapeDistance} distance
 */
LocationShape.prototype['distance'] = undefined;

/**
 * @member {module:model/LocationShapeGeojson} geojson
 */
LocationShape.prototype['geojson'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
LocationShape['TypeEnum'] = {

    /**
     * value: "circle"
     * @const
     */
    "circle": "circle",

    /**
     * value: "polygon"
     * @const
     */
    "polygon": "polygon"
};


/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
LocationShape['FormatEnum'] = {

    /**
     * value: "distance"
     * @const
     */
    "distance": "distance",

    /**
     * value: "geojson"
     * @const
     */
    "geojson": "geojson"
};



export default LocationShape;

