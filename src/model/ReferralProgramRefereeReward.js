/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReferralProgramRefereeRewardRelatedObjectParent from './ReferralProgramRefereeRewardRelatedObjectParent';

/**
 * The ReferralProgramRefereeReward model module.
 * @module model/ReferralProgramRefereeReward
 * @version v2018-08-01
 */
class ReferralProgramRefereeReward {
    /**
     * Constructs a new <code>ReferralProgramRefereeReward</code>.
     * Defines the referee reward.
     * @alias module:model/ReferralProgramRefereeReward
     */
    constructor() { 
        
        ReferralProgramRefereeReward.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReferralProgramRefereeReward</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReferralProgramRefereeReward} obj Optional instance to populate.
     * @return {module:model/ReferralProgramRefereeReward} The populated <code>ReferralProgramRefereeReward</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReferralProgramRefereeReward();

            if (data.hasOwnProperty('related_object_parent')) {
                obj['related_object_parent'] = ReferralProgramRefereeRewardRelatedObjectParent.constructFromObject(data['related_object_parent']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReferralProgramRefereeReward</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReferralProgramRefereeReward</code>.
     */
    static validateJSON(data) {
        // validate the optional field `related_object_parent`
        if (data['related_object_parent']) { // data not null
          ReferralProgramRefereeRewardRelatedObjectParent.validateJSON(data['related_object_parent']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }

        return true;
    }


}



/**
 * @member {module:model/ReferralProgramRefereeRewardRelatedObjectParent} related_object_parent
 */
ReferralProgramRefereeReward.prototype['related_object_parent'] = undefined;

/**
 * Type of reward.
 * @member {module:model/ReferralProgramRefereeReward.TypeEnum} type
 */
ReferralProgramRefereeReward.prototype['type'] = undefined;

/**
 * Define the number of `points` to add to a loyalty card or `credits` to the balance on a gift card. In case of the gift card, the value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000.
 * @member {String} amount
 */
ReferralProgramRefereeReward.prototype['amount'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ReferralProgramRefereeReward['TypeEnum'] = {

    /**
     * value: "LOYALTY_CARD"
     * @const
     */
    "LOYALTY_CARD": "LOYALTY_CARD",

    /**
     * value: "GIFT_VOUCHER"
     * @const
     */
    "GIFT_VOUCHER": "GIFT_VOUCHER"
};



export default ReferralProgramRefereeReward;

