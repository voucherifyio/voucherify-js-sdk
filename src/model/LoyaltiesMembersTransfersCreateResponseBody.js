/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import LoyaltiesMembersTransfersCreateResponseBodyAssets from './LoyaltiesMembersTransfersCreateResponseBodyAssets';
import LoyaltiesMembersTransfersCreateResponseBodyLoyaltyCard from './LoyaltiesMembersTransfersCreateResponseBodyLoyaltyCard';
import LoyaltiesMembersTransfersCreateResponseBodyPublish from './LoyaltiesMembersTransfersCreateResponseBodyPublish';
import LoyaltiesMembersTransfersCreateResponseBodyRedemption from './LoyaltiesMembersTransfersCreateResponseBodyRedemption';
import ValidityHours from './ValidityHours';
import ValidityTimeframe from './ValidityTimeframe';

/**
 * The LoyaltiesMembersTransfersCreateResponseBody model module.
 * @module model/LoyaltiesMembersTransfersCreateResponseBody
 * @version v2018-08-01
 */
class LoyaltiesMembersTransfersCreateResponseBody {
    /**
     * Constructs a new <code>LoyaltiesMembersTransfersCreateResponseBody</code>.
     * Response body schema for **POST** &#x60;v1/loyalties/{campaignId}/members/{memberId}/transfers&#x60;.
     * @alias module:model/LoyaltiesMembersTransfersCreateResponseBody
     * @param validityTimeframe {module:model/ValidityTimeframe} 
     * @param validityDayOfWeek {Array.<module:model/LoyaltiesMembersTransfersCreateResponseBody.ValidityDayOfWeekEnum>} Integer array corresponding to the particular days of the week in which the voucher is valid.  - `0` Sunday - `1` Monday - `2` Tuesday - `3` Wednesday - `4` Thursday - `5` Friday - `6` Saturday
     */
    constructor(validityTimeframe, validityDayOfWeek) { 
        
        LoyaltiesMembersTransfersCreateResponseBody.initialize(this, validityTimeframe, validityDayOfWeek);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, validityTimeframe, validityDayOfWeek) { 
        obj['type'] = 'LOYALTY_CARD';
        obj['validity_timeframe'] = validityTimeframe;
        obj['validity_day_of_week'] = validityDayOfWeek;
    }

    /**
     * Constructs a <code>LoyaltiesMembersTransfersCreateResponseBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoyaltiesMembersTransfersCreateResponseBody} obj Optional instance to populate.
     * @return {module:model/LoyaltiesMembersTransfersCreateResponseBody} The populated <code>LoyaltiesMembersTransfersCreateResponseBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoyaltiesMembersTransfersCreateResponseBody();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('campaign')) {
                obj['campaign'] = ApiClient.convertToType(data['campaign'], 'String');
            }
            if (data.hasOwnProperty('campaign_id')) {
                obj['campaign_id'] = ApiClient.convertToType(data['campaign_id'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('category_id')) {
                obj['category_id'] = ApiClient.convertToType(data['category_id'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('loyalty_card')) {
                obj['loyalty_card'] = LoyaltiesMembersTransfersCreateResponseBodyLoyaltyCard.constructFromObject(data['loyalty_card']);
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
            }
            if (data.hasOwnProperty('expiration_date')) {
                obj['expiration_date'] = ApiClient.convertToType(data['expiration_date'], 'Date');
            }
            if (data.hasOwnProperty('validity_timeframe')) {
                obj['validity_timeframe'] = ValidityTimeframe.constructFromObject(data['validity_timeframe']);
            }
            if (data.hasOwnProperty('validity_day_of_week')) {
                obj['validity_day_of_week'] = ApiClient.convertToType(data['validity_day_of_week'], ['Number']);
            }
            if (data.hasOwnProperty('validity_hours')) {
                obj['validity_hours'] = ValidityHours.constructFromObject(data['validity_hours']);
            }
            if (data.hasOwnProperty('publish')) {
                obj['publish'] = LoyaltiesMembersTransfersCreateResponseBodyPublish.constructFromObject(data['publish']);
            }
            if (data.hasOwnProperty('redemption')) {
                obj['redemption'] = LoyaltiesMembersTransfersCreateResponseBodyRedemption.constructFromObject(data['redemption']);
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'String');
            }
            if (data.hasOwnProperty('additional_info')) {
                obj['additional_info'] = ApiClient.convertToType(data['additional_info'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('assets')) {
                obj['assets'] = LoyaltiesMembersTransfersCreateResponseBodyAssets.constructFromObject(data['assets']);
            }
            if (data.hasOwnProperty('is_referral_code')) {
                obj['is_referral_code'] = ApiClient.convertToType(data['is_referral_code'], 'Boolean');
            }
            if (data.hasOwnProperty('holder_id')) {
                obj['holder_id'] = ApiClient.convertToType(data['holder_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoyaltiesMembersTransfersCreateResponseBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoyaltiesMembersTransfersCreateResponseBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoyaltiesMembersTransfersCreateResponseBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['campaign'] && !(typeof data['campaign'] === 'string' || data['campaign'] instanceof String)) {
            throw new Error("Expected the field `campaign` to be a primitive type in the JSON string but got " + data['campaign']);
        }
        // ensure the json data is a string
        if (data['campaign_id'] && !(typeof data['campaign_id'] === 'string' || data['campaign_id'] instanceof String)) {
            throw new Error("Expected the field `campaign_id` to be a primitive type in the JSON string but got " + data['campaign_id']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['category_id'] && !(typeof data['category_id'] === 'string' || data['category_id'] instanceof String)) {
            throw new Error("Expected the field `category_id` to be a primitive type in the JSON string but got " + data['category_id']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `loyalty_card`
        if (data['loyalty_card']) { // data not null
          LoyaltiesMembersTransfersCreateResponseBodyLoyaltyCard.validateJSON(data['loyalty_card']);
        }
        // validate the optional field `validity_timeframe`
        if (data['validity_timeframe']) { // data not null
          ValidityTimeframe.validateJSON(data['validity_timeframe']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['validity_day_of_week'])) {
            throw new Error("Expected the field `validity_day_of_week` to be an array in the JSON data but got " + data['validity_day_of_week']);
        }
        // validate the optional field `validity_hours`
        if (data['validity_hours']) { // data not null
          ValidityHours.validateJSON(data['validity_hours']);
        }
        // validate the optional field `publish`
        if (data['publish']) { // data not null
          LoyaltiesMembersTransfersCreateResponseBodyPublish.validateJSON(data['publish']);
        }
        // validate the optional field `redemption`
        if (data['redemption']) { // data not null
          LoyaltiesMembersTransfersCreateResponseBodyRedemption.validateJSON(data['redemption']);
        }
        // ensure the json data is a string
        if (data['active'] && !(typeof data['active'] === 'string' || data['active'] instanceof String)) {
            throw new Error("Expected the field `active` to be a primitive type in the JSON string but got " + data['active']);
        }
        // ensure the json data is a string
        if (data['additional_info'] && !(typeof data['additional_info'] === 'string' || data['additional_info'] instanceof String)) {
            throw new Error("Expected the field `additional_info` to be a primitive type in the JSON string but got " + data['additional_info']);
        }
        // validate the optional field `assets`
        if (data['assets']) { // data not null
          LoyaltiesMembersTransfersCreateResponseBodyAssets.validateJSON(data['assets']);
        }
        // ensure the json data is a string
        if (data['holder_id'] && !(typeof data['holder_id'] === 'string' || data['holder_id'] instanceof String)) {
            throw new Error("Expected the field `holder_id` to be a primitive type in the JSON string but got " + data['holder_id']);
        }

        return true;
    }


}

LoyaltiesMembersTransfersCreateResponseBody.RequiredProperties = ["validity_timeframe", "validity_day_of_week"];

/**
 * Assigned by the Voucherify API, identifies the voucher.
 * @member {String} id
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['id'] = undefined;

/**
 * A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters.
 * @member {String} code
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['code'] = undefined;

/**
 * A unique campaign name, identifies the voucher's parent campaign.
 * @member {String} campaign
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['campaign'] = undefined;

/**
 * Assigned by the Voucherify API, identifies the voucher's parent campaign.
 * @member {String} campaign_id
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['campaign_id'] = undefined;

/**
 * Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint.
 * @member {String} category
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['category'] = undefined;

/**
 * Unique category ID assigned by Voucherify.
 * @member {String} category_id
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['category_id'] = undefined;

/**
 * @member {Array.<module:model/Category>} categories
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['categories'] = undefined;

/**
 * Defines the type of the voucher.
 * @member {module:model/LoyaltiesMembersTransfersCreateResponseBody.TypeEnum} type
 * @default 'LOYALTY_CARD'
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['type'] = 'LOYALTY_CARD';

/**
 * @member {module:model/LoyaltiesMembersTransfersCreateResponseBodyLoyaltyCard} loyalty_card
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['loyalty_card'] = undefined;

/**
 * Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is inactive before this date.
 * @member {Date} start_date
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['start_date'] = undefined;

/**
 * Expiration timestamp defines when the code expires in ISO 8601 format. Voucher is inactive after this date.
 * @member {Date} expiration_date
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['expiration_date'] = undefined;

/**
 * @member {module:model/ValidityTimeframe} validity_timeframe
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['validity_timeframe'] = undefined;

/**
 * Integer array corresponding to the particular days of the week in which the voucher is valid.  - `0` Sunday - `1` Monday - `2` Tuesday - `3` Wednesday - `4` Thursday - `5` Friday - `6` Saturday
 * @member {Array.<module:model/LoyaltiesMembersTransfersCreateResponseBody.ValidityDayOfWeekEnum>} validity_day_of_week
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['validity_day_of_week'] = undefined;

/**
 * @member {module:model/ValidityHours} validity_hours
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['validity_hours'] = undefined;

/**
 * @member {module:model/LoyaltiesMembersTransfersCreateResponseBodyPublish} publish
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['publish'] = undefined;

/**
 * @member {module:model/LoyaltiesMembersTransfersCreateResponseBodyRedemption} redemption
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['redemption'] = undefined;

/**
 * A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the start_date and expiration_date.  - `true` indicates an active voucher - `false` indicates an inactive voucher
 * @member {String} active
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['active'] = undefined;

/**
 * An optional field to keep any extra textual information about the code such as a code description and details.
 * @member {String} additional_info
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['additional_info'] = undefined;

/**
 * The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format.
 * @member {Object} metadata
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['metadata'] = undefined;

/**
 * @member {module:model/LoyaltiesMembersTransfersCreateResponseBodyAssets} assets
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['assets'] = undefined;

/**
 * Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`.
 * @member {Boolean} is_referral_code
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['is_referral_code'] = undefined;

/**
 * Unique customer identifier of the redeemable holder. It equals to the customer ID assigned by Voucherify.
 * @member {String} holder_id
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['holder_id'] = undefined;

/**
 * Timestamp representing the date and time when the voucher was last updated in ISO 8601 format.
 * @member {Date} updated_at
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['updated_at'] = undefined;

/**
 * @member {Date} created_at
 */
LoyaltiesMembersTransfersCreateResponseBody.prototype['created_at'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
LoyaltiesMembersTransfersCreateResponseBody['TypeEnum'] = {

    /**
     * value: "LOYALTY_CARD"
     * @const
     */
    "LOYALTY_CARD": "LOYALTY_CARD"
};


/**
 * Allowed values for the <code>validityDayOfWeek</code> property.
 * @enum {Number}
 * @readonly
 */
LoyaltiesMembersTransfersCreateResponseBody['ValidityDayOfWeekEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 5
     * @const
     */
    "5": 5,

    /**
     * value: 6
     * @const
     */
    "6": 6
};



export default LoyaltiesMembersTransfersCreateResponseBody;

