/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductsUpdateRequestBody model module.
 * @module model/ProductsUpdateRequestBody
 * @version v2018-08-01
 */
class ProductsUpdateRequestBody {
    /**
     * Constructs a new <code>ProductsUpdateRequestBody</code>.
     * Request schema for **PUT** &#x60;v1/products&#x60;.
     * @alias module:model/ProductsUpdateRequestBody
     */
    constructor() { 
        
        ProductsUpdateRequestBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductsUpdateRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductsUpdateRequestBody} obj Optional instance to populate.
     * @return {module:model/ProductsUpdateRequestBody} The populated <code>ProductsUpdateRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductsUpdateRequestBody();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductsUpdateRequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductsUpdateRequestBody</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['attributes'])) {
            throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }

        return true;
    }


}



/**
 * Unique user-defined product name.
 * @member {String} name
 */
ProductsUpdateRequestBody.prototype['name'] = undefined;

/**
 * Unit price. It is represented by a value multiplied by 100 to accurately reflect 2 decimal places, such as `$100.00` being expressed as `10000`.
 * @member {Number} price
 */
ProductsUpdateRequestBody.prototype['price'] = undefined;

/**
 * A list of product attributes whose values you can customize for given SKUs: `[\"color\",\"size\",\"ranking\"]`. Each child SKU can have a unique value for a given attribute.
 * @member {Array.<String>} attributes
 */
ProductsUpdateRequestBody.prototype['attributes'] = undefined;

/**
 * The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.
 * @member {Object} metadata
 */
ProductsUpdateRequestBody.prototype['metadata'] = undefined;

/**
 * The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.
 * @member {String} image_url
 */
ProductsUpdateRequestBody.prototype['image_url'] = undefined;






export default ProductsUpdateRequestBody;

