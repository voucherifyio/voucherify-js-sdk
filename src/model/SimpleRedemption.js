/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleCustomer from './SimpleCustomer';
import SimpleOrder from './SimpleOrder';
import SimplePromotionTier from './SimplePromotionTier';
import SimpleRedemptionChannel from './SimpleRedemptionChannel';
import SimpleRedemptionRewardResult from './SimpleRedemptionRewardResult';
import SimpleVoucher from './SimpleVoucher';

/**
 * The SimpleRedemption model module.
 * @module model/SimpleRedemption
 * @version v2018-08-01
 */
class SimpleRedemption {
    /**
     * Constructs a new <code>SimpleRedemption</code>.
     * Simplified redemption data.
     * @alias module:model/SimpleRedemption
     */
    constructor() { 
        
        SimpleRedemption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['object'] = 'redemption';
    }

    /**
     * Constructs a <code>SimpleRedemption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleRedemption} obj Optional instance to populate.
     * @return {module:model/SimpleRedemption} The populated <code>SimpleRedemption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleRedemption();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('tracking_id')) {
                obj['tracking_id'] = ApiClient.convertToType(data['tracking_id'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = SimpleOrder.constructFromObject(data['order']);
            }
            if (data.hasOwnProperty('reward')) {
                obj['reward'] = SimpleRedemptionRewardResult.constructFromObject(data['reward']);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = SimpleCustomer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('voucher')) {
                obj['voucher'] = SimpleVoucher.constructFromObject(data['voucher']);
            }
            if (data.hasOwnProperty('promotion_tier')) {
                obj['promotion_tier'] = SimplePromotionTier.constructFromObject(data['promotion_tier']);
            }
            if (data.hasOwnProperty('redemption')) {
                obj['redemption'] = ApiClient.convertToType(data['redemption'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('failure_code')) {
                obj['failure_code'] = ApiClient.convertToType(data['failure_code'], 'String');
            }
            if (data.hasOwnProperty('failure_message')) {
                obj['failure_message'] = ApiClient.convertToType(data['failure_message'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = SimpleRedemptionChannel.constructFromObject(data['channel']);
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimpleRedemption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimpleRedemption</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['tracking_id'] && !(typeof data['tracking_id'] === 'string' || data['tracking_id'] instanceof String)) {
            throw new Error("Expected the field `tracking_id` to be a primitive type in the JSON string but got " + data['tracking_id']);
        }
        // validate the optional field `order`
        if (data['order']) { // data not null
          SimpleOrder.validateJSON(data['order']);
        }
        // validate the optional field `reward`
        if (data['reward']) { // data not null
          SimpleRedemptionRewardResult.validateJSON(data['reward']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          SimpleCustomer.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `voucher`
        if (data['voucher']) { // data not null
          SimpleVoucher.validateJSON(data['voucher']);
        }
        // validate the optional field `promotion_tier`
        if (data['promotion_tier']) { // data not null
          SimplePromotionTier.validateJSON(data['promotion_tier']);
        }
        // ensure the json data is a string
        if (data['redemption'] && !(typeof data['redemption'] === 'string' || data['redemption'] instanceof String)) {
            throw new Error("Expected the field `redemption` to be a primitive type in the JSON string but got " + data['redemption']);
        }
        // ensure the json data is a string
        if (data['failure_code'] && !(typeof data['failure_code'] === 'string' || data['failure_code'] instanceof String)) {
            throw new Error("Expected the field `failure_code` to be a primitive type in the JSON string but got " + data['failure_code']);
        }
        // ensure the json data is a string
        if (data['failure_message'] && !(typeof data['failure_message'] === 'string' || data['failure_message'] instanceof String)) {
            throw new Error("Expected the field `failure_message` to be a primitive type in the JSON string but got " + data['failure_message']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // validate the optional field `channel`
        if (data['channel']) { // data not null
          SimpleRedemptionChannel.validateJSON(data['channel']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }

        return true;
    }


}



/**
 * Unique redemption ID.
 * @member {String} id
 */
SimpleRedemption.prototype['id'] = undefined;

/**
 * Unique customer ID of the redeeming customer.
 * @member {String} customer_id
 */
SimpleRedemption.prototype['customer_id'] = undefined;

/**
 * Hashed customer source ID.
 * @member {String} tracking_id
 */
SimpleRedemption.prototype['tracking_id'] = undefined;

/**
 * Timestamp representing the date and time when the redemption was created in the ISO 8601 format.
 * @member {Date} date
 */
SimpleRedemption.prototype['date'] = undefined;

/**
 * For gift cards, this is a positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the number of redeemed credits. For loyalty cards, this is the number of loyalty points used in the transaction. In the case of redemption rollback, the numbers are expressed as negative integers.
 * @member {Number} amount
 */
SimpleRedemption.prototype['amount'] = undefined;

/**
 * @member {module:model/SimpleOrder} order
 */
SimpleRedemption.prototype['order'] = undefined;

/**
 * @member {module:model/SimpleRedemptionRewardResult} reward
 */
SimpleRedemption.prototype['reward'] = undefined;

/**
 * @member {module:model/SimpleCustomer} customer
 */
SimpleRedemption.prototype['customer'] = undefined;

/**
 * Redemption result.
 * @member {module:model/SimpleRedemption.ResultEnum} result
 */
SimpleRedemption.prototype['result'] = undefined;

/**
 * @member {module:model/SimpleRedemption.StatusEnum} status
 */
SimpleRedemption.prototype['status'] = undefined;

/**
 * @member {module:model/SimpleVoucher} voucher
 */
SimpleRedemption.prototype['voucher'] = undefined;

/**
 * @member {module:model/SimplePromotionTier} promotion_tier
 */
SimpleRedemption.prototype['promotion_tier'] = undefined;

/**
 * Unique redemption ID of the parent redemption.
 * @member {String} redemption
 */
SimpleRedemption.prototype['redemption'] = undefined;

/**
 * The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption.
 * @member {Object} metadata
 */
SimpleRedemption.prototype['metadata'] = undefined;

/**
 * If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed.
 * @member {String} failure_code
 */
SimpleRedemption.prototype['failure_code'] = undefined;

/**
 * If the result is `FAILURE`, this parameter will provide an expanded reason as to why the redemption failed.
 * @member {String} failure_message
 */
SimpleRedemption.prototype['failure_message'] = undefined;

/**
 * The reason for the redemption rollback.
 * @member {String} reason
 */
SimpleRedemption.prototype['reason'] = undefined;

/**
 * @member {module:model/SimpleRedemptionChannel} channel
 */
SimpleRedemption.prototype['channel'] = undefined;

/**
 * The type of the object represented by the JSON. This object stores information about the `redemption`.
 * @member {String} object
 * @default 'redemption'
 */
SimpleRedemption.prototype['object'] = 'redemption';





/**
 * Allowed values for the <code>result</code> property.
 * @enum {String}
 * @readonly
 */
SimpleRedemption['ResultEnum'] = {

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "FAILURE"
     * @const
     */
    "FAILURE": "FAILURE"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SimpleRedemption['StatusEnum'] = {

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "ROLLED BACK"
     * @const
     */
    "ROLLED BACK": "ROLLED BACK"
};



export default SimpleRedemption;

