/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomersUpdateRequestBodyAddress from './CustomersUpdateRequestBodyAddress';

/**
 * The CustomersUpdateRequestBody model module.
 * @module model/CustomersUpdateRequestBody
 * @version v2018-08-01
 */
class CustomersUpdateRequestBody {
    /**
     * Constructs a new <code>CustomersUpdateRequestBody</code>.
     * Request body schema for **PUT** &#x60;v1/customers/{customerId}&#x60;.
     * @alias module:model/CustomersUpdateRequestBody
     */
    constructor() { 
        
        CustomersUpdateRequestBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomersUpdateRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomersUpdateRequestBody} obj Optional instance to populate.
     * @return {module:model/CustomersUpdateRequestBody} The populated <code>CustomersUpdateRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomersUpdateRequestBody();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('birthday')) {
                obj['birthday'] = ApiClient.convertToType(data['birthday'], 'Date');
            }
            if (data.hasOwnProperty('birthdate')) {
                obj['birthdate'] = ApiClient.convertToType(data['birthdate'], 'Date');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = CustomersUpdateRequestBodyAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomersUpdateRequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomersUpdateRequestBody</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          CustomersUpdateRequestBodyAddress.validateJSON(data['address']);
        }

        return true;
    }


}



/**
 * Customer's first and last name.
 * @member {String} name
 */
CustomersUpdateRequestBody.prototype['name'] = undefined;

/**
 * An arbitrary string that you can attach to a customer object.
 * @member {String} description
 */
CustomersUpdateRequestBody.prototype['description'] = undefined;

/**
 * Customer's email address.
 * @member {String} email
 */
CustomersUpdateRequestBody.prototype['email'] = undefined;

/**
 * Customer's phone number. This parameter is mandatory when you try to send out codes to customers via an SMS channel.
 * @member {String} phone
 */
CustomersUpdateRequestBody.prototype['phone'] = undefined;

/**
 * `Deprecated`. ~~Customer's birthdate; format YYYY-MM-DD~~.
 * @member {Date} birthday
 */
CustomersUpdateRequestBody.prototype['birthday'] = undefined;

/**
 * Customer's birthdate; format YYYY-MM-DD.
 * @member {Date} birthdate
 */
CustomersUpdateRequestBody.prototype['birthdate'] = undefined;

/**
 * @member {module:model/CustomersUpdateRequestBodyAddress} address
 */
CustomersUpdateRequestBody.prototype['address'] = undefined;

/**
 * A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments.
 * @member {Object} metadata
 */
CustomersUpdateRequestBody.prototype['metadata'] = undefined;






export default CustomersUpdateRequestBody;

