/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventSourceApiKey from './EventSourceApiKey';
import EventSourceUser from './EventSourceUser';

/**
 * The EventSource model module.
 * @module model/EventSource
 * @version v2018-08-01
 */
class EventSource {
    /**
     * Constructs a new <code>EventSource</code>.
     * Contains the source of the object that initiated the event.
     * @alias module:model/EventSource
     */
    constructor() { 
        
        EventSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventSource} obj Optional instance to populate.
     * @return {module:model/EventSource} The populated <code>EventSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventSource();

            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = EventSourceUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('api_key')) {
                obj['api_key'] = EventSourceApiKey.constructFromObject(data['api_key']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          EventSourceUser.validateJSON(data['user']);
        }
        // validate the optional field `api_key`
        if (data['api_key']) { // data not null
          EventSourceApiKey.validateJSON(data['api_key']);
        }

        return true;
    }


}



/**
 * Determines the channel that initiated the event.
 * @member {module:model/EventSource.ChannelEnum} channel
 */
EventSource.prototype['channel'] = undefined;

/**
 * @member {module:model/EventSourceUser} user
 */
EventSource.prototype['user'] = undefined;

/**
 * @member {module:model/EventSourceApiKey} api_key
 */
EventSource.prototype['api_key'] = undefined;





/**
 * Allowed values for the <code>channel</code> property.
 * @enum {String}
 * @readonly
 */
EventSource['ChannelEnum'] = {

    /**
     * value: "USER_PORTAL"
     * @const
     */
    "USER_PORTAL": "USER_PORTAL",

    /**
     * value: "API"
     * @const
     */
    "API": "API",

    /**
     * value: "CLIENT_API"
     * @const
     */
    "CLIENT_API": "CLIENT_API",

    /**
     * value: "INTERNAL"
     * @const
     */
    "INTERNAL": "INTERNAL"
};



export default EventSource;

