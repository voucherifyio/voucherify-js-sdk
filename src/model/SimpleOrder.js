/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleOrderItem from './SimpleOrderItem';

/**
 * The SimpleOrder model module.
 * @module model/SimpleOrder
 * @version v2018-08-01
 */
class SimpleOrder {
    /**
     * Constructs a new <code>SimpleOrder</code>.
     * Order information.
     * @alias module:model/SimpleOrder
     */
    constructor() { 
        
        SimpleOrder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['object'] = 'order';
    }

    /**
     * Constructs a <code>SimpleOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleOrder} obj Optional instance to populate.
     * @return {module:model/SimpleOrder} The populated <code>SimpleOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleOrder();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('referrer_id')) {
                obj['referrer_id'] = ApiClient.convertToType(data['referrer_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('discount_amount')) {
                obj['discount_amount'] = ApiClient.convertToType(data['discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('applied_discount_amount')) {
                obj['applied_discount_amount'] = ApiClient.convertToType(data['applied_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('items_discount_amount')) {
                obj['items_discount_amount'] = ApiClient.convertToType(data['items_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('items_applied_discount_amount')) {
                obj['items_applied_discount_amount'] = ApiClient.convertToType(data['items_applied_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('total_discount_amount')) {
                obj['total_discount_amount'] = ApiClient.convertToType(data['total_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('total_applied_discount_amount')) {
                obj['total_applied_discount_amount'] = ApiClient.convertToType(data['total_applied_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('total_amount')) {
                obj['total_amount'] = ApiClient.convertToType(data['total_amount'], 'Number');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [SimpleOrderItem]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimpleOrder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimpleOrder</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['source_id'] && !(typeof data['source_id'] === 'string' || data['source_id'] instanceof String)) {
            throw new Error("Expected the field `source_id` to be a primitive type in the JSON string but got " + data['source_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['referrer_id'] && !(typeof data['referrer_id'] === 'string' || data['referrer_id'] instanceof String)) {
            throw new Error("Expected the field `referrer_id` to be a primitive type in the JSON string but got " + data['referrer_id']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                SimpleOrderItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }

        return true;
    }


}



/**
 * Unique identifier of an existing order that will be linked to the redemption of this request.
 * @member {String} id
 */
SimpleOrder.prototype['id'] = undefined;

/**
 * Unique source identifier of an existing order that will be linked to the redemption of this request.
 * @member {String} source_id
 */
SimpleOrder.prototype['source_id'] = undefined;

/**
 * The order status.
 * @member {module:model/SimpleOrder.StatusEnum} status
 */
SimpleOrder.prototype['status'] = undefined;

/**
 * Unique customer identifier of the customer making the purchase. The ID is assigned by Voucherify.
 * @member {String} customer_id
 */
SimpleOrder.prototype['customer_id'] = undefined;

/**
 * Unique identifier of the referrer assigned by Voucherify.
 * @member {String} referrer_id
 */
SimpleOrder.prototype['referrer_id'] = undefined;

/**
 * A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.
 * @member {Number} amount
 */
SimpleOrder.prototype['amount'] = undefined;

/**
 * Sum of all order-level discounts applied to the order. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
 * @member {Number} discount_amount
 */
SimpleOrder.prototype['discount_amount'] = undefined;

/**
 * This field shows the order-level discount applied. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
 * @member {Number} applied_discount_amount
 */
SimpleOrder.prototype['applied_discount_amount'] = undefined;

/**
 * Sum of all product-specific discounts applied to the order.  It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
 * @member {Number} items_discount_amount
 */
SimpleOrder.prototype['items_discount_amount'] = undefined;

/**
 * Sum of all product-specific discounts applied in a particular request. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).   `sum(items, i => i.applied_discount_amount)`
 * @member {Number} items_applied_discount_amount
 */
SimpleOrder.prototype['items_applied_discount_amount'] = undefined;

/**
 * Sum of all order-level AND all product-specific discounts applied to the order. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
 * @member {Number} total_discount_amount
 */
SimpleOrder.prototype['total_discount_amount'] = undefined;

/**
 * Sum of all order-level AND all product-specific discounts applied in a particular request. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00). `total_applied_discount_amount` = `applied_discount_amount` + `items_applied_discount_amount`
 * @member {Number} total_applied_discount_amount
 */
SimpleOrder.prototype['total_applied_discount_amount'] = undefined;

/**
 * Order amount after undoing all the discounts through the rollback redemption. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
 * @member {Number} total_amount
 */
SimpleOrder.prototype['total_amount'] = undefined;

/**
 * Array of items applied to the order. It can include up to 500 items.
 * @member {Array.<module:model/SimpleOrderItem>} items
 */
SimpleOrder.prototype['items'] = undefined;

/**
 * A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format. It can be used to define business validation rules or discount formulas.
 * @member {Object} metadata
 */
SimpleOrder.prototype['metadata'] = undefined;

/**
 * The type of the object represented by JSON.
 * @member {module:model/SimpleOrder.ObjectEnum} object
 * @default 'order'
 */
SimpleOrder.prototype['object'] = 'order';





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SimpleOrder['StatusEnum'] = {

    /**
     * value: "CREATED"
     * @const
     */
    "CREATED": "CREATED",

    /**
     * value: "PAID"
     * @const
     */
    "PAID": "PAID",

    /**
     * value: "CANCELED"
     * @const
     */
    "CANCELED": "CANCELED",

    /**
     * value: "FULFILLED"
     * @const
     */
    "FULFILLED": "FULFILLED"
};


/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
SimpleOrder['ObjectEnum'] = {

    /**
     * value: "order"
     * @const
     */
    "order": "order"
};



export default SimpleOrder;

