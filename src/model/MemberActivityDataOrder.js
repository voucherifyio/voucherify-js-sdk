/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MemberActivityDataOrderCustomer from './MemberActivityDataOrderCustomer';
import MemberActivityDataOrderItemsItem from './MemberActivityDataOrderItemsItem';
import MemberActivityDataOrderReferrer from './MemberActivityDataOrderReferrer';
import OrderRedemptionsEntry from './OrderRedemptionsEntry';

/**
 * The MemberActivityDataOrder model module.
 * @module model/MemberActivityDataOrder
 * @version v2018-08-01
 */
class MemberActivityDataOrder {
    /**
     * Constructs a new <code>MemberActivityDataOrder</code>.
     * @alias module:model/MemberActivityDataOrder
     */
    constructor() { 
        
        MemberActivityDataOrder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['object'] = 'order';
    }

    /**
     * Constructs a <code>MemberActivityDataOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemberActivityDataOrder} obj Optional instance to populate.
     * @return {module:model/MemberActivityDataOrder} The populated <code>MemberActivityDataOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemberActivityDataOrder();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('referrer_id')) {
                obj['referrer_id'] = ApiClient.convertToType(data['referrer_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('discount_amount')) {
                obj['discount_amount'] = ApiClient.convertToType(data['discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('applied_discount_amount')) {
                obj['applied_discount_amount'] = ApiClient.convertToType(data['applied_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('items_discount_amount')) {
                obj['items_discount_amount'] = ApiClient.convertToType(data['items_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('items_applied_discount_amount')) {
                obj['items_applied_discount_amount'] = ApiClient.convertToType(data['items_applied_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('total_discount_amount')) {
                obj['total_discount_amount'] = ApiClient.convertToType(data['total_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('total_applied_discount_amount')) {
                obj['total_applied_discount_amount'] = ApiClient.convertToType(data['total_applied_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('total_amount')) {
                obj['total_amount'] = ApiClient.convertToType(data['total_amount'], 'Number');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [MemberActivityDataOrderItemsItem]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('initial_amount')) {
                obj['initial_amount'] = ApiClient.convertToType(data['initial_amount'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = MemberActivityDataOrderCustomer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('referrer')) {
                obj['referrer'] = MemberActivityDataOrderReferrer.constructFromObject(data['referrer']);
            }
            if (data.hasOwnProperty('redemptions')) {
                obj['redemptions'] = ApiClient.convertToType(data['redemptions'], {'String': OrderRedemptionsEntry});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MemberActivityDataOrder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MemberActivityDataOrder</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['source_id'] && !(typeof data['source_id'] === 'string' || data['source_id'] instanceof String)) {
            throw new Error("Expected the field `source_id` to be a primitive type in the JSON string but got " + data['source_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['referrer_id'] && !(typeof data['referrer_id'] === 'string' || data['referrer_id'] instanceof String)) {
            throw new Error("Expected the field `referrer_id` to be a primitive type in the JSON string but got " + data['referrer_id']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                MemberActivityDataOrderItemsItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          MemberActivityDataOrderCustomer.validateJSON(data['customer']);
        }
        // validate the optional field `referrer`
        if (data['referrer']) { // data not null
          MemberActivityDataOrderReferrer.validateJSON(data['referrer']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
MemberActivityDataOrder.prototype['id'] = undefined;

/**
 * @member {String} source_id
 */
MemberActivityDataOrder.prototype['source_id'] = undefined;

/**
 * The order status.
 * @member {module:model/MemberActivityDataOrder.StatusEnum} status
 */
MemberActivityDataOrder.prototype['status'] = undefined;

/**
 * Unique customer identifier of the customer making the purchase. The ID is assigned by Voucherify.
 * @member {String} customer_id
 */
MemberActivityDataOrder.prototype['customer_id'] = undefined;

/**
 * @member {String} referrer_id
 */
MemberActivityDataOrder.prototype['referrer_id'] = undefined;

/**
 * A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts. and This is the sum of the order items' amounts. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
 * @member {Number} amount
 */
MemberActivityDataOrder.prototype['amount'] = undefined;

/**
 * Sum of all order-level discounts applied to the order. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
 * @member {Number} discount_amount
 */
MemberActivityDataOrder.prototype['discount_amount'] = undefined;

/**
 * This field shows the order-level discount applied. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
 * @member {Number} applied_discount_amount
 */
MemberActivityDataOrder.prototype['applied_discount_amount'] = undefined;

/**
 * Sum of all product-specific discounts applied to the order.  It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00). and Sum of all product-specific discounts applied to the order. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
 * @member {Number} items_discount_amount
 */
MemberActivityDataOrder.prototype['items_discount_amount'] = undefined;

/**
 * Sum of all product-specific discounts applied in a particular request. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).   `sum(items, i => i.applied_discount_amount)`
 * @member {Number} items_applied_discount_amount
 */
MemberActivityDataOrder.prototype['items_applied_discount_amount'] = undefined;

/**
 * Sum of all order-level AND all product-specific discounts applied to the order. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
 * @member {Number} total_discount_amount
 */
MemberActivityDataOrder.prototype['total_discount_amount'] = undefined;

/**
 * Sum of all order-level AND all product-specific discounts applied in a particular request. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00). `total_applied_discount_amount` = `applied_discount_amount` + `items_applied_discount_amount` and Sum of all order-level AND all product-specific discounts applied in a particular request. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).   `total_applied_discount_amount` = `applied_discount_amount` + `items_applied_discount_amount`
 * @member {Number} total_applied_discount_amount
 */
MemberActivityDataOrder.prototype['total_applied_discount_amount'] = undefined;

/**
 * Order amount after undoing all the discounts through the rollback redemption. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
 * @member {Number} total_amount
 */
MemberActivityDataOrder.prototype['total_amount'] = undefined;

/**
 * Array of items applied to the order. It can include up to 500 items.
 * @member {Array.<module:model/MemberActivityDataOrderItemsItem>} items
 */
MemberActivityDataOrder.prototype['items'] = undefined;

/**
 * A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format. It can be used to define business validation rules or discount formulas.
 * @member {Object} metadata
 */
MemberActivityDataOrder.prototype['metadata'] = undefined;

/**
 * The type of the object represented by JSON.
 * @member {module:model/MemberActivityDataOrder.ObjectEnum} object
 * @default 'order'
 */
MemberActivityDataOrder.prototype['object'] = 'order';

/**
 * This is the sum of the order items' amounts before any discount or other effect (e.g. add missing units) is applied. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
 * @member {Number} initial_amount
 */
MemberActivityDataOrder.prototype['initial_amount'] = undefined;

/**
 * Timestamp representing the date and time when the order was created. The value is shown in the ISO 8601 format.
 * @member {Date} created_at
 */
MemberActivityDataOrder.prototype['created_at'] = undefined;

/**
 * Timestamp representing the date and time when the order was last updated in ISO 8601 format.
 * @member {Date} updated_at
 */
MemberActivityDataOrder.prototype['updated_at'] = undefined;

/**
 * @member {module:model/MemberActivityDataOrderCustomer} customer
 */
MemberActivityDataOrder.prototype['customer'] = undefined;

/**
 * @member {module:model/MemberActivityDataOrderReferrer} referrer
 */
MemberActivityDataOrder.prototype['referrer'] = undefined;

/**
 * @member {Object.<String, module:model/OrderRedemptionsEntry>} redemptions
 */
MemberActivityDataOrder.prototype['redemptions'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
MemberActivityDataOrder['StatusEnum'] = {

    /**
     * value: "CREATED"
     * @const
     */
    "CREATED": "CREATED",

    /**
     * value: "PAID"
     * @const
     */
    "PAID": "PAID",

    /**
     * value: "CANCELED"
     * @const
     */
    "CANCELED": "CANCELED",

    /**
     * value: "FULFILLED"
     * @const
     */
    "FULFILLED": "FULFILLED"
};


/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
MemberActivityDataOrder['ObjectEnum'] = {

    /**
     * value: "order"
     * @const
     */
    "order": "order"
};



export default MemberActivityDataOrder;

