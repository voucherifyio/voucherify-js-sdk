/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoyaltyTiersExpirationAllExpirationDateRounding from './LoyaltyTiersExpirationAllExpirationDateRounding';

/**
 * The LoyaltyTiersExpirationAllExpirationDate model module.
 * @module model/LoyaltyTiersExpirationAllExpirationDate
 * @version v2018-08-01
 */
class LoyaltyTiersExpirationAllExpirationDate {
    /**
     * Constructs a new <code>LoyaltyTiersExpirationAllExpirationDate</code>.
     * Defines the conditions for the expiration date of a tier.
     * @alias module:model/LoyaltyTiersExpirationAllExpirationDate
     */
    constructor() { 
        
        LoyaltyTiersExpirationAllExpirationDate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoyaltyTiersExpirationAllExpirationDate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoyaltyTiersExpirationAllExpirationDate} obj Optional instance to populate.
     * @return {module:model/LoyaltyTiersExpirationAllExpirationDate} The populated <code>LoyaltyTiersExpirationAllExpirationDate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoyaltyTiersExpirationAllExpirationDate();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('extend')) {
                obj['extend'] = ApiClient.convertToType(data['extend'], 'String');
            }
            if (data.hasOwnProperty('rounding')) {
                obj['rounding'] = LoyaltyTiersExpirationAllExpirationDateRounding.constructFromObject(data['rounding']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoyaltyTiersExpirationAllExpirationDate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoyaltyTiersExpirationAllExpirationDate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['extend'] && !(typeof data['extend'] === 'string' || data['extend'] instanceof String)) {
            throw new Error("Expected the field `extend` to be a primitive type in the JSON string but got " + data['extend']);
        }
        // validate the optional field `rounding`
        if (data['rounding']) { // data not null
          LoyaltyTiersExpirationAllExpirationDateRounding.validateJSON(data['rounding']);
        }

        return true;
    }


}



/**
 * What triggers the tier to expire for a customer.     `END_OF_PERIOD`: Expire tier at the end of the period.     `END_OF_NEXT_PERIOD`:  Expire tier at the end of the next period.   `BALANCE_DROP`: Tier expires when the points balance drops below the required range of the tier.   `CUSTOM`: Tier expires after a certain time period passes following the instance the points balance drops below the required range of the tier.
 * @member {module:model/LoyaltyTiersExpirationAllExpirationDate.TypeEnum} type
 */
LoyaltyTiersExpirationAllExpirationDate.prototype['type'] = undefined;

/**
 * Extend the expiration by adding extra months or days in ISO 8601 format. The tier will remain active even though it reaches its expiration time period. For example, a tier with a duration of `P3M` will be valid for an additional duration of 3 months and a tier with a duration of `P1D` will be valid for an additional duration of 1 day.
 * @member {String} extend
 */
LoyaltyTiersExpirationAllExpirationDate.prototype['extend'] = undefined;

/**
 * @member {module:model/LoyaltyTiersExpirationAllExpirationDateRounding} rounding
 */
LoyaltyTiersExpirationAllExpirationDate.prototype['rounding'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
LoyaltyTiersExpirationAllExpirationDate['TypeEnum'] = {

    /**
     * value: "END_OF_PERIOD"
     * @const
     */
    "END_OF_PERIOD": "END_OF_PERIOD",

    /**
     * value: "END_OF_NEXT_PERIOD"
     * @const
     */
    "END_OF_NEXT_PERIOD": "END_OF_NEXT_PERIOD",

    /**
     * value: "BALANCE_DROP"
     * @const
     */
    "BALANCE_DROP": "BALANCE_DROP",

    /**
     * value: "CUSTOM"
     * @const
     */
    "CUSTOM": "CUSTOM"
};



export default LoyaltyTiersExpirationAllExpirationDate;

