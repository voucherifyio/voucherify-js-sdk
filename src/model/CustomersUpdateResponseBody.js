/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerLoyalty from './CustomerLoyalty';
import CustomerReferrals from './CustomerReferrals';
import CustomerSummary from './CustomerSummary';
import CustomersUpdateResponseBodyAddress from './CustomersUpdateResponseBodyAddress';
import CustomersUpdateResponseBodyAssets from './CustomersUpdateResponseBodyAssets';

/**
 * The CustomersUpdateResponseBody model module.
 * @module model/CustomersUpdateResponseBody
 * @version v2018-08-01
 */
class CustomersUpdateResponseBody {
    /**
     * Constructs a new <code>CustomersUpdateResponseBody</code>.
     * Response body schema for **PUT** &#x60;v1/customers/{customerId}&#x60;.
     * @alias module:model/CustomersUpdateResponseBody
     */
    constructor() { 
        
        CustomersUpdateResponseBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['object'] = 'customer';
    }

    /**
     * Constructs a <code>CustomersUpdateResponseBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomersUpdateResponseBody} obj Optional instance to populate.
     * @return {module:model/CustomersUpdateResponseBody} The populated <code>CustomersUpdateResponseBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomersUpdateResponseBody();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = CustomerSummary.constructFromObject(data['summary']);
            }
            if (data.hasOwnProperty('loyalty')) {
                obj['loyalty'] = CustomerLoyalty.constructFromObject(data['loyalty']);
            }
            if (data.hasOwnProperty('referrals')) {
                obj['referrals'] = CustomerReferrals.constructFromObject(data['referrals']);
            }
            if (data.hasOwnProperty('system_metadata')) {
                obj['system_metadata'] = ApiClient.convertToType(data['system_metadata'], Object);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('assets')) {
                obj['assets'] = CustomersUpdateResponseBodyAssets.constructFromObject(data['assets']);
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('birthday')) {
                obj['birthday'] = ApiClient.convertToType(data['birthday'], 'Date');
            }
            if (data.hasOwnProperty('birthdate')) {
                obj['birthdate'] = ApiClient.convertToType(data['birthdate'], 'Date');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = CustomersUpdateResponseBodyAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomersUpdateResponseBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomersUpdateResponseBody</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['source_id'] && !(typeof data['source_id'] === 'string' || data['source_id'] instanceof String)) {
            throw new Error("Expected the field `source_id` to be a primitive type in the JSON string but got " + data['source_id']);
        }
        // validate the optional field `summary`
        if (data['summary']) { // data not null
          CustomerSummary.validateJSON(data['summary']);
        }
        // validate the optional field `loyalty`
        if (data['loyalty']) { // data not null
          CustomerLoyalty.validateJSON(data['loyalty']);
        }
        // validate the optional field `referrals`
        if (data['referrals']) { // data not null
          CustomerReferrals.validateJSON(data['referrals']);
        }
        // validate the optional field `assets`
        if (data['assets']) { // data not null
          CustomersUpdateResponseBodyAssets.validateJSON(data['assets']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          CustomersUpdateResponseBodyAddress.validateJSON(data['address']);
        }

        return true;
    }


}



/**
 * The ID of an existing customer that will be linked to redemption in this request.
 * @member {String} id
 */
CustomersUpdateResponseBody.prototype['id'] = undefined;

/**
 * A unique identifier of the customer who validates a voucher. It can be a customer ID or email from a CRM system, database, or a third-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored.
 * @member {String} source_id
 */
CustomersUpdateResponseBody.prototype['source_id'] = undefined;

/**
 * @member {module:model/CustomerSummary} summary
 */
CustomersUpdateResponseBody.prototype['summary'] = undefined;

/**
 * @member {module:model/CustomerLoyalty} loyalty
 */
CustomersUpdateResponseBody.prototype['loyalty'] = undefined;

/**
 * @member {module:model/CustomerReferrals} referrals
 */
CustomersUpdateResponseBody.prototype['referrals'] = undefined;

/**
 * Object used to store system metadata information.
 * @member {Object} system_metadata
 */
CustomersUpdateResponseBody.prototype['system_metadata'] = undefined;

/**
 * Timestamp representing the date and time when the customer was created. The value is shown in the ISO 8601 format.
 * @member {Date} created_at
 */
CustomersUpdateResponseBody.prototype['created_at'] = undefined;

/**
 * Timestamp representing the date and time when the customer was updated. The value is shown in the ISO 8601 format.
 * @member {Date} updated_at
 */
CustomersUpdateResponseBody.prototype['updated_at'] = undefined;

/**
 * @member {module:model/CustomersUpdateResponseBodyAssets} assets
 */
CustomersUpdateResponseBody.prototype['assets'] = undefined;

/**
 * The type of the object represented by JSON.
 * @member {module:model/CustomersUpdateResponseBody.ObjectEnum} object
 * @default 'customer'
 */
CustomersUpdateResponseBody.prototype['object'] = 'customer';

/**
 * Customer's first and last name.
 * @member {String} name
 */
CustomersUpdateResponseBody.prototype['name'] = undefined;

/**
 * An arbitrary string that you can attach to a customer object.
 * @member {String} description
 */
CustomersUpdateResponseBody.prototype['description'] = undefined;

/**
 * Customer's email address.
 * @member {String} email
 */
CustomersUpdateResponseBody.prototype['email'] = undefined;

/**
 * Customer's phone number. This parameter is mandatory when you try to send out codes to customers via an SMS channel.
 * @member {String} phone
 */
CustomersUpdateResponseBody.prototype['phone'] = undefined;

/**
 * `Deprecated`. ~~Customer's birthdate; format YYYY-MM-DD~~.
 * @member {Date} birthday
 */
CustomersUpdateResponseBody.prototype['birthday'] = undefined;

/**
 * Customer's birthdate; format YYYY-MM-DD.
 * @member {Date} birthdate
 */
CustomersUpdateResponseBody.prototype['birthdate'] = undefined;

/**
 * @member {module:model/CustomersUpdateResponseBodyAddress} address
 */
CustomersUpdateResponseBody.prototype['address'] = undefined;

/**
 * A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments.
 * @member {Object} metadata
 */
CustomersUpdateResponseBody.prototype['metadata'] = undefined;





/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
CustomersUpdateResponseBody['ObjectEnum'] = {

    /**
     * value: "customer"
     * @const
     */
    "customer": "customer"
};



export default CustomersUpdateResponseBody;

