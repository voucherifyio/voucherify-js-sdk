/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicableToResultList from './ApplicableToResultList';
import CategoryWithStackingRulesType from './CategoryWithStackingRulesType';
import InapplicableToResultList from './InapplicableToResultList';
import QualificationsRedeemableBaseOrder from './QualificationsRedeemableBaseOrder';
import RedeemableResult from './RedeemableResult';
import ValidationRulesAssignmentsList from './ValidationRulesAssignmentsList';

/**
 * The QualificationsRedeemableBase model module.
 * @module model/QualificationsRedeemableBase
 * @version v2018-08-01
 */
class QualificationsRedeemableBase {
    /**
     * Constructs a new <code>QualificationsRedeemableBase</code>.
     * Data of single redeemable which was properly qualified.
     * @alias module:model/QualificationsRedeemableBase
     */
    constructor() { 
        
        QualificationsRedeemableBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QualificationsRedeemableBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QualificationsRedeemableBase} obj Optional instance to populate.
     * @return {module:model/QualificationsRedeemableBase} The populated <code>QualificationsRedeemableBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QualificationsRedeemableBase();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = RedeemableResult.constructFromObject(data['result']);
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = QualificationsRedeemableBaseOrder.constructFromObject(data['order']);
            }
            if (data.hasOwnProperty('validation_rule_id')) {
                obj['validation_rule_id'] = ApiClient.convertToType(data['validation_rule_id'], 'String');
            }
            if (data.hasOwnProperty('applicable_to')) {
                obj['applicable_to'] = ApplicableToResultList.constructFromObject(data['applicable_to']);
            }
            if (data.hasOwnProperty('inapplicable_to')) {
                obj['inapplicable_to'] = InapplicableToResultList.constructFromObject(data['inapplicable_to']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [CategoryWithStackingRulesType]);
            }
            if (data.hasOwnProperty('banner')) {
                obj['banner'] = ApiClient.convertToType(data['banner'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('campaign_name')) {
                obj['campaign_name'] = ApiClient.convertToType(data['campaign_name'], 'String');
            }
            if (data.hasOwnProperty('campaign_id')) {
                obj['campaign_id'] = ApiClient.convertToType(data['campaign_id'], 'String');
            }
            if (data.hasOwnProperty('validation_rules_assignments')) {
                obj['validation_rules_assignments'] = ValidationRulesAssignmentsList.constructFromObject(data['validation_rules_assignments']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QualificationsRedeemableBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QualificationsRedeemableBase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // validate the optional field `result`
        if (data['result']) { // data not null
          RedeemableResult.validateJSON(data['result']);
        }
        // validate the optional field `order`
        if (data['order']) { // data not null
          QualificationsRedeemableBaseOrder.validateJSON(data['order']);
        }
        // ensure the json data is a string
        if (data['validation_rule_id'] && !(typeof data['validation_rule_id'] === 'string' || data['validation_rule_id'] instanceof String)) {
            throw new Error("Expected the field `validation_rule_id` to be a primitive type in the JSON string but got " + data['validation_rule_id']);
        }
        // validate the optional field `applicable_to`
        if (data['applicable_to']) { // data not null
          ApplicableToResultList.validateJSON(data['applicable_to']);
        }
        // validate the optional field `inapplicable_to`
        if (data['inapplicable_to']) { // data not null
          InapplicableToResultList.validateJSON(data['inapplicable_to']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                CategoryWithStackingRulesType.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['banner'] && !(typeof data['banner'] === 'string' || data['banner'] instanceof String)) {
            throw new Error("Expected the field `banner` to be a primitive type in the JSON string but got " + data['banner']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['campaign_name'] && !(typeof data['campaign_name'] === 'string' || data['campaign_name'] instanceof String)) {
            throw new Error("Expected the field `campaign_name` to be a primitive type in the JSON string but got " + data['campaign_name']);
        }
        // ensure the json data is a string
        if (data['campaign_id'] && !(typeof data['campaign_id'] === 'string' || data['campaign_id'] instanceof String)) {
            throw new Error("Expected the field `campaign_id` to be a primitive type in the JSON string but got " + data['campaign_id']);
        }
        // validate the optional field `validation_rules_assignments`
        if (data['validation_rules_assignments']) { // data not null
          ValidationRulesAssignmentsList.validateJSON(data['validation_rules_assignments']);
        }

        return true;
    }


}



/**
 * ID of the redeemable. For a voucher, it's its `code` value.
 * @member {String} id
 */
QualificationsRedeemableBase.prototype['id'] = undefined;

/**
 * Object type of the redeemable.
 * @member {module:model/QualificationsRedeemableBase.ObjectEnum} object
 */
QualificationsRedeemableBase.prototype['object'] = undefined;

/**
 * Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format.
 * @member {Date} created_at
 */
QualificationsRedeemableBase.prototype['created_at'] = undefined;

/**
 * @member {module:model/RedeemableResult} result
 */
QualificationsRedeemableBase.prototype['result'] = undefined;

/**
 * @member {module:model/QualificationsRedeemableBaseOrder} order
 */
QualificationsRedeemableBase.prototype['order'] = undefined;

/**
 * A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance.
 * @member {String} validation_rule_id
 */
QualificationsRedeemableBase.prototype['validation_rule_id'] = undefined;

/**
 * @member {module:model/ApplicableToResultList} applicable_to
 */
QualificationsRedeemableBase.prototype['applicable_to'] = undefined;

/**
 * @member {module:model/InapplicableToResultList} inapplicable_to
 */
QualificationsRedeemableBase.prototype['inapplicable_to'] = undefined;

/**
 * The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.
 * @member {Object} metadata
 */
QualificationsRedeemableBase.prototype['metadata'] = undefined;

/**
 * List of category information.
 * @member {Array.<module:model/CategoryWithStackingRulesType>} categories
 */
QualificationsRedeemableBase.prototype['categories'] = undefined;

/**
 * Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard.
 * @member {String} banner
 */
QualificationsRedeemableBase.prototype['banner'] = undefined;

/**
 * Name of the redeemable.
 * @member {String} name
 */
QualificationsRedeemableBase.prototype['name'] = undefined;

/**
 * Name of the campaign associated to the redeemable. This field is available only if object is not `campaign`
 * @member {String} campaign_name
 */
QualificationsRedeemableBase.prototype['campaign_name'] = undefined;

/**
 * Id of the campaign associated to the redeemable. This field is available only if object is not `campaign`
 * @member {String} campaign_id
 */
QualificationsRedeemableBase.prototype['campaign_id'] = undefined;

/**
 * @member {module:model/ValidationRulesAssignmentsList} validation_rules_assignments
 */
QualificationsRedeemableBase.prototype['validation_rules_assignments'] = undefined;





/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
QualificationsRedeemableBase['ObjectEnum'] = {

    /**
     * value: "campaign"
     * @const
     */
    "campaign": "campaign",

    /**
     * value: "promotion_tier"
     * @const
     */
    "promotion_tier": "promotion_tier",

    /**
     * value: "promotion_stack"
     * @const
     */
    "promotion_stack": "promotion_stack",

    /**
     * value: "voucher"
     * @const
     */
    "voucher": "voucher"
};



export default QualificationsRedeemableBase;

